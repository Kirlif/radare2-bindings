/* automatically generated by rust-bindgen 0.59.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _FILE_OFFSET_BITS: u32 = 64;
pub const R_VERSION_H: u32 = 1;
pub const R2_VERSION_COMMIT: u32 = 30797;
pub const R2_VERSION: &'static [u8; 6usize] = b"5.4.1\0";
pub const R2_VERSION_MAJOR: u32 = 5;
pub const R2_VERSION_MINOR: u32 = 4;
pub const R2_VERSION_PATCH: u32 = 1;
pub const R2_VERSION_NUMBER: u32 = 50401;
pub const R2_GITTAP: &'static [u8; 10usize] = b"5.4.0-git\0";
pub const R2_GITTIP: &'static [u8; 41usize] = b"9c2bd20abf77cdfdc2fea00ce17f907af0b65f74\0";
pub const R2_BIRTH: &'static [u8; 21usize] = b"2021-08-31__20:44:06\0";
pub const R_CHECKS_LEVEL: u32 = 2;
pub const DEBUGGER: u32 = 1;
pub const HAVE_DECL_ADDR_NO_RANDOMIZE: u32 = 0;
pub const HAVE_ARC4RANDOM_UNIFORM: u32 = 0;
pub const HAVE_EXPLICIT_BZERO: u32 = 0;
pub const HAVE_EXPLICIT_MEMSET: u32 = 0;
pub const HAVE_CLOCK_NANOSLEEP: u32 = 0;
pub const HAVE_SIGACTION: u32 = 0;
pub const WANT_THREADS: u32 = 1;
pub const WANT_CAPSTONE: u32 = 1;
pub const HAVE_GPERF: u32 = 1;
pub const R2_PREFIX: &'static [u8; 11usize] = b"/usr/local\0";
pub const R2_ETCDIR: &'static [u8; 5usize] = b"/etc\0";
pub const R2_LIBDIR: &'static [u8; 15usize] = b"/usr/local/lib\0";
pub const R2_INCDIR: &'static [u8; 24usize] = b"/usr/local/include/libr\0";
pub const R2_DATDIR: &'static [u8; 17usize] = b"/usr/local/share\0";
pub const R2_WWWROOT: &'static [u8; 35usize] = b"/usr/local/share/radare2/5.4.1/www\0";
pub const R2_PLUGINS: &'static [u8; 18usize] = b"lib/radare2/5.4.1\0";
pub const R2_EXTRAS: &'static [u8; 25usize] = b"lib/radare2-extras/5.4.1\0";
pub const R2_BINDINGS: &'static [u8; 27usize] = b"lib/radare2-bindings/5.4.1\0";
pub const HAVE_LIB_MAGIC: u32 = 1;
pub const USE_LIB_MAGIC: u32 = 0;
pub const HAVE_LIB_XXHASH: u32 = 0;
pub const USE_LIB_XXHASH: u32 = 0;
pub const HAVE_LIB_SSL: u32 = 0;
pub const HAVE_LIBUV: u32 = 1;
pub const HAVE_PTRACE: u32 = 1;
pub const USE_PTRACE_WRAP: u32 = 0;
pub const HAVE_FORK: u32 = 1;
pub const WANT_DYLINK: u32 = 1;
pub const WITH_GPL: u32 = 1;
pub const HAVE_JEMALLOC: u32 = 1;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101500;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_CURRENT: u32 = 4;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const R_MODE_PRINT: u32 = 0;
pub const R_MODE_RADARE: u32 = 1;
pub const R_MODE_SET: u32 = 2;
pub const R_MODE_SIMPLE: u32 = 4;
pub const R_MODE_JSON: u32 = 8;
pub const R_MODE_ARRAY: u32 = 16;
pub const R_MODE_SIMPLEST: u32 = 32;
pub const R_MODE_CLASSDUMP: u32 = 64;
pub const R_MODE_EQUAL: u32 = 128;
pub const R_PERM_R: u32 = 4;
pub const R_PERM_W: u32 = 2;
pub const R_PERM_X: u32 = 1;
pub const R_PERM_RW: u32 = 6;
pub const R_PERM_RX: u32 = 5;
pub const R_PERM_RWX: u32 = 7;
pub const R_PERM_WX: u32 = 3;
pub const R_PERM_SHAR: u32 = 8;
pub const R_PERM_PRIV: u32 = 16;
pub const R_PERM_ACCESS: u32 = 32;
pub const R_PERM_CREAT: u32 = 64;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const LIBC_HAVE_SYSTEM: u32 = 1;
pub const HAVE_SYSTEM: u32 = 1;
pub const LIBC_HAVE_PTRACE: u32 = 1;
pub const LIBC_HAVE_FORK: u32 = 1;
pub const LIBC_HAVE_PLEDGE: u32 = 0;
pub const LIBC_HAVE_PRIV_SET: u32 = 0;
pub const __KFBSD__: u32 = 0;
pub const __BSD__: u32 = 0;
pub const __UNIX__: u32 = 1;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &'static [u8; 9usize] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 262144;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const UT64_MAX: i32 = -1;
pub const UT64_GT0: i64 = -9223372036854775808;
pub const UT64_LT0: u64 = 9223372036854775807;
pub const UT64_MIN: u32 = 0;
pub const UT64_32U: i64 = -4294967296;
pub const UT64_16U: i32 = -65536;
pub const UT64_8U: i32 = -256;
pub const UT32_MIN: u32 = 0;
pub const UT16_MIN: u32 = 0;
pub const UT32_GT0: u32 = 2147483648;
pub const UT32_LT0: u32 = 2147483647;
pub const ST32_MAX: u32 = 2147483647;
pub const ST32_MIN: i32 = -2147483648;
pub const UT32_MAX: u32 = 4294967295;
pub const ST16_MAX: u32 = 32767;
pub const ST16_MIN: i32 = -32768;
pub const UT16_GT0: u32 = 32768;
pub const UT16_MAX: u32 = 65535;
pub const ST8_MAX: u32 = 127;
pub const ST8_MIN: i32 = -128;
pub const UT8_GT0: u32 = 128;
pub const UT8_MAX: u32 = 255;
pub const UT8_MIN: u32 = 0;
pub const ASCII_MIN: u32 = 32;
pub const ASCII_MAX: u32 = 127;
pub const SZT_MAX: i32 = -1;
pub const SZT_MIN: u32 = 0;
pub const B11111: u32 = 31;
pub const B11110: u32 = 30;
pub const B11101: u32 = 29;
pub const B11100: u32 = 28;
pub const B11011: u32 = 27;
pub const B11010: u32 = 26;
pub const B11001: u32 = 25;
pub const B11000: u32 = 24;
pub const B10111: u32 = 23;
pub const B10110: u32 = 22;
pub const B10101: u32 = 21;
pub const B10100: u32 = 20;
pub const B10011: u32 = 19;
pub const B10010: u32 = 18;
pub const B10001: u32 = 17;
pub const B10000: u32 = 16;
pub const B1111: u32 = 15;
pub const B1110: u32 = 14;
pub const B1101: u32 = 13;
pub const B1100: u32 = 12;
pub const B1011: u32 = 11;
pub const B1010: u32 = 10;
pub const B1001: u32 = 9;
pub const B1000: u32 = 8;
pub const B0111: u32 = 7;
pub const B0110: u32 = 6;
pub const B0101: u32 = 5;
pub const B0100: u32 = 4;
pub const B0011: u32 = 3;
pub const B0010: u32 = 2;
pub const B0001: u32 = 1;
pub const B0000: u32 = 0;
pub const INFINITY: f64 = ::std::f64::INFINITY;
pub const NAN: f64 = ::std::f64::NAN;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SYNC: u32 = 128;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_DSYNC: u32 = 4194304;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const FS: &'static [u8; 2usize] = b"/\0";
pub const R_SYS_DIR: &'static [u8; 2usize] = b"/\0";
pub const R_SYS_ENVSEP: &'static [u8; 2usize] = b":\0";
pub const R_SYS_HOME: &'static [u8; 5usize] = b"HOME\0";
pub const R_SYS_TMP: &'static [u8; 7usize] = b"TMPDIR\0";
pub const PERROR_WITH_FILELINE: u32 = 0;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const UF_SETTABLE: u32 = 65535;
pub const UF_NODUMP: u32 = 1;
pub const UF_IMMUTABLE: u32 = 2;
pub const UF_APPEND: u32 = 4;
pub const UF_OPAQUE: u32 = 8;
pub const UF_COMPRESSED: u32 = 32;
pub const UF_TRACKED: u32 = 64;
pub const UF_DATAVAULT: u32 = 128;
pub const UF_HIDDEN: u32 = 32768;
pub const SF_SUPPORTED: u32 = 10420224;
pub const SF_SETTABLE: u32 = 1073676288;
pub const SF_SYNTHETIC: u32 = 3221225472;
pub const SF_ARCHIVED: u32 = 65536;
pub const SF_IMMUTABLE: u32 = 131072;
pub const SF_APPEND: u32 = 262144;
pub const SF_RESTRICTED: u32 = 524288;
pub const SF_NOUNLINK: u32 = 1048576;
pub const SF_FIRMLINK: u32 = 8388608;
pub const SF_DATALESS: u32 = 1073741824;
pub const EF_MAY_SHARE_BLOCKS: u32 = 1;
pub const EF_NO_XATTRS: u32 = 2;
pub const EF_IS_SYNC_ROOT: u32 = 4;
pub const EF_IS_PURGEABLE: u32 = 8;
pub const EF_IS_SPARSE: u32 = 16;
pub const UTIME_NOW: i32 = -1;
pub const UTIME_OMIT: i32 = -2;
pub const __DARWIN_MAXNAMLEN: u32 = 255;
pub const __DARWIN_MAXPATHLEN: u32 = 1024;
pub const MAXNAMLEN: u32 = 255;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DIRBLKSIZ: u32 = 1024;
pub const DTF_HIDEW: u32 = 1;
pub const DTF_NODUP: u32 = 2;
pub const DTF_REWIND: u32 = 4;
pub const __DTF_READALL: u32 = 8;
pub const __DTF_SKIPREAD: u32 = 16;
pub const __DTF_ATEND: u32 = 32;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: i32 = -1;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const CLOCKS_PER_SEC: u32 = 1000000;
pub const TIME_UTC: u32 = 1;
pub const HAVE_EPRINTF: u32 = 1;
pub const HAVE_REGEXP: u32 = 1;
pub const PFMT64x: &'static [u8; 4usize] = b"llx\0";
pub const PFMT64d: &'static [u8; 4usize] = b"lld\0";
pub const PFMT64u: &'static [u8; 4usize] = b"llu\0";
pub const PFMT64o: &'static [u8; 4usize] = b"llo\0";
pub const PFMTSZx: &'static [u8; 3usize] = b"zx\0";
pub const PFMTSZd: &'static [u8; 3usize] = b"zd\0";
pub const PFMTSZu: &'static [u8; 3usize] = b"zu\0";
pub const PFMTSZo: &'static [u8; 3usize] = b"zo\0";
pub const LDBLFMT: &'static [u8; 3usize] = b"Lf\0";
pub const HHXFMT: &'static [u8; 4usize] = b"hhx\0";
pub const PFMTDPTR: &'static [u8; 3usize] = b"td\0";
pub const PFMT32x: &'static [u8; 2usize] = b"x\0";
pub const PFMT32d: &'static [u8; 2usize] = b"d\0";
pub const PFMT32u: &'static [u8; 2usize] = b"u\0";
pub const PFMT32o: &'static [u8; 2usize] = b"o\0";
pub const O_BINARY: u32 = 0;
pub const R_SYS_ARCH: &'static [u8; 4usize] = b"x86\0";
pub const R_SYS_ENDIAN: u32 = 0;
pub const R_SYS_ENDIAN_NONE: u32 = 0;
pub const R_SYS_ENDIAN_LITTLE: u32 = 1;
pub const R_SYS_ENDIAN_BIG: u32 = 2;
pub const R_SYS_ENDIAN_BI: u32 = 3;
pub const HAS_CLOCK_NANOSLEEP: u32 = 0;
pub const HAS_CLOCK_MONOTONIC: u32 = 0;
pub const R_SYS_OS: &'static [u8; 7usize] = b"darwin\0";
pub const R_GETOPT_H: u32 = 1;
pub const R_PJ_H: u32 = 1;
pub const R_PRINT_JSON_DEPTH_LIMIT: u32 = 128;
pub const __PRI_8_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const PRId8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIi8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIo8: &'static [u8; 4usize] = b"hho\0";
pub const PRIu8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIx8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIX8: &'static [u8; 4usize] = b"hhX\0";
pub const PRId16: &'static [u8; 3usize] = b"hd\0";
pub const PRIi16: &'static [u8; 3usize] = b"hi\0";
pub const PRIo16: &'static [u8; 3usize] = b"ho\0";
pub const PRIu16: &'static [u8; 3usize] = b"hu\0";
pub const PRIx16: &'static [u8; 3usize] = b"hx\0";
pub const PRIX16: &'static [u8; 3usize] = b"hX\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRId64: &'static [u8; 4usize] = b"lld\0";
pub const PRIi64: &'static [u8; 4usize] = b"lli\0";
pub const PRIo64: &'static [u8; 4usize] = b"llo\0";
pub const PRIu64: &'static [u8; 4usize] = b"llu\0";
pub const PRIx64: &'static [u8; 4usize] = b"llx\0";
pub const PRIX64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"jd\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"ji\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"jo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"ju\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"jx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"jX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNd64: &'static [u8; 4usize] = b"lld\0";
pub const SCNi64: &'static [u8; 4usize] = b"lli\0";
pub const SCNo64: &'static [u8; 4usize] = b"llo\0";
pub const SCNu64: &'static [u8; 4usize] = b"llu\0";
pub const SCNx64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"jd\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"ji\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"jo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"ju\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"jx\0";
pub const __SDB_WINDOWS__: u32 = 0;
pub const DIRSEP: u8 = 47u8;
pub const HAVE_MMAN: u32 = 1;
pub const ULLFMT: &'static [u8; 3usize] = b"ll\0";
pub const USE_MMAN: u32 = 1;
pub const SDB_KEYSIZE: u32 = 32;
pub const USE_MONOTONIC_CLOCK: u32 = 0;
pub const HT_TYPE: u32 = 1;
pub const MHTSZ: u32 = 32;
pub const MHTNO: u32 = 0;
pub const KVLSZ: u32 = 4;
pub const CDB_MAX_KEY: u32 = 255;
pub const CDB_MAX_VALUE: u32 = 16777215;
pub const CDB_HASHSTART: u32 = 5381;
pub const BUFFER_INSIZE: u32 = 8192;
pub const BUFFER_OUTSIZE: u32 = 8192;
pub const CDB_HPLIST: u32 = 1000;
pub const SDB_VERSION: &'static [u8; 6usize] = b"1.8.1\0";
pub const SDB_MIN_VALUE: u32 = 1;
pub const SDB_MAX_VALUE: u32 = 16777215;
pub const SDB_MIN_KEY: u32 = 1;
pub const SDB_MAX_KEY: u32 = 255;
pub const SDB_MAX_GPERF_KEYS: u32 = 15000;
pub const SDB_MODE: u32 = 420;
pub const SDB_RS: u8 = 44u8;
pub const SDB_SS: &'static [u8; 2usize] = b",\0";
pub const SDB_MAX_PATH: u32 = 256;
pub const SDB_NUM_BASE: u32 = 16;
pub const SDB_NUM_BUFSZ: u32 = 64;
pub const SDB_OPTION_NONE: u32 = 0;
pub const SDB_OPTION_ALL: u32 = 255;
pub const SDB_OPTION_SYNC: u32 = 1;
pub const SDB_OPTION_NOSTAMP: u32 = 2;
pub const SDB_OPTION_FS: u32 = 4;
pub const SDB_OPTION_JOURNAL: u32 = 8;
pub const SDB_LIST_UNSORTED: u32 = 0;
pub const SDB_LIST_SORTED: u32 = 1;
pub const SDB_KSZ: u32 = 255;
pub const SDB_VSZ: u32 = 16777215;
pub const R_NUMCALC_STRSZ: u32 = 1024;
pub const HAVE_CAPSICUM: u32 = 0;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const R_SYS_DEVNULL: &'static [u8; 10usize] = b"/dev/null\0";
pub const R_SYS_BITS_8: u32 = 1;
pub const R_SYS_BITS_16: u32 = 2;
pub const R_SYS_BITS_32: u32 = 4;
pub const R_SYS_BITS_64: u32 = 8;
pub const SHELL_PATH: &'static [u8; 8usize] = b"/bin/sh\0";
pub const TERMUX_PREFIX: &'static [u8; 32usize] = b"/data/data/com.termux/files/usr\0";
pub const HT_NULL_VALUE: u32 = 0;
pub const VEOF: u32 = 0;
pub const VEOL: u32 = 1;
pub const VEOL2: u32 = 2;
pub const VERASE: u32 = 3;
pub const VWERASE: u32 = 4;
pub const VKILL: u32 = 5;
pub const VREPRINT: u32 = 6;
pub const VINTR: u32 = 8;
pub const VQUIT: u32 = 9;
pub const VSUSP: u32 = 10;
pub const VDSUSP: u32 = 11;
pub const VSTART: u32 = 12;
pub const VSTOP: u32 = 13;
pub const VLNEXT: u32 = 14;
pub const VDISCARD: u32 = 15;
pub const VMIN: u32 = 16;
pub const VTIME: u32 = 17;
pub const VSTATUS: u32 = 18;
pub const NCCS: u32 = 20;
pub const IGNBRK: u32 = 1;
pub const BRKINT: u32 = 2;
pub const IGNPAR: u32 = 4;
pub const PARMRK: u32 = 8;
pub const INPCK: u32 = 16;
pub const ISTRIP: u32 = 32;
pub const INLCR: u32 = 64;
pub const IGNCR: u32 = 128;
pub const ICRNL: u32 = 256;
pub const IXON: u32 = 512;
pub const IXOFF: u32 = 1024;
pub const IXANY: u32 = 2048;
pub const IMAXBEL: u32 = 8192;
pub const IUTF8: u32 = 16384;
pub const OPOST: u32 = 1;
pub const ONLCR: u32 = 2;
pub const OXTABS: u32 = 4;
pub const ONOEOT: u32 = 8;
pub const OCRNL: u32 = 16;
pub const ONOCR: u32 = 32;
pub const ONLRET: u32 = 64;
pub const OFILL: u32 = 128;
pub const NLDLY: u32 = 768;
pub const TABDLY: u32 = 3076;
pub const CRDLY: u32 = 12288;
pub const FFDLY: u32 = 16384;
pub const BSDLY: u32 = 32768;
pub const VTDLY: u32 = 65536;
pub const OFDEL: u32 = 131072;
pub const NL0: u32 = 0;
pub const NL1: u32 = 256;
pub const NL2: u32 = 512;
pub const NL3: u32 = 768;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 1024;
pub const TAB2: u32 = 2048;
pub const TAB3: u32 = 4;
pub const CR0: u32 = 0;
pub const CR1: u32 = 4096;
pub const CR2: u32 = 8192;
pub const CR3: u32 = 12288;
pub const FF0: u32 = 0;
pub const FF1: u32 = 16384;
pub const BS0: u32 = 0;
pub const BS1: u32 = 32768;
pub const VT0: u32 = 0;
pub const VT1: u32 = 65536;
pub const CIGNORE: u32 = 1;
pub const CSIZE: u32 = 768;
pub const CS5: u32 = 0;
pub const CS6: u32 = 256;
pub const CS7: u32 = 512;
pub const CS8: u32 = 768;
pub const CSTOPB: u32 = 1024;
pub const CREAD: u32 = 2048;
pub const PARENB: u32 = 4096;
pub const PARODD: u32 = 8192;
pub const HUPCL: u32 = 16384;
pub const CLOCAL: u32 = 32768;
pub const CCTS_OFLOW: u32 = 65536;
pub const CRTS_IFLOW: u32 = 131072;
pub const CDTR_IFLOW: u32 = 262144;
pub const CDSR_OFLOW: u32 = 524288;
pub const CCAR_OFLOW: u32 = 1048576;
pub const MDMBUF: u32 = 1048576;
pub const ECHOKE: u32 = 1;
pub const ECHOE: u32 = 2;
pub const ECHOK: u32 = 4;
pub const ECHO: u32 = 8;
pub const ECHONL: u32 = 16;
pub const ECHOPRT: u32 = 32;
pub const ECHOCTL: u32 = 64;
pub const ISIG: u32 = 128;
pub const ICANON: u32 = 256;
pub const ALTWERASE: u32 = 512;
pub const IEXTEN: u32 = 1024;
pub const EXTPROC: u32 = 2048;
pub const TOSTOP: u32 = 4194304;
pub const FLUSHO: u32 = 8388608;
pub const NOKERNINFO: u32 = 33554432;
pub const PENDIN: u32 = 536870912;
pub const NOFLSH: u32 = 2147483648;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TCSASOFT: u32 = 16;
pub const B0: u32 = 0;
pub const B50: u32 = 50;
pub const B75: u32 = 75;
pub const B110: u32 = 110;
pub const B134: u32 = 134;
pub const B150: u32 = 150;
pub const B200: u32 = 200;
pub const B300: u32 = 300;
pub const B600: u32 = 600;
pub const B1200: u32 = 1200;
pub const B1800: u32 = 1800;
pub const B2400: u32 = 2400;
pub const B4800: u32 = 4800;
pub const B9600: u32 = 9600;
pub const B19200: u32 = 19200;
pub const B38400: u32 = 38400;
pub const B7200: u32 = 7200;
pub const B14400: u32 = 14400;
pub const B28800: u32 = 28800;
pub const B57600: u32 = 57600;
pub const B76800: u32 = 76800;
pub const B115200: u32 = 115200;
pub const B230400: u32 = 230400;
pub const EXTA: u32 = 19200;
pub const EXTB: u32 = 38400;
pub const TCIFLUSH: u32 = 1;
pub const TCOFLUSH: u32 = 2;
pub const TCIOFLUSH: u32 = 3;
pub const TCOOFF: u32 = 1;
pub const TCOON: u32 = 2;
pub const TCIOFF: u32 = 3;
pub const TCION: u32 = 4;
pub const IOCPARM_MASK: u32 = 8191;
pub const IOCPARM_MAX: u32 = 8192;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_RI: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TTYDISC: u32 = 0;
pub const TABLDISC: u32 = 3;
pub const SLIPDISC: u32 = 4;
pub const PPPDISC: u32 = 5;
pub const TTYDEF_IFLAG: u32 = 11010;
pub const TTYDEF_OFLAG: u32 = 3;
pub const TTYDEF_LFLAG: u32 = 1483;
pub const TTYDEF_CFLAG: u32 = 19200;
pub const TTYDEF_SPEED: u32 = 9600;
pub const CEOL: u32 = 255;
pub const CERASE: u32 = 127;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u32 = 255;
pub const KEV_INET_SUBCLASS: u32 = 1;
pub const KEV_INET_NEW_ADDR: u32 = 1;
pub const KEV_INET_CHANGED_ADDR: u32 = 2;
pub const KEV_INET_ADDR_DELETED: u32 = 3;
pub const KEV_INET_SIFDSTADDR: u32 = 4;
pub const KEV_INET_SIFBRDADDR: u32 = 5;
pub const KEV_INET_SIFNETMASK: u32 = 6;
pub const KEV_INET_ARPCOLLISION: u32 = 7;
pub const KEV_INET_PORTINUSE: u32 = 8;
pub const KEV_INET_ARPRTRFAILURE: u32 = 9;
pub const KEV_INET_ARPRTRALIVE: u32 = 10;
pub const KEV_DL_SUBCLASS: u32 = 2;
pub const KEV_DL_SIFFLAGS: u32 = 1;
pub const KEV_DL_SIFMETRICS: u32 = 2;
pub const KEV_DL_SIFMTU: u32 = 3;
pub const KEV_DL_SIFPHYS: u32 = 4;
pub const KEV_DL_SIFMEDIA: u32 = 5;
pub const KEV_DL_SIFGENERIC: u32 = 6;
pub const KEV_DL_ADDMULTI: u32 = 7;
pub const KEV_DL_DELMULTI: u32 = 8;
pub const KEV_DL_IF_ATTACHED: u32 = 9;
pub const KEV_DL_IF_DETACHING: u32 = 10;
pub const KEV_DL_IF_DETACHED: u32 = 11;
pub const KEV_DL_LINK_OFF: u32 = 12;
pub const KEV_DL_LINK_ON: u32 = 13;
pub const KEV_DL_PROTO_ATTACHED: u32 = 14;
pub const KEV_DL_PROTO_DETACHED: u32 = 15;
pub const KEV_DL_LINK_ADDRESS_CHANGED: u32 = 16;
pub const KEV_DL_WAKEFLAGS_CHANGED: u32 = 17;
pub const KEV_DL_IF_IDLE_ROUTE_REFCNT: u32 = 18;
pub const KEV_DL_IFCAP_CHANGED: u32 = 19;
pub const KEV_DL_LINK_QUALITY_METRIC_CHANGED: u32 = 20;
pub const KEV_DL_NODE_PRESENCE: u32 = 21;
pub const KEV_DL_NODE_ABSENCE: u32 = 22;
pub const KEV_DL_MASTER_ELECTED: u32 = 23;
pub const KEV_DL_ISSUES: u32 = 24;
pub const KEV_DL_IFDELEGATE_CHANGED: u32 = 25;
pub const KEV_DL_AWDL_RESTRICTED: u32 = 26;
pub const KEV_DL_AWDL_UNRESTRICTED: u32 = 27;
pub const KEV_DL_RRC_STATE_CHANGED: u32 = 28;
pub const KEV_DL_QOS_MODE_CHANGED: u32 = 29;
pub const KEV_DL_LOW_POWER_MODE_CHANGED: u32 = 30;
pub const KEV_INET6_SUBCLASS: u32 = 6;
pub const KEV_INET6_NEW_USER_ADDR: u32 = 1;
pub const KEV_INET6_CHANGED_ADDR: u32 = 2;
pub const KEV_INET6_ADDR_DELETED: u32 = 3;
pub const KEV_INET6_NEW_LL_ADDR: u32 = 4;
pub const KEV_INET6_NEW_RTADV_ADDR: u32 = 5;
pub const KEV_INET6_DEFROUTER: u32 = 6;
pub const KEV_INET6_REQUEST_NAT64_PREFIX: u32 = 7;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_TIMESTAMP_MONOTONIC: u32 = 2048;
pub const SO_DONTTRUNC: u32 = 8192;
pub const SO_WANTMORE: u32 = 16384;
pub const SO_WANTOOBFLAG: u32 = 32768;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4112;
pub const SO_PEERLABEL: u32 = 4113;
pub const SO_NREAD: u32 = 4128;
pub const SO_NKE: u32 = 4129;
pub const SO_NOSIGPIPE: u32 = 4130;
pub const SO_NOADDRERR: u32 = 4131;
pub const SO_NWRITE: u32 = 4132;
pub const SO_REUSESHAREUID: u32 = 4133;
pub const SO_NOTIFYCONFLICT: u32 = 4134;
pub const SO_UPCALLCLOSEWAIT: u32 = 4135;
pub const SO_LINGER_SEC: u32 = 4224;
pub const SO_RANDOMPORT: u32 = 4226;
pub const SO_NP_EXTENSIONS: u32 = 4227;
pub const SO_NUMRCVPKT: u32 = 4370;
pub const SO_NET_SERVICE_TYPE: u32 = 4374;
pub const SO_NETSVC_MARKING_LEVEL: u32 = 4377;
pub const NET_SERVICE_TYPE_BE: u32 = 0;
pub const NET_SERVICE_TYPE_BK: u32 = 1;
pub const NET_SERVICE_TYPE_SIG: u32 = 2;
pub const NET_SERVICE_TYPE_VI: u32 = 3;
pub const NET_SERVICE_TYPE_VO: u32 = 4;
pub const NET_SERVICE_TYPE_RV: u32 = 5;
pub const NET_SERVICE_TYPE_AV: u32 = 6;
pub const NET_SERVICE_TYPE_OAM: u32 = 7;
pub const NET_SERVICE_TYPE_RD: u32 = 8;
pub const NETSVC_MRKNG_UNKNOWN: u32 = 0;
pub const NETSVC_MRKNG_LVL_L2: u32 = 1;
pub const NETSVC_MRKNG_LVL_L3L2_ALL: u32 = 2;
pub const NETSVC_MRKNG_LVL_L3L2_BK: u32 = 3;
pub const SAE_ASSOCID_ANY: u32 = 0;
pub const SAE_CONNID_ANY: u32 = 0;
pub const CONNECT_RESUME_ON_READ_WRITE: u32 = 1;
pub const CONNECT_DATA_IDEMPOTENT: u32 = 2;
pub const CONNECT_DATA_AUTHENTICATED: u32 = 4;
pub const SONPX_SETOPTSHUT: u32 = 1;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_NDRV: u32 = 27;
pub const AF_ISDN: u32 = 28;
pub const AF_E164: u32 = 28;
pub const pseudo_AF_KEY: u32 = 29;
pub const AF_INET6: u32 = 30;
pub const AF_NATM: u32 = 31;
pub const AF_SYSTEM: u32 = 32;
pub const AF_NETBIOS: u32 = 33;
pub const AF_PPP: u32 = 34;
pub const pseudo_AF_HDRCMPLT: u32 = 35;
pub const AF_RESERVED_36: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_UTUN: u32 = 38;
pub const AF_MAX: u32 = 40;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_NDRV: u32 = 27;
pub const PF_ISDN: u32 = 28;
pub const PF_KEY: u32 = 29;
pub const PF_INET6: u32 = 30;
pub const PF_NATM: u32 = 31;
pub const PF_SYSTEM: u32 = 32;
pub const PF_NETBIOS: u32 = 33;
pub const PF_PPP: u32 = 34;
pub const PF_RESERVED_36: u32 = 36;
pub const PF_UTUN: u32 = 38;
pub const PF_MAX: u32 = 40;
pub const NET_MAXID: u32 = 40;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_STAT: u32 = 4;
pub const NET_RT_TRASH: u32 = 5;
pub const NET_RT_IFLIST2: u32 = 6;
pub const NET_RT_DUMP2: u32 = 7;
pub const NET_RT_FLAGS_PRIV: u32 = 10;
pub const NET_RT_MAXID: u32 = 11;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_WAITSTREAM: u32 = 512;
pub const MSG_FLUSH: u32 = 1024;
pub const MSG_HOLD: u32 = 2048;
pub const MSG_SEND: u32 = 4096;
pub const MSG_HAVEMORE: u32 = 8192;
pub const MSG_RCVMORE: u32 = 16384;
pub const MSG_NEEDSA: u32 = 65536;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_TIMESTAMP_MONOTONIC: u32 = 4;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const CONS_MAX_USER: u32 = 102400;
pub const CONS_BUFSZ: u32 = 20224;
pub const CONS_PALETTE_SIZE: u32 = 22;
pub const CONS_COLORS_SIZE: u32 = 21;
pub const R_CONS_GREP_WORDS: u32 = 10;
pub const R_CONS_GREP_WORD_SIZE: u32 = 64;
pub const R_CONS_GREP_TOKENS: u32 = 64;
pub const R_CONS_GREP_COUNT: u32 = 10;
pub const R_CONS_CMD_DEPTH: u32 = 100;
pub const CONS_MAX_ATTR_SZ: u32 = 16;
pub const RUNECODE_MIN: u32 = 200;
pub const RUNECODE_LINE_VERT: u32 = 200;
pub const RUNECODE_LINE_CROSS: u32 = 201;
pub const RUNECODE_CORNER_BR: u32 = 202;
pub const RUNECODE_CORNER_BL: u32 = 203;
pub const RUNECODE_ARROW_RIGHT: u32 = 204;
pub const RUNECODE_ARROW_LEFT: u32 = 205;
pub const RUNECODE_LINE_HORIZ: u32 = 206;
pub const RUNECODE_CORNER_TL: u32 = 207;
pub const RUNECODE_CORNER_TR: u32 = 208;
pub const RUNECODE_LINE_UP: u32 = 209;
pub const RUNECODE_CURVE_CORNER_TL: u32 = 210;
pub const RUNECODE_CURVE_CORNER_TR: u32 = 211;
pub const RUNECODE_CURVE_CORNER_BR: u32 = 212;
pub const RUNECODE_CURVE_CORNER_BL: u32 = 213;
pub const RUNECODE_MAX: u32 = 214;
pub const RUNECODESTR_MIN: u32 = 200;
pub const RUNECODESTR_LINE_VERT: [u8; 2usize] = [200u8, 0u8];
pub const RUNECODESTR_LINE_CROSS: [u8; 2usize] = [201u8, 0u8];
pub const RUNECODESTR_CORNER_BR: [u8; 2usize] = [202u8, 0u8];
pub const RUNECODESTR_CORNER_BL: [u8; 2usize] = [203u8, 0u8];
pub const RUNECODESTR_ARROW_RIGHT: [u8; 2usize] = [204u8, 0u8];
pub const RUNECODESTR_ARROW_LEFT: [u8; 2usize] = [205u8, 0u8];
pub const RUNECODESTR_LINE_HORIZ: [u8; 2usize] = [206u8, 0u8];
pub const RUNECODESTR_CORNER_TL: [u8; 2usize] = [207u8, 0u8];
pub const RUNECODESTR_CORNER_TR: [u8; 2usize] = [208u8, 0u8];
pub const RUNECODESTR_LINE_UP: [u8; 2usize] = [209u8, 0u8];
pub const RUNECODESTR_CURVE_CORNER_TL: [u8; 2usize] = [210u8, 0u8];
pub const RUNECODESTR_CURVE_CORNER_TR: [u8; 2usize] = [211u8, 0u8];
pub const RUNECODESTR_CURVE_CORNER_BR: [u8; 2usize] = [212u8, 0u8];
pub const RUNECODESTR_CURVE_CORNER_BL: [u8; 2usize] = [213u8, 0u8];
pub const RUNECODESTR_MAX: u32 = 213;
pub const RUNE_LINE_VERT: &'static [u8; 4usize] = b"\xE2\x94\x82\0";
pub const RUNE_LINE_CROSS: &'static [u8; 4usize] = b"\xE2\x94\xBC\0";
pub const RUNE_LINE_HORIZ: &'static [u8; 4usize] = b"\xE2\x94\x80\0";
pub const RUNE_LINE_UP: &'static [u8; 4usize] = b"\xE2\x86\x91\0";
pub const RUNE_CORNER_BR: &'static [u8; 4usize] = b"\xE2\x94\x98\0";
pub const RUNE_CORNER_BL: &'static [u8; 4usize] = b"\xE2\x94\x94\0";
pub const RUNE_CORNER_TL: &'static [u8; 4usize] = b"\xE2\x94\x8C\0";
pub const RUNE_CORNER_TR: &'static [u8; 4usize] = b"\xE2\x94\x90\0";
pub const RUNE_ARROW_RIGHT: &'static [u8; 2usize] = b">\0";
pub const RUNE_ARROW_LEFT: &'static [u8; 2usize] = b"<\0";
pub const RUNE_CURVE_CORNER_TL: &'static [u8; 4usize] = b"\xE2\x95\xAD\0";
pub const RUNE_CURVE_CORNER_TR: &'static [u8; 4usize] = b"\xE2\x95\xAE\0";
pub const RUNE_CURVE_CORNER_BR: &'static [u8; 4usize] = b"\xE2\x95\xAF\0";
pub const RUNE_CURVE_CORNER_BL: &'static [u8; 4usize] = b"\xE2\x95\xB0\0";
pub const RUNE_LONG_LINE_HORIZ: &'static [u8; 4usize] = b"\xE2\x80\x95\0";
pub const R_UTF8_CIRCLE: &'static [u8; 4usize] = b"\xE2\x97\xAF\0";
pub const R_UTF8_BLOCK: &'static [u8; 4usize] = b"\xE2\x96\x88\0";
pub const R_UTF8_POLICE_CARS_REVOLVING_LIGHT: &'static [u8; 5usize] = b"\xF0\x9F\x9A\xA8\0";
pub const R_UTF8_WHITE_HEAVY_CHECK_MARK: &'static [u8; 4usize] = b"\xE2\x9C\x85\0";
pub const R_UTF8_SEE_NO_EVIL_MONKEY: &'static [u8; 5usize] = b"\xF0\x9F\x99\x88\0";
pub const R_UTF8_SKULL_AND_CROSSBONES: &'static [u8; 4usize] = b"\xE2\x98\xA0\0";
pub const R_UTF8_KEYBOARD: &'static [u8; 4usize] = b"\xE2\x8C\xA8\0";
pub const R_UTF8_LEFT_POINTING_MAGNIFYING_GLASS: &'static [u8; 5usize] = b"\xF0\x9F\x94\x8D\0";
pub const R_UTF8_DOOR: &'static [u8; 5usize] = b"\xF0\x9F\x9A\xAA\0";
pub const R_UTF8_VS16: &'static [u8; 4usize] = b"\xEF\xB8\x8F\0";
pub const HUD_BUF_SIZE: u32 = 512;
pub const R_CONS_KEY_F1: u32 = 241;
pub const R_CONS_KEY_F2: u32 = 242;
pub const R_CONS_KEY_F3: u32 = 243;
pub const R_CONS_KEY_F4: u32 = 244;
pub const R_CONS_KEY_F5: u32 = 245;
pub const R_CONS_KEY_F6: u32 = 246;
pub const R_CONS_KEY_F7: u32 = 247;
pub const R_CONS_KEY_F8: u32 = 248;
pub const R_CONS_KEY_F9: u32 = 249;
pub const R_CONS_KEY_F10: u32 = 250;
pub const R_CONS_KEY_F11: u32 = 251;
pub const R_CONS_KEY_F12: u32 = 252;
pub const R_CONS_KEY_ESC: u32 = 27;
pub const R_CONS_CLEAR_LINE: &'static [u8; 6usize] = b"\x1B[2K\r\0";
pub const R_CONS_CLEAR_SCREEN: &'static [u8; 6usize] = b"\x1B[2J\r\0";
pub const R_CONS_CLEAR_FROM_CURSOR_TO_END: &'static [u8; 6usize] = b"\x1B[0J\r\0";
pub const R_CONS_CURSOR_SAVE: &'static [u8; 4usize] = b"\x1B[s\0";
pub const R_CONS_CURSOR_RESTORE: &'static [u8; 4usize] = b"\x1B[u\0";
pub const R_CONS_GET_CURSOR_POSITION: &'static [u8; 5usize] = b"\x1B[6n\0";
pub const R_CONS_CURSOR_UP: &'static [u8; 4usize] = b"\x1B[A\0";
pub const R_CONS_CURSOR_DOWN: &'static [u8; 4usize] = b"\x1B[B\0";
pub const R_CONS_CURSOR_RIGHT: &'static [u8; 4usize] = b"\x1B[C\0";
pub const R_CONS_CURSOR_LEFT: &'static [u8; 4usize] = b"\x1B[D\0";
pub const Color_BLINK: &'static [u8; 5usize] = b"\x1B[5m\0";
pub const Color_INVERT: &'static [u8; 5usize] = b"\x1B[7m\0";
pub const Color_INVERT_RESET: &'static [u8; 6usize] = b"\x1B[27m\0";
pub const Color_RESET_TERMINAL: &'static [u8; 19usize] = b"\x1Bc\x1B(K\x1B[0m\x1B[J\x1B[?25h\0";
pub const Color_RESET: &'static [u8; 5usize] = b"\x1B[0m\0";
pub const Color_RESET_NOBG: &'static [u8; 21usize] = b"\x1B[27;22;24;25;28;39m\0";
pub const Color_RESET_BG: &'static [u8; 6usize] = b"\x1B[49m\0";
pub const Color_RESET_ALL: &'static [u8; 10usize] = b"\x1B[0m\x1B[49m\0";
pub const Color_BLACK: &'static [u8; 6usize] = b"\x1B[30m\0";
pub const Color_BGBLACK: &'static [u8; 6usize] = b"\x1B[40m\0";
pub const Color_RED: &'static [u8; 6usize] = b"\x1B[31m\0";
pub const Color_BGRED: &'static [u8; 6usize] = b"\x1B[41m\0";
pub const Color_WHITE: &'static [u8; 6usize] = b"\x1B[37m\0";
pub const Color_BGWHITE: &'static [u8; 6usize] = b"\x1B[47m\0";
pub const Color_GREEN: &'static [u8; 6usize] = b"\x1B[32m\0";
pub const Color_BGGREEN: &'static [u8; 6usize] = b"\x1B[42m\0";
pub const Color_MAGENTA: &'static [u8; 6usize] = b"\x1B[35m\0";
pub const Color_BGMAGENTA: &'static [u8; 6usize] = b"\x1B[45m\0";
pub const Color_YELLOW: &'static [u8; 6usize] = b"\x1B[33m\0";
pub const Color_BGYELLOW: &'static [u8; 6usize] = b"\x1B[43m\0";
pub const Color_CYAN: &'static [u8; 6usize] = b"\x1B[36m\0";
pub const Color_BGCYAN: &'static [u8; 6usize] = b"\x1B[46m\0";
pub const Color_BLUE: &'static [u8; 6usize] = b"\x1B[34m\0";
pub const Color_BGBLUE: &'static [u8; 6usize] = b"\x1B[44m\0";
pub const Color_GRAY: &'static [u8; 6usize] = b"\x1B[90m\0";
pub const Color_BGGRAY: &'static [u8; 7usize] = b"\x1B[100m\0";
pub const Color_BBLACK: &'static [u8; 6usize] = b"\x1B[90m\0";
pub const Color_BBGBLACK: &'static [u8; 7usize] = b"\x1B[100m\0";
pub const Color_BRED: &'static [u8; 6usize] = b"\x1B[91m\0";
pub const Color_BBGRED: &'static [u8; 7usize] = b"\x1B[101m\0";
pub const Color_BWHITE: &'static [u8; 6usize] = b"\x1B[97m\0";
pub const Color_BBGWHITE: &'static [u8; 7usize] = b"\x1B[107m\0";
pub const Color_BGREEN: &'static [u8; 6usize] = b"\x1B[92m\0";
pub const Color_BBGGREEN: &'static [u8; 7usize] = b"\x1B[102m\0";
pub const Color_BMAGENTA: &'static [u8; 6usize] = b"\x1B[95m\0";
pub const Color_BBGMAGENTA: &'static [u8; 7usize] = b"\x1B[105m\0";
pub const Color_BYELLOW: &'static [u8; 6usize] = b"\x1B[93m\0";
pub const Color_BBGYELLOW: &'static [u8; 7usize] = b"\x1B[103m\0";
pub const Color_BCYAN: &'static [u8; 6usize] = b"\x1B[96m\0";
pub const Color_BBGCYAN: &'static [u8; 7usize] = b"\x1B[106m\0";
pub const Color_BBLUE: &'static [u8; 6usize] = b"\x1B[94m\0";
pub const Color_BBGBLUE: &'static [u8; 7usize] = b"\x1B[104m\0";
pub const DOT_STYLE_NORMAL: u32 = 0;
pub const DOT_STYLE_CONDITIONAL: u32 = 1;
pub const DOT_STYLE_BACKEDGE: u32 = 2;
pub const LINE_VERT: u32 = 0;
pub const LINE_CROSS: u32 = 1;
pub const LINE_HORIZ: u32 = 2;
pub const LINE_UP: u32 = 3;
pub const CORNER_TL: u32 = 6;
pub const CORNER_BR: u32 = 4;
pub const CORNER_BL: u32 = 5;
pub const CORNER_TR: u32 = 6;
pub const ARROW_RIGHT: u32 = 8;
pub const ARROW_LEFT: u32 = 9;
pub const R_LINE_BUFSIZE: u32 = 4096;
pub const R_LINE_HISTSIZE: u32 = 256;
pub const R_EDGES_X_INC: u32 = 4;
pub const R_SELWIDGET_MAXH: u32 = 15;
pub const R_SELWIDGET_MAXW: u32 = 30;
pub const R_SELWIDGET_DIR_UP: u32 = 0;
pub const R_SELWIDGET_DIR_DOWN: u32 = 1;
pub const Color_INSERT: &'static [u8; 6usize] = b"\x1B[92m\0";
pub const Color_DELETE: &'static [u8; 6usize] = b"\x1B[91m\0";
pub const Color_BGINSERT: &'static [u8; 11usize] = b"\x1B[48;5;22m\0";
pub const Color_BGDELETE: &'static [u8; 11usize] = b"\x1B[48;5;52m\0";
pub const Color_HLINSERT: &'static [u8; 16usize] = b"\x1B[48;5;22m\x1B[92m\0";
pub const Color_HLDELETE: &'static [u8; 16usize] = b"\x1B[48;5;52m\x1B[91m\0";
pub const R_REGEX_BASIC: u32 = 0;
pub const R_REGEX_EXTENDED: u32 = 1;
pub const R_REGEX_ICASE: u32 = 2;
pub const R_REGEX_NOSUB: u32 = 4;
pub const R_REGEX_NEWLINE: u32 = 8;
pub const R_REGEX_NOSPEC: u32 = 16;
pub const R_REGEX_PEND: u32 = 32;
pub const R_REGEX_DUMP: u32 = 128;
pub const R_REGEX_ENOSYS: i32 = -1;
pub const R_REGEX_NOMATCH: u32 = 1;
pub const R_REGEX_BADPAT: u32 = 2;
pub const R_REGEX_ECOLLATE: u32 = 3;
pub const R_REGEX_ECTYPE: u32 = 4;
pub const R_REGEX_EESCAPE: u32 = 5;
pub const R_REGEX_ESUBREG: u32 = 6;
pub const R_REGEX_EBRACK: u32 = 7;
pub const R_REGEX_EPAREN: u32 = 8;
pub const R_REGEX_EBRACE: u32 = 9;
pub const R_REGEX_BADBR: u32 = 10;
pub const R_REGEX_ERANGE: u32 = 11;
pub const R_REGEX_ESPACE: u32 = 12;
pub const R_REGEX_BADRPT: u32 = 13;
pub const R_REGEX_EMPTY: u32 = 14;
pub const R_REGEX_ASSERT: u32 = 15;
pub const R_REGEX_INVARG: u32 = 16;
pub const R_REGEX_ILLSEQ: u32 = 17;
pub const R_REGEX_ATOI: u32 = 255;
pub const R_REGEX_ITOA: u32 = 256;
pub const R_REGEX_NOTBOL: u32 = 1;
pub const R_REGEX_NOTEOL: u32 = 2;
pub const R_REGEX_STARTEND: u32 = 4;
pub const R_REGEX_TRACE: u32 = 256;
pub const R_REGEX_LARGE: u32 = 512;
pub const R_REGEX_BACKR: u32 = 1024;
pub const HAVE_PTHREAD: u32 = 1;
pub const SEM_VALUE_MAX: u32 = 32767;
pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
pub const SCHED_OTHER: u32 = 1;
pub const SCHED_FIFO: u32 = 4;
pub const SCHED_RR: u32 = 2;
pub const __SCHED_PARAM_SIZE__: u32 = 4;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_CREATE_DETACHED: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP: u32 = 1;
pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP: u32 = 3;
pub const HAVE_PTHREAD_NP: u32 = 1;
pub const _R_UTIL_ALLOC_H_: u32 = 1;
pub const R_MALLOC_WRAPPER: u32 = 0;
pub const R_MALLOC_GLOBAL: u32 = 0;
pub const R_RBTREE_MAX_HEIGHT: u32 = 62;
pub const R_BIG_WORD_SIZE: u32 = 4;
pub const R_BIG_ARRAY_SIZE: u32 = 128;
pub const R_BIG_SPRINTF_FORMAT_STR: &'static [u8; 6usize] = b"%.08x\0";
pub const R_BIG_FORMAT_STR_LEN: u32 = 9;
pub const R_BIG_SSCANF_FORMAT_STR: &'static [u8; 4usize] = b"%8x\0";
pub const R_BUF_SET: u32 = 0;
pub const R_BUF_CUR: u32 = 1;
pub const R_BUF_END: u32 = 2;
pub const BITWORD_BITS_SHIFT: u32 = 6;
pub const R_NSEC_PER_SEC: u32 = 1000000000;
pub const R_NSEC_PER_MSEC: u32 = 1000000;
pub const R_USEC_PER_SEC: u32 = 1000000;
pub const R_NSEC_PER_USEC: u32 = 1000;
pub const R_USEC_PER_MSEC: u32 = 1000;
pub const ASCTIME_BUF_MINLEN: u32 = 26;
pub const R_TIME_PROFILE_ENABLED: u32 = 0;
pub const R_SPACES_MAX: u32 = 512;
pub const R_STRPOOL_INC: u32 = 1024;
pub const ASN1_JSON_NULL: &'static [u8; 5usize] = b"null\0";
pub const ASN1_JSON_EMPTY: &'static [u8; 3usize] = b"{}\0";
pub const ASN1_OID_LEN: u32 = 64;
pub const ASN1_CLASS: u32 = 192;
pub const ASN1_FORM: u32 = 32;
pub const ASN1_TAG: u32 = 31;
pub const ASN1_LENLONG: u32 = 128;
pub const ASN1_LENSHORT: u32 = 127;
pub const CLASS_UNIVERSAL: u32 = 0;
pub const CLASS_APPLICATION: u32 = 64;
pub const CLASS_CONTEXT: u32 = 128;
pub const CLASS_PRIVATE: u32 = 192;
pub const FORM_PRIMITIVE: u32 = 0;
pub const FORM_CONSTRUCTED: u32 = 32;
pub const TAG_EOC: u32 = 0;
pub const TAG_BOOLEAN: u32 = 1;
pub const TAG_INTEGER: u32 = 2;
pub const TAG_BITSTRING: u32 = 3;
pub const TAG_OCTETSTRING: u32 = 4;
pub const TAG_NULL: u32 = 5;
pub const TAG_OID: u32 = 6;
pub const TAG_OBJDESCRIPTOR: u32 = 7;
pub const TAG_EXTERNAL: u32 = 8;
pub const TAG_REAL: u32 = 9;
pub const TAG_ENUMERATED: u32 = 10;
pub const TAG_EMBEDDED_PDV: u32 = 11;
pub const TAG_UTF8STRING: u32 = 12;
pub const TAG_SEQUENCE: u32 = 16;
pub const TAG_SET: u32 = 17;
pub const TAG_NUMERICSTRING: u32 = 18;
pub const TAG_PRINTABLESTRING: u32 = 19;
pub const TAG_T61STRING: u32 = 20;
pub const TAG_VIDEOTEXSTRING: u32 = 21;
pub const TAG_IA5STRING: u32 = 22;
pub const TAG_UTCTIME: u32 = 23;
pub const TAG_GENERALIZEDTIME: u32 = 24;
pub const TAG_GRAPHICSTRING: u32 = 25;
pub const TAG_VISIBLESTRING: u32 = 26;
pub const TAG_GENERALSTRING: u32 = 27;
pub const TAG_UNIVERSALSTRING: u32 = 28;
pub const TAG_BMPSTRING: u32 = 30;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_IGMP: u32 = 2;
pub const IPPROTO_GGP: u32 = 3;
pub const IPPROTO_IPV4: u32 = 4;
pub const IPPROTO_IPIP: u32 = 4;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_ST: u32 = 7;
pub const IPPROTO_EGP: u32 = 8;
pub const IPPROTO_PIGP: u32 = 9;
pub const IPPROTO_RCCMON: u32 = 10;
pub const IPPROTO_NVPII: u32 = 11;
pub const IPPROTO_PUP: u32 = 12;
pub const IPPROTO_ARGUS: u32 = 13;
pub const IPPROTO_EMCON: u32 = 14;
pub const IPPROTO_XNET: u32 = 15;
pub const IPPROTO_CHAOS: u32 = 16;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_MUX: u32 = 18;
pub const IPPROTO_MEAS: u32 = 19;
pub const IPPROTO_HMP: u32 = 20;
pub const IPPROTO_PRM: u32 = 21;
pub const IPPROTO_IDP: u32 = 22;
pub const IPPROTO_TRUNK1: u32 = 23;
pub const IPPROTO_TRUNK2: u32 = 24;
pub const IPPROTO_LEAF1: u32 = 25;
pub const IPPROTO_LEAF2: u32 = 26;
pub const IPPROTO_RDP: u32 = 27;
pub const IPPROTO_IRTP: u32 = 28;
pub const IPPROTO_TP: u32 = 29;
pub const IPPROTO_BLT: u32 = 30;
pub const IPPROTO_NSP: u32 = 31;
pub const IPPROTO_INP: u32 = 32;
pub const IPPROTO_SEP: u32 = 33;
pub const IPPROTO_3PC: u32 = 34;
pub const IPPROTO_IDPR: u32 = 35;
pub const IPPROTO_XTP: u32 = 36;
pub const IPPROTO_DDP: u32 = 37;
pub const IPPROTO_CMTP: u32 = 38;
pub const IPPROTO_TPXX: u32 = 39;
pub const IPPROTO_IL: u32 = 40;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_SDRP: u32 = 42;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_IDRP: u32 = 45;
pub const IPPROTO_RSVP: u32 = 46;
pub const IPPROTO_GRE: u32 = 47;
pub const IPPROTO_MHRP: u32 = 48;
pub const IPPROTO_BHA: u32 = 49;
pub const IPPROTO_ESP: u32 = 50;
pub const IPPROTO_AH: u32 = 51;
pub const IPPROTO_INLSP: u32 = 52;
pub const IPPROTO_SWIPE: u32 = 53;
pub const IPPROTO_NHRP: u32 = 54;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_AHIP: u32 = 61;
pub const IPPROTO_CFTP: u32 = 62;
pub const IPPROTO_HELLO: u32 = 63;
pub const IPPROTO_SATEXPAK: u32 = 64;
pub const IPPROTO_KRYPTOLAN: u32 = 65;
pub const IPPROTO_RVD: u32 = 66;
pub const IPPROTO_IPPC: u32 = 67;
pub const IPPROTO_ADFS: u32 = 68;
pub const IPPROTO_SATMON: u32 = 69;
pub const IPPROTO_VISA: u32 = 70;
pub const IPPROTO_IPCV: u32 = 71;
pub const IPPROTO_CPNX: u32 = 72;
pub const IPPROTO_CPHB: u32 = 73;
pub const IPPROTO_WSN: u32 = 74;
pub const IPPROTO_PVP: u32 = 75;
pub const IPPROTO_BRSATMON: u32 = 76;
pub const IPPROTO_ND: u32 = 77;
pub const IPPROTO_WBMON: u32 = 78;
pub const IPPROTO_WBEXPAK: u32 = 79;
pub const IPPROTO_EON: u32 = 80;
pub const IPPROTO_VMTP: u32 = 81;
pub const IPPROTO_SVMTP: u32 = 82;
pub const IPPROTO_VINES: u32 = 83;
pub const IPPROTO_TTP: u32 = 84;
pub const IPPROTO_IGP: u32 = 85;
pub const IPPROTO_DGP: u32 = 86;
pub const IPPROTO_TCF: u32 = 87;
pub const IPPROTO_IGRP: u32 = 88;
pub const IPPROTO_OSPFIGP: u32 = 89;
pub const IPPROTO_SRPC: u32 = 90;
pub const IPPROTO_LARP: u32 = 91;
pub const IPPROTO_MTP: u32 = 92;
pub const IPPROTO_AX25: u32 = 93;
pub const IPPROTO_IPEIP: u32 = 94;
pub const IPPROTO_MICP: u32 = 95;
pub const IPPROTO_SCCSP: u32 = 96;
pub const IPPROTO_ETHERIP: u32 = 97;
pub const IPPROTO_ENCAP: u32 = 98;
pub const IPPROTO_APES: u32 = 99;
pub const IPPROTO_GMTP: u32 = 100;
pub const IPPROTO_PIM: u32 = 103;
pub const IPPROTO_IPCOMP: u32 = 108;
pub const IPPROTO_PGM: u32 = 113;
pub const IPPROTO_SCTP: u32 = 132;
pub const IPPROTO_DIVERT: u32 = 254;
pub const IPPROTO_RAW: u32 = 255;
pub const IPPROTO_MAX: u32 = 256;
pub const IPPROTO_DONE: u32 = 257;
pub const __DARWIN_IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_USERRESERVED: u32 = 5000;
pub const IPPORT_HIFIRSTAUTO: u32 = 49152;
pub const IPPORT_HILASTAUTO: u32 = 65535;
pub const IPPORT_RESERVEDSTART: u32 = 600;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const INADDR_NONE: u32 = 4294967295;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const IP_OPTIONS: u32 = 1;
pub const IP_HDRINCL: u32 = 2;
pub const IP_TOS: u32 = 3;
pub const IP_TTL: u32 = 4;
pub const IP_RECVOPTS: u32 = 5;
pub const IP_RECVRETOPTS: u32 = 6;
pub const IP_RECVDSTADDR: u32 = 7;
pub const IP_RETOPTS: u32 = 8;
pub const IP_MULTICAST_IF: u32 = 9;
pub const IP_MULTICAST_TTL: u32 = 10;
pub const IP_MULTICAST_LOOP: u32 = 11;
pub const IP_ADD_MEMBERSHIP: u32 = 12;
pub const IP_DROP_MEMBERSHIP: u32 = 13;
pub const IP_MULTICAST_VIF: u32 = 14;
pub const IP_RSVP_ON: u32 = 15;
pub const IP_RSVP_OFF: u32 = 16;
pub const IP_RSVP_VIF_ON: u32 = 17;
pub const IP_RSVP_VIF_OFF: u32 = 18;
pub const IP_PORTRANGE: u32 = 19;
pub const IP_RECVIF: u32 = 20;
pub const IP_IPSEC_POLICY: u32 = 21;
pub const IP_FAITH: u32 = 22;
pub const IP_STRIPHDR: u32 = 23;
pub const IP_RECVTTL: u32 = 24;
pub const IP_BOUND_IF: u32 = 25;
pub const IP_PKTINFO: u32 = 26;
pub const IP_RECVPKTINFO: u32 = 26;
pub const IP_RECVTOS: u32 = 27;
pub const IP_FW_ADD: u32 = 40;
pub const IP_FW_DEL: u32 = 41;
pub const IP_FW_FLUSH: u32 = 42;
pub const IP_FW_ZERO: u32 = 43;
pub const IP_FW_GET: u32 = 44;
pub const IP_FW_RESETLOG: u32 = 45;
pub const IP_OLD_FW_ADD: u32 = 50;
pub const IP_OLD_FW_DEL: u32 = 51;
pub const IP_OLD_FW_FLUSH: u32 = 52;
pub const IP_OLD_FW_ZERO: u32 = 53;
pub const IP_OLD_FW_GET: u32 = 54;
pub const IP_NAT__XXX: u32 = 55;
pub const IP_OLD_FW_RESETLOG: u32 = 56;
pub const IP_DUMMYNET_CONFIGURE: u32 = 60;
pub const IP_DUMMYNET_DEL: u32 = 61;
pub const IP_DUMMYNET_FLUSH: u32 = 62;
pub const IP_DUMMYNET_GET: u32 = 64;
pub const IP_TRAFFIC_MGT_BACKGROUND: u32 = 65;
pub const IP_MULTICAST_IFINDEX: u32 = 66;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 70;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 71;
pub const IP_BLOCK_SOURCE: u32 = 72;
pub const IP_UNBLOCK_SOURCE: u32 = 73;
pub const IP_MSFILTER: u32 = 74;
pub const MCAST_JOIN_GROUP: u32 = 80;
pub const MCAST_LEAVE_GROUP: u32 = 81;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 82;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 83;
pub const MCAST_BLOCK_SOURCE: u32 = 84;
pub const MCAST_UNBLOCK_SOURCE: u32 = 85;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MIN_MEMBERSHIPS: u32 = 31;
pub const IP_MAX_MEMBERSHIPS: u32 = 4095;
pub const IP_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IP_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IP_MAX_SOCK_MUTE_FILTER: u32 = 128;
pub const MCAST_UNDEFINED: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const MCAST_EXCLUDE: u32 = 2;
pub const IP_PORTRANGE_DEFAULT: u32 = 0;
pub const IP_PORTRANGE_HIGH: u32 = 1;
pub const IP_PORTRANGE_LOW: u32 = 2;
pub const IPPROTO_MAXID: u32 = 52;
pub const IPCTL_FORWARDING: u32 = 1;
pub const IPCTL_SENDREDIRECTS: u32 = 2;
pub const IPCTL_DEFTTL: u32 = 3;
pub const IPCTL_RTEXPIRE: u32 = 5;
pub const IPCTL_RTMINEXPIRE: u32 = 6;
pub const IPCTL_RTMAXCACHE: u32 = 7;
pub const IPCTL_SOURCEROUTE: u32 = 8;
pub const IPCTL_DIRECTEDBROADCAST: u32 = 9;
pub const IPCTL_INTRQMAXLEN: u32 = 10;
pub const IPCTL_INTRQDROPS: u32 = 11;
pub const IPCTL_STATS: u32 = 12;
pub const IPCTL_ACCEPTSOURCEROUTE: u32 = 13;
pub const IPCTL_FASTFORWARDING: u32 = 14;
pub const IPCTL_KEEPFAITH: u32 = 15;
pub const IPCTL_GIF_TTL: u32 = 16;
pub const IPCTL_MAXID: u32 = 17;
pub const __KAME_VERSION: &'static [u8; 18usize] = b"2009/apple-darwin\0";
pub const IPV6PORT_RESERVED: u32 = 1024;
pub const IPV6PORT_ANONMIN: u32 = 49152;
pub const IPV6PORT_ANONMAX: u32 = 65535;
pub const IPV6PORT_RESERVEDMIN: u32 = 600;
pub const IPV6PORT_RESERVEDMAX: u32 = 1023;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __IPV6_ADDR_SCOPE_NODELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_INTFACELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_LINKLOCAL: u32 = 2;
pub const __IPV6_ADDR_SCOPE_SITELOCAL: u32 = 5;
pub const __IPV6_ADDR_SCOPE_ORGLOCAL: u32 = 8;
pub const __IPV6_ADDR_SCOPE_GLOBAL: u32 = 14;
pub const IPV6_SOCKOPT_RESERVED1: u32 = 3;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const IPV6_MULTICAST_IF: u32 = 9;
pub const IPV6_MULTICAST_HOPS: u32 = 10;
pub const IPV6_MULTICAST_LOOP: u32 = 11;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_PORTRANGE: u32 = 14;
pub const ICMP6_FILTER: u32 = 18;
pub const IPV6_2292PKTINFO: u32 = 19;
pub const IPV6_2292HOPLIMIT: u32 = 20;
pub const IPV6_2292NEXTHOP: u32 = 21;
pub const IPV6_2292HOPOPTS: u32 = 22;
pub const IPV6_2292DSTOPTS: u32 = 23;
pub const IPV6_2292RTHDR: u32 = 24;
pub const IPV6_2292PKTOPTIONS: u32 = 25;
pub const IPV6_CHECKSUM: u32 = 26;
pub const IPV6_V6ONLY: u32 = 27;
pub const IPV6_BINDV6ONLY: u32 = 27;
pub const IPV6_IPSEC_POLICY: u32 = 28;
pub const IPV6_FAITH: u32 = 29;
pub const IPV6_FW_ADD: u32 = 30;
pub const IPV6_FW_DEL: u32 = 31;
pub const IPV6_FW_FLUSH: u32 = 32;
pub const IPV6_FW_ZERO: u32 = 33;
pub const IPV6_FW_GET: u32 = 34;
pub const IPV6_RECVTCLASS: u32 = 35;
pub const IPV6_TCLASS: u32 = 36;
pub const IPV6_BOUND_IF: u32 = 125;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IPV6_DEFAULT_MULTICAST_HOPS: u32 = 1;
pub const IPV6_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IPV6_MIN_MEMBERSHIPS: u32 = 31;
pub const IPV6_MAX_MEMBERSHIPS: u32 = 4095;
pub const IPV6_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IPV6_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IPV6_PORTRANGE_DEFAULT: u32 = 0;
pub const IPV6_PORTRANGE_HIGH: u32 = 1;
pub const IPV6_PORTRANGE_LOW: u32 = 2;
pub const IPV6PROTO_MAXID: u32 = 104;
pub const IPV6CTL_FORWARDING: u32 = 1;
pub const IPV6CTL_SENDREDIRECTS: u32 = 2;
pub const IPV6CTL_DEFHLIM: u32 = 3;
pub const IPV6CTL_FORWSRCRT: u32 = 5;
pub const IPV6CTL_STATS: u32 = 6;
pub const IPV6CTL_MRTSTATS: u32 = 7;
pub const IPV6CTL_MRTPROTO: u32 = 8;
pub const IPV6CTL_MAXFRAGPACKETS: u32 = 9;
pub const IPV6CTL_SOURCECHECK: u32 = 10;
pub const IPV6CTL_SOURCECHECK_LOGINT: u32 = 11;
pub const IPV6CTL_ACCEPT_RTADV: u32 = 12;
pub const IPV6CTL_KEEPFAITH: u32 = 13;
pub const IPV6CTL_LOG_INTERVAL: u32 = 14;
pub const IPV6CTL_HDRNESTLIMIT: u32 = 15;
pub const IPV6CTL_DAD_COUNT: u32 = 16;
pub const IPV6CTL_AUTO_FLOWLABEL: u32 = 17;
pub const IPV6CTL_DEFMCASTHLIM: u32 = 18;
pub const IPV6CTL_GIF_HLIM: u32 = 19;
pub const IPV6CTL_KAME_VERSION: u32 = 20;
pub const IPV6CTL_USE_DEPRECATED: u32 = 21;
pub const IPV6CTL_RR_PRUNE: u32 = 22;
pub const IPV6CTL_V6ONLY: u32 = 24;
pub const IPV6CTL_RTEXPIRE: u32 = 25;
pub const IPV6CTL_RTMINEXPIRE: u32 = 26;
pub const IPV6CTL_RTMAXCACHE: u32 = 27;
pub const IPV6CTL_USETEMPADDR: u32 = 32;
pub const IPV6CTL_TEMPPLTIME: u32 = 33;
pub const IPV6CTL_TEMPVLTIME: u32 = 34;
pub const IPV6CTL_AUTO_LINKLOCAL: u32 = 35;
pub const IPV6CTL_RIP6STATS: u32 = 36;
pub const IPV6CTL_PREFER_TEMPADDR: u32 = 37;
pub const IPV6CTL_ADDRCTLPOLICY: u32 = 38;
pub const IPV6CTL_USE_DEFAULTZONE: u32 = 39;
pub const IPV6CTL_MAXFRAGS: u32 = 41;
pub const IPV6CTL_MCAST_PMTU: u32 = 44;
pub const IPV6CTL_NEIGHBORGCTHRESH: u32 = 46;
pub const IPV6CTL_MAXIFPREFIXES: u32 = 47;
pub const IPV6CTL_MAXIFDEFROUTERS: u32 = 48;
pub const IPV6CTL_MAXDYNROUTES: u32 = 49;
pub const ICMPV6CTL_ND6_ONLINKNSRFC4861: u32 = 50;
pub const IPV6CTL_MAXID: u32 = 51;
pub const SOL_LOCAL: u32 = 0;
pub const LOCAL_PEERCRED: u32 = 1;
pub const LOCAL_PEERPID: u32 = 2;
pub const LOCAL_PEEREPID: u32 = 3;
pub const LOCAL_PEERUUID: u32 = 4;
pub const LOCAL_PEEREUUID: u32 = 5;
pub const POLLIN: u32 = 1;
pub const POLLPRI: u32 = 2;
pub const POLLOUT: u32 = 4;
pub const POLLRDNORM: u32 = 64;
pub const POLLWRNORM: u32 = 4;
pub const POLLRDBAND: u32 = 128;
pub const POLLWRBAND: u32 = 256;
pub const POLLEXTEND: u32 = 512;
pub const POLLATTRIB: u32 = 1024;
pub const POLLNLINK: u32 = 2048;
pub const POLLWRITE: u32 = 4096;
pub const POLLERR: u32 = 8;
pub const POLLHUP: u32 = 16;
pub const POLLNVAL: u32 = 32;
pub const POLLSTANDARD: u32 = 511;
pub const _PATH_HEQUIV: &'static [u8; 17usize] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &'static [u8; 11usize] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &'static [u8; 14usize] = b"/etc/networks\0";
pub const _PATH_PROTOCOLS: &'static [u8; 15usize] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &'static [u8; 14usize] = b"/etc/services\0";
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NO_ADDRESS: u32 = 4;
pub const EAI_ADDRFAMILY: u32 = 1;
pub const EAI_AGAIN: u32 = 2;
pub const EAI_BADFLAGS: u32 = 3;
pub const EAI_FAIL: u32 = 4;
pub const EAI_FAMILY: u32 = 5;
pub const EAI_MEMORY: u32 = 6;
pub const EAI_NODATA: u32 = 7;
pub const EAI_NONAME: u32 = 8;
pub const EAI_SERVICE: u32 = 9;
pub const EAI_SOCKTYPE: u32 = 10;
pub const EAI_SYSTEM: u32 = 11;
pub const EAI_BADHINTS: u32 = 12;
pub const EAI_PROTOCOL: u32 = 13;
pub const EAI_OVERFLOW: u32 = 14;
pub const EAI_MAX: u32 = 15;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_NUMERICSERV: u32 = 4096;
pub const AI_ALL: u32 = 256;
pub const AI_V4MAPPED_CFG: u32 = 512;
pub const AI_ADDRCONFIG: u32 = 1024;
pub const AI_V4MAPPED: u32 = 2048;
pub const AI_DEFAULT: u32 = 1536;
pub const AI_UNUSABLE: u32 = 268435456;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NOFQDN: u32 = 1;
pub const NI_NUMERICHOST: u32 = 2;
pub const NI_NAMEREQD: u32 = 4;
pub const NI_NUMERICSERV: u32 = 8;
pub const NI_NUMERICSCOPE: u32 = 256;
pub const NI_DGRAM: u32 = 16;
pub const NI_WITHSCOPEID: u32 = 32;
pub const SCOPE_DELIMITER: u8 = 37u8;
pub const TH_FIN: u32 = 1;
pub const TH_SYN: u32 = 2;
pub const TH_RST: u32 = 4;
pub const TH_PUSH: u32 = 8;
pub const TH_ACK: u32 = 16;
pub const TH_URG: u32 = 32;
pub const TH_ECE: u32 = 64;
pub const TH_CWR: u32 = 128;
pub const TH_FLAGS: u32 = 247;
pub const TH_ACCEPT: u32 = 23;
pub const TCPOPT_EOL: u32 = 0;
pub const TCPOPT_NOP: u32 = 1;
pub const TCPOPT_MAXSEG: u32 = 2;
pub const TCPOLEN_MAXSEG: u32 = 4;
pub const TCPOPT_WINDOW: u32 = 3;
pub const TCPOLEN_WINDOW: u32 = 3;
pub const TCPOPT_SACK_PERMITTED: u32 = 4;
pub const TCPOLEN_SACK_PERMITTED: u32 = 2;
pub const TCPOPT_SACK: u32 = 5;
pub const TCPOLEN_SACK: u32 = 8;
pub const TCPOPT_TIMESTAMP: u32 = 8;
pub const TCPOLEN_TIMESTAMP: u32 = 10;
pub const TCPOLEN_TSTAMP_APPA: u32 = 12;
pub const TCPOPT_TSTAMP_HDR: u32 = 16844810;
pub const MAX_TCPOPTLEN: u32 = 40;
pub const TCPOPT_CC: u32 = 11;
pub const TCPOPT_CCNEW: u32 = 12;
pub const TCPOPT_CCECHO: u32 = 13;
pub const TCPOLEN_CC: u32 = 6;
pub const TCPOLEN_CC_APPA: u32 = 8;
pub const TCPOPT_SIGNATURE: u32 = 19;
pub const TCPOLEN_SIGNATURE: u32 = 18;
pub const TCPOPT_FASTOPEN: u32 = 34;
pub const TCPOLEN_FASTOPEN_REQ: u32 = 2;
pub const TCPOPT_SACK_HDR: u32 = 16844032;
pub const MAX_SACK_BLKS: u32 = 6;
pub const TCP_MAX_SACK: u32 = 4;
pub const TCP_MSS: u32 = 512;
pub const TCP_MINMSS: u32 = 216;
pub const TCP6_MSS: u32 = 1024;
pub const TCP_MAXWIN: u32 = 65535;
pub const TTCP_CLIENT_SND_WND: u32 = 4096;
pub const TCP_MAX_WINSHIFT: u32 = 14;
pub const TCP_MAXHLEN: u32 = 60;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_MAXSEG: u32 = 2;
pub const TCP_NOPUSH: u32 = 4;
pub const TCP_NOOPT: u32 = 8;
pub const TCP_KEEPALIVE: u32 = 16;
pub const TCP_CONNECTIONTIMEOUT: u32 = 32;
pub const PERSIST_TIMEOUT: u32 = 64;
pub const TCP_RXT_CONNDROPTIME: u32 = 128;
pub const TCP_RXT_FINDROP: u32 = 256;
pub const TCP_KEEPINTVL: u32 = 257;
pub const TCP_KEEPCNT: u32 = 258;
pub const TCP_SENDMOREACKS: u32 = 259;
pub const TCP_ENABLE_ECN: u32 = 260;
pub const TCP_FASTOPEN: u32 = 261;
pub const TCP_CONNECTION_INFO: u32 = 262;
pub const TCP_NOTSENT_LOWAT: u32 = 513;
pub const TCPCI_OPT_TIMESTAMPS: u32 = 1;
pub const TCPCI_OPT_SACK: u32 = 2;
pub const TCPCI_OPT_WSCALE: u32 = 4;
pub const TCPCI_OPT_ECN: u32 = 8;
pub const TCPCI_FLAG_LOSSRECOVERY: u32 = 1;
pub const TCPCI_FLAG_REORDERING_DETECTED: u32 = 2;
pub const SD_RECEIVE: u32 = 0;
pub const SD_SEND: u32 = 1;
pub const SD_BOTH: u32 = 2;
pub const R_INVALID_SOCKET: i32 = -1;
pub const R_SOCKET_PROTO_TCP: u32 = 6;
pub const R_SOCKET_PROTO_UDP: u32 = 17;
pub const R_SOCKET_PROTO_UNIX: u32 = 4919;
pub const R_SOCKET_PROTO_NONE: u32 = 0;
pub const R_SOCKET_PROTO_DEFAULT: u32 = 6;
pub const R_RUN_PROFILE_NARGS: u32 = 512;
pub const PATHSEP: u8 = 58u8;
pub const HOWMANY: u32 = 262144;
pub const MAXDESC: u32 = 64;
pub const MAXMAGIS: u32 = 8192;
pub const MAXstring: u32 = 32;
pub const MAGICNO: u32 = 4045276188;
pub const VERSIONNO: u32 = 5;
pub const FILE_MAGICSIZE: u32 = 192;
pub const FILE_LOAD: u32 = 0;
pub const FILE_CHECK: u32 = 1;
pub const FILE_COMPILE: u32 = 2;
pub const INDIR: u32 = 1;
pub const OFFADD: u32 = 2;
pub const INDIROFFADD: u32 = 4;
pub const UNSIGNED: u32 = 8;
pub const NOSPACE: u32 = 16;
pub const BINTEST: u32 = 32;
pub const TEXTTEST: u32 = 0;
pub const FILE_INVALID: u32 = 0;
pub const FILE_BYTE: u32 = 1;
pub const FILE_SHORT: u32 = 2;
pub const FILE_DEFAULT: u32 = 3;
pub const FILE_LONG: u32 = 4;
pub const FILE_STRING: u32 = 5;
pub const FILE_DATE: u32 = 6;
pub const FILE_BESHORT: u32 = 7;
pub const FILE_BELONG: u32 = 8;
pub const FILE_BEDATE: u32 = 9;
pub const FILE_LESHORT: u32 = 10;
pub const FILE_LELONG: u32 = 11;
pub const FILE_LEDATE: u32 = 12;
pub const FILE_PSTRING: u32 = 13;
pub const FILE_LDATE: u32 = 14;
pub const FILE_BELDATE: u32 = 15;
pub const FILE_LELDATE: u32 = 16;
pub const FILE_REGEX: u32 = 17;
pub const FILE_BESTRING16: u32 = 18;
pub const FILE_LESTRING16: u32 = 19;
pub const FILE_SEARCH: u32 = 20;
pub const FILE_MEDATE: u32 = 21;
pub const FILE_MELDATE: u32 = 22;
pub const FILE_MELONG: u32 = 23;
pub const FILE_QUAD: u32 = 24;
pub const FILE_LEQUAD: u32 = 25;
pub const FILE_BEQUAD: u32 = 26;
pub const FILE_QDATE: u32 = 27;
pub const FILE_LEQDATE: u32 = 28;
pub const FILE_BEQDATE: u32 = 29;
pub const FILE_QLDATE: u32 = 30;
pub const FILE_LEQLDATE: u32 = 31;
pub const FILE_BEQLDATE: u32 = 32;
pub const FILE_FLOAT: u32 = 33;
pub const FILE_BEFLOAT: u32 = 34;
pub const FILE_LEFLOAT: u32 = 35;
pub const FILE_DOUBLE: u32 = 36;
pub const FILE_BEDOUBLE: u32 = 37;
pub const FILE_LEDOUBLE: u32 = 38;
pub const FILE_NAMES_SIZE: u32 = 39;
pub const FILE_FMT_NONE: u32 = 0;
pub const FILE_FMT_NUM: u32 = 1;
pub const FILE_FMT_STR: u32 = 2;
pub const FILE_FMT_QUAD: u32 = 3;
pub const FILE_FMT_FLOAT: u32 = 4;
pub const FILE_FMT_DOUBLE: u32 = 5;
pub const FILE_OPS: &'static [u8; 9usize] = b"&|^+-*/%\0";
pub const FILE_OPAND: u32 = 0;
pub const FILE_OPOR: u32 = 1;
pub const FILE_OPXOR: u32 = 2;
pub const FILE_OPADD: u32 = 3;
pub const FILE_OPMINUS: u32 = 4;
pub const FILE_OPMULTIPLY: u32 = 5;
pub const FILE_OPDIVIDE: u32 = 6;
pub const FILE_OPMODULO: u32 = 7;
pub const FILE_OPS_MASK: u32 = 7;
pub const FILE_UNUSED_1: u32 = 8;
pub const FILE_UNUSED_2: u32 = 16;
pub const FILE_UNUSED_3: u32 = 32;
pub const FILE_OPINVERSE: u32 = 64;
pub const FILE_OPINDIRECT: u32 = 128;
pub const COND_NONE: u32 = 0;
pub const COND_IF: u32 = 1;
pub const COND_ELIF: u32 = 2;
pub const COND_ELSE: u32 = 3;
pub const CHAR_COMPACT_BLANK: u8 = 66u8;
pub const CHAR_COMPACT_OPTIONAL_BLANK: u8 = 98u8;
pub const CHAR_IGNORE_LOWERCASE: u8 = 99u8;
pub const CHAR_IGNORE_UPPERCASE: u8 = 67u8;
pub const CHAR_REGEX_OFFSET_START: u8 = 115u8;
pub const STRING_DEFAULT_RANGE: u32 = 100;
pub const R_MAGIC_NONE: u32 = 0;
pub const R_MAGIC_DEBUG: u32 = 1;
pub const R_MAGIC_SYMLINK: u32 = 2;
pub const R_MAGIC_COMPRESS: u32 = 4;
pub const R_MAGIC_DEVICES: u32 = 8;
pub const R_MAGIC_MIME_TYPE: u32 = 16;
pub const R_MAGIC_CONTINUE: u32 = 32;
pub const R_MAGIC_CHECK: u32 = 64;
pub const R_MAGIC_PRESERVE_ATIME: u32 = 128;
pub const R_MAGIC_RAW: u32 = 256;
pub const R_MAGIC_ERROR: u32 = 512;
pub const R_MAGIC_MIME_ENCODING: u32 = 1024;
pub const R_MAGIC_MIME: u32 = 1040;
pub const R_MAGIC_NO_CHECK_COMPRESS: u32 = 4096;
pub const R_MAGIC_NO_CHECK_TAR: u32 = 8192;
pub const R_MAGIC_NO_CHECK_SOFT: u32 = 16384;
pub const R_MAGIC_NO_CHECK_APPTYPE: u32 = 32768;
pub const R_MAGIC_NO_CHECK_ELF: u32 = 65536;
pub const R_MAGIC_NO_CHECK_ASCII: u32 = 131072;
pub const R_MAGIC_NO_CHECK_TOKENS: u32 = 1048576;
pub const MAGIC_NO_CHECK_FORTRAN: u32 = 0;
pub const MAGIC_NO_CHECK_TROFF: u32 = 0;
pub const R_AGRAPH_MODE_NORMAL: u32 = 0;
pub const R_AGRAPH_MODE_OFFSET: u32 = 1;
pub const R_AGRAPH_MODE_MINI: u32 = 2;
pub const R_AGRAPH_MODE_TINY: u32 = 3;
pub const R_AGRAPH_MODE_SUMMARY: u32 = 4;
pub const R_AGRAPH_MODE_COMMENTS: u32 = 5;
pub const R_AGRAPH_MODE_MAX: u32 = 6;
pub const R_IO_SEEK_SET: u32 = 0;
pub const R_IO_SEEK_CUR: u32 = 1;
pub const R_IO_SEEK_END: u32 = 2;
pub const R_IO_UNDOS: u32 = 64;
pub const PT_TRACE_ME: u32 = 0;
pub const PT_READ_I: u32 = 1;
pub const PT_READ_D: u32 = 2;
pub const PT_READ_U: u32 = 3;
pub const PT_WRITE_I: u32 = 4;
pub const PT_WRITE_D: u32 = 5;
pub const PT_WRITE_U: u32 = 6;
pub const PT_CONTINUE: u32 = 7;
pub const PT_KILL: u32 = 8;
pub const PT_STEP: u32 = 9;
pub const PT_DETACH: u32 = 11;
pub const PT_SIGEXC: u32 = 12;
pub const PT_THUPDATE: u32 = 13;
pub const PT_ATTACHEXC: u32 = 14;
pub const PT_FORCEQUOTA: u32 = 30;
pub const PT_DENY_ATTACH: u32 = 31;
pub const PT_FIRSTMACH: u32 = 32;
pub const R_FS_FILE_TYPE_MOUNTPOINT: u8 = 109u8;
pub const R_FS_FILE_TYPE_DIRECTORY: u8 = 100u8;
pub const R_FS_FILE_TYPE_REGULAR: u8 = 114u8;
pub const R_FS_FILE_TYPE_DELETED: u8 = 120u8;
pub const R_FS_FILE_TYPE_SPECIAL: u8 = 115u8;
pub const R_FS_FILE_TYPE_MOUNT: u8 = 109u8;
pub const RTLD_LAZY: u32 = 1;
pub const RTLD_NOW: u32 = 2;
pub const RTLD_LOCAL: u32 = 4;
pub const RTLD_GLOBAL: u32 = 8;
pub const RTLD_NOLOAD: u32 = 16;
pub const RTLD_NODELETE: u32 = 128;
pub const RTLD_FIRST: u32 = 256;
pub const R_LIB_SEPARATOR: &'static [u8; 2usize] = b".\0";
pub const R_LIB_SYMNAME: &'static [u8; 14usize] = b"radare_plugin\0";
pub const R_LIB_SYMFUNC: &'static [u8; 23usize] = b"radare_plugin_function\0";
pub const R_LIB_ENV: &'static [u8; 16usize] = b"R2_LIBR_PLUGINS\0";
pub const R_LIB_EXT: &'static [u8; 6usize] = b"dylib\0";
pub const DW_EXTENDED_OPCODE: u32 = 0;
pub const LOP_EXTENDED: u32 = 1;
pub const LOP_DISCARD: u32 = 2;
pub const LOP_STANDARD: u32 = 3;
pub const LOP_SPECIAL: u32 = 4;
pub const DW_LNS_copy: u32 = 1;
pub const DW_LNS_advance_pc: u32 = 2;
pub const DW_LNS_advance_line: u32 = 3;
pub const DW_LNS_set_file: u32 = 4;
pub const DW_LNS_set_column: u32 = 5;
pub const DW_LNS_negate_stmt: u32 = 6;
pub const DW_LNS_set_basic_block: u32 = 7;
pub const DW_LNS_const_add_pc: u32 = 8;
pub const DW_LNS_fixed_advance_pc: u32 = 9;
pub const DW_LNS_set_prologue_end: u32 = 10;
pub const DW_LNS_set_epilogue_begin: u32 = 11;
pub const DW_LNS_set_isa: u32 = 12;
pub const DW_LNE_end_sequence: u32 = 1;
pub const DW_LNE_set_address: u32 = 2;
pub const DW_LNE_define_file: u32 = 3;
pub const DW_LNE_set_discriminator: u32 = 4;
pub const DW_LNE_lo_user: u32 = 128;
pub const DW_LNE_hi_user: u32 = 255;
pub const DW_LNE_HP_negate_is_UV_update: u32 = 17;
pub const DW_LNE_HP_push_context: u32 = 18;
pub const DW_LNE_HP_pop_context: u32 = 19;
pub const DW_LNE_HP_set_file_line_column: u32 = 20;
pub const DW_LNE_HP_set_routine_name: u32 = 21;
pub const DW_LNE_HP_set_sequence: u32 = 22;
pub const DW_LNE_HP_negate_post_semantics: u32 = 23;
pub const DW_LNE_HP_negate_function_exit: u32 = 24;
pub const DW_LNE_HP_negate_front_end_logical: u32 = 25;
pub const DW_LNE_HP_define_proc: u32 = 32;
pub const DW_TAG_null_entry: u32 = 0;
pub const DW_TAG_array_type: u32 = 1;
pub const DW_TAG_class_type: u32 = 2;
pub const DW_TAG_entry_point: u32 = 3;
pub const DW_TAG_enumeration_type: u32 = 4;
pub const DW_TAG_formal_parameter: u32 = 5;
pub const DW_TAG_imported_declaration: u32 = 8;
pub const DW_TAG_label: u32 = 10;
pub const DW_TAG_lexical_block: u32 = 11;
pub const DW_TAG_member: u32 = 13;
pub const DW_TAG_pointer_type: u32 = 15;
pub const DW_TAG_reference_type: u32 = 16;
pub const DW_TAG_compile_unit: u32 = 17;
pub const DW_TAG_string_type: u32 = 18;
pub const DW_TAG_structure_type: u32 = 19;
pub const DW_TAG_subroutine_type: u32 = 21;
pub const DW_TAG_typedef: u32 = 22;
pub const DW_TAG_union_type: u32 = 23;
pub const DW_TAG_unspecified_parameters: u32 = 24;
pub const DW_TAG_variant: u32 = 25;
pub const DW_TAG_common_block: u32 = 26;
pub const DW_TAG_common_inclusion: u32 = 27;
pub const DW_TAG_inheritance: u32 = 28;
pub const DW_TAG_inlined_subroutine: u32 = 29;
pub const DW_TAG_module: u32 = 30;
pub const DW_TAG_ptr_to_member_type: u32 = 31;
pub const DW_TAG_set_type: u32 = 32;
pub const DW_TAG_subrange_type: u32 = 33;
pub const DW_TAG_with_stmt: u32 = 34;
pub const DW_TAG_access_declaration: u32 = 35;
pub const DW_TAG_base_type: u32 = 36;
pub const DW_TAG_catch_block: u32 = 37;
pub const DW_TAG_const_type: u32 = 38;
pub const DW_TAG_constant: u32 = 39;
pub const DW_TAG_enumerator: u32 = 40;
pub const DW_TAG_file_type: u32 = 41;
pub const DW_TAG_friend: u32 = 42;
pub const DW_TAG_namelist: u32 = 43;
pub const DW_TAG_namelist_item: u32 = 44;
pub const DW_TAG_namelist_items: u32 = 44;
pub const DW_TAG_packed_type: u32 = 45;
pub const DW_TAG_subprogram: u32 = 46;
pub const DW_TAG_template_type_parameter: u32 = 47;
pub const DW_TAG_template_type_param: u32 = 47;
pub const DW_TAG_template_value_parameter: u32 = 48;
pub const DW_TAG_template_value_param: u32 = 48;
pub const DW_TAG_thrown_type: u32 = 49;
pub const DW_TAG_try_block: u32 = 50;
pub const DW_TAG_variant_part: u32 = 51;
pub const DW_TAG_variable: u32 = 52;
pub const DW_TAG_volatile_type: u32 = 53;
pub const DW_TAG_dwarf_procedure: u32 = 54;
pub const DW_TAG_restrict_type: u32 = 55;
pub const DW_TAG_interface_type: u32 = 56;
pub const DW_TAG_namespace: u32 = 57;
pub const DW_TAG_imported_module: u32 = 58;
pub const DW_TAG_unspecified_type: u32 = 59;
pub const DW_TAG_partial_unit: u32 = 60;
pub const DW_TAG_imported_unit: u32 = 61;
pub const DW_TAG_mutable_type: u32 = 62;
pub const DW_TAG_condition: u32 = 63;
pub const DW_TAG_shared_type: u32 = 64;
pub const DW_TAG_type_unit: u32 = 65;
pub const DW_TAG_rvalue_reference_type: u32 = 66;
pub const DW_TAG_template_alias: u32 = 67;
pub const DW_TAG_LAST: u32 = 68;
pub const DW_TAG_lo_user: u32 = 16512;
pub const DW_TAG_hi_user: u32 = 65535;
pub const DW_CHILDREN_no: u32 = 0;
pub const DW_CHILDREN_yes: u32 = 1;
pub const DW_AT_sibling: u32 = 1;
pub const DW_AT_location: u32 = 2;
pub const DW_AT_name: u32 = 3;
pub const DW_AT_ordering: u32 = 9;
pub const DW_AT_byte_size: u32 = 11;
pub const DW_AT_bit_offset: u32 = 12;
pub const DW_AT_bit_size: u32 = 13;
pub const DW_AT_stmt_list: u32 = 16;
pub const DW_AT_low_pc: u32 = 17;
pub const DW_AT_high_pc: u32 = 18;
pub const DW_AT_language: u32 = 19;
pub const DW_AT_discr: u32 = 21;
pub const DW_AT_discr_value: u32 = 22;
pub const DW_AT_visibility: u32 = 23;
pub const DW_AT_import: u32 = 24;
pub const DW_AT_string_length: u32 = 25;
pub const DW_AT_common_reference: u32 = 26;
pub const DW_AT_comp_dir: u32 = 27;
pub const DW_AT_const_value: u32 = 28;
pub const DW_AT_containing_type: u32 = 29;
pub const DW_AT_default_value: u32 = 30;
pub const DW_AT_inline: u32 = 32;
pub const DW_AT_is_optional: u32 = 33;
pub const DW_AT_lower_bound: u32 = 34;
pub const DW_AT_producer: u32 = 37;
pub const DW_AT_prototyped: u32 = 39;
pub const DW_AT_return_addr: u32 = 42;
pub const DW_AT_start_scope: u32 = 44;
pub const DW_AT_stride_size: u32 = 46;
pub const DW_AT_upper_bound: u32 = 47;
pub const DW_AT_abstract_origin: u32 = 49;
pub const DW_AT_accessibility: u32 = 50;
pub const DW_AT_address_class: u32 = 51;
pub const DW_AT_artificial: u32 = 52;
pub const DW_AT_base_types: u32 = 53;
pub const DW_AT_calling_convention: u32 = 54;
pub const DW_AT_count: u32 = 55;
pub const DW_AT_data_member_location: u32 = 56;
pub const DW_AT_decl_column: u32 = 57;
pub const DW_AT_decl_file: u32 = 58;
pub const DW_AT_decl_line: u32 = 59;
pub const DW_AT_declaration: u32 = 60;
pub const DW_AT_discr_list: u32 = 61;
pub const DW_AT_encoding: u32 = 62;
pub const DW_AT_external: u32 = 63;
pub const DW_AT_frame_base: u32 = 64;
pub const DW_AT_friend: u32 = 65;
pub const DW_AT_identifier_case: u32 = 66;
pub const DW_AT_macro_info: u32 = 67;
pub const DW_AT_namelist_item: u32 = 68;
pub const DW_AT_priority: u32 = 69;
pub const DW_AT_segment: u32 = 70;
pub const DW_AT_specification: u32 = 71;
pub const DW_AT_static_link: u32 = 72;
pub const DW_AT_type: u32 = 73;
pub const DW_AT_use_location: u32 = 74;
pub const DW_AT_variable_parameter: u32 = 75;
pub const DW_AT_virtuality: u32 = 76;
pub const DW_AT_vtable_elem_location: u32 = 77;
pub const DW_AT_allocated: u32 = 78;
pub const DW_AT_associated: u32 = 79;
pub const DW_AT_data_location: u32 = 80;
pub const DW_AT_byte_stride: u32 = 81;
pub const DW_AT_entry_pc: u32 = 82;
pub const DW_AT_use_UTF8: u32 = 83;
pub const DW_AT_extension: u32 = 84;
pub const DW_AT_ranges: u32 = 85;
pub const DW_AT_trampoline: u32 = 86;
pub const DW_AT_call_column: u32 = 87;
pub const DW_AT_call_file: u32 = 88;
pub const DW_AT_call_line: u32 = 89;
pub const DW_AT_description: u32 = 90;
pub const DW_AT_binary_scale: u32 = 91;
pub const DW_AT_decimal_scale: u32 = 92;
pub const DW_AT_small: u32 = 93;
pub const DW_AT_decimal_sign: u32 = 94;
pub const DW_AT_digit_count: u32 = 95;
pub const DW_AT_picture_string: u32 = 96;
pub const DW_AT_mutable: u32 = 97;
pub const DW_AT_threads_scaled: u32 = 98;
pub const DW_AT_explicit: u32 = 99;
pub const DW_AT_object_pointer: u32 = 100;
pub const DW_AT_endianity: u32 = 101;
pub const DW_AT_elemental: u32 = 102;
pub const DW_AT_pure: u32 = 103;
pub const DW_AT_recursive: u32 = 104;
pub const DW_AT_signature: u32 = 105;
pub const DW_AT_main_subprogram: u32 = 106;
pub const DW_AT_data_bit_offset: u32 = 107;
pub const DW_AT_const_expr: u32 = 108;
pub const DW_AT_enum_class: u32 = 109;
pub const DW_AT_linkage_name: u32 = 110;
pub const DW_AT_string_length_bit_size: u32 = 111;
pub const DW_AT_string_length_byte_size: u32 = 112;
pub const DW_AT_rank: u32 = 113;
pub const DW_AT_str_offsets_base: u32 = 114;
pub const DW_AT_addr_base: u32 = 115;
pub const DW_AT_rnglists_base: u32 = 116;
pub const DW_AT_dwo_name: u32 = 118;
pub const DW_AT_reference: u32 = 119;
pub const DW_AT_rvalue_reference: u32 = 120;
pub const DW_AT_macros: u32 = 121;
pub const DW_AT_call_all_calls: u32 = 122;
pub const DW_AT_call_all_source_calls: u32 = 123;
pub const DW_AT_call_all_tail_calls: u32 = 124;
pub const DW_AT_call_return_pc: u32 = 125;
pub const DW_AT_call_value: u32 = 126;
pub const DW_AT_call_origin: u32 = 127;
pub const DW_AT_call_parameter: u32 = 128;
pub const DW_AT_call_pc: u32 = 129;
pub const DW_AT_call_tail_call: u32 = 130;
pub const DW_AT_call_target: u32 = 131;
pub const DW_AT_call_target_clobbered: u32 = 132;
pub const DW_AT_call_data_location: u32 = 133;
pub const DW_AT_call_data_value: u32 = 134;
pub const DW_AT_noreturn: u32 = 135;
pub const DW_AT_alignment: u32 = 136;
pub const DW_AT_export_symbols: u32 = 137;
pub const DW_AT_deleted: u32 = 138;
pub const DW_AT_defaulted: u32 = 139;
pub const DW_AT_loclists_base: u32 = 140;
pub const DW_AT_lo_user: u32 = 8192;
pub const DW_AT_MIPS_linkage_name: u32 = 8199;
pub const DW_AT_GNU_call_site_value: u32 = 8465;
pub const DW_AT_GNU_call_site_data_value: u32 = 8466;
pub const DW_AT_GNU_call_site_target: u32 = 8467;
pub const DW_AT_GNU_call_site_target_clobbered: u32 = 8468;
pub const DW_AT_GNU_tail_call: u32 = 8469;
pub const DW_AT_GNU_all_tail_call_sites: u32 = 8470;
pub const DW_AT_GNU_all_call_sites: u32 = 8471;
pub const DW_AT_GNU_all_source_call_sites: u32 = 8472;
pub const DW_AT_GNU_macros: u32 = 8473;
pub const DW_AT_GNU_deleted: u32 = 8474;
pub const DW_AT_GNU_dwo_name: u32 = 8496;
pub const DW_AT_GNU_dwo_id: u32 = 8497;
pub const DW_AT_GNU_ranges_base: u32 = 8498;
pub const DW_AT_GNU_addr_base: u32 = 8499;
pub const DW_AT_GNU_pubnames: u32 = 8500;
pub const DW_AT_GNU_pubtypes: u32 = 8501;
pub const DW_AT_hi_user: u32 = 16383;
pub const DW_FORM_addr: u32 = 1;
pub const DW_FORM_block2: u32 = 3;
pub const DW_FORM_block4: u32 = 4;
pub const DW_FORM_data2: u32 = 5;
pub const DW_FORM_data4: u32 = 6;
pub const DW_FORM_data8: u32 = 7;
pub const DW_FORM_string: u32 = 8;
pub const DW_FORM_block: u32 = 9;
pub const DW_FORM_block1: u32 = 10;
pub const DW_FORM_data1: u32 = 11;
pub const DW_FORM_flag: u32 = 12;
pub const DW_FORM_sdata: u32 = 13;
pub const DW_FORM_strp: u32 = 14;
pub const DW_FORM_udata: u32 = 15;
pub const DW_FORM_ref_addr: u32 = 16;
pub const DW_FORM_ref1: u32 = 17;
pub const DW_FORM_ref2: u32 = 18;
pub const DW_FORM_ref4: u32 = 19;
pub const DW_FORM_ref8: u32 = 20;
pub const DW_FORM_ref_udata: u32 = 21;
pub const DW_FORM_indirect: u32 = 22;
pub const DW_FORM_sec_offset: u32 = 23;
pub const DW_FORM_exprloc: u32 = 24;
pub const DW_FORM_flag_present: u32 = 25;
pub const DW_FORM_strx: u32 = 26;
pub const DW_FORM_addrx: u32 = 27;
pub const DW_FORM_ref_sup4: u32 = 28;
pub const DW_FORM_strp_sup: u32 = 29;
pub const DW_FORM_data16: u32 = 30;
pub const DW_FORM_line_ptr: u32 = 31;
pub const DW_FORM_ref_sig8: u32 = 32;
pub const DW_FORM_implicit_const: u32 = 33;
pub const DW_FORM_loclistx: u32 = 34;
pub const DW_FORM_rnglistx: u32 = 35;
pub const DW_FORM_ref_sup8: u32 = 36;
pub const DW_FORM_strx1: u32 = 37;
pub const DW_FORM_strx2: u32 = 38;
pub const DW_FORM_strx3: u32 = 39;
pub const DW_FORM_strx4: u32 = 40;
pub const DW_FORM_addrx1: u32 = 41;
pub const DW_FORM_addrx2: u32 = 42;
pub const DW_FORM_addrx3: u32 = 43;
pub const DW_FORM_addrx4: u32 = 44;
pub const DW_OP_addr: u32 = 3;
pub const DW_OP_deref: u32 = 6;
pub const DW_OP_const1u: u32 = 8;
pub const DW_OP_const1s: u32 = 9;
pub const DW_OP_const2u: u32 = 10;
pub const DW_OP_const2s: u32 = 11;
pub const DW_OP_const4u: u32 = 12;
pub const DW_OP_const4s: u32 = 13;
pub const DW_OP_const8u: u32 = 14;
pub const DW_OP_const8s: u32 = 15;
pub const DW_OP_constu: u32 = 16;
pub const DW_OP_consts: u32 = 17;
pub const DW_OP_dup: u32 = 18;
pub const DW_OP_drop: u32 = 19;
pub const DW_OP_over: u32 = 20;
pub const DW_OP_pick: u32 = 21;
pub const DW_OP_swap: u32 = 22;
pub const DW_OP_rot: u32 = 23;
pub const DW_OP_xderef: u32 = 24;
pub const DW_OP_abs: u32 = 25;
pub const DW_OP_and: u32 = 26;
pub const DW_OP_div: u32 = 27;
pub const DW_OP_minus: u32 = 28;
pub const DW_OP_mod: u32 = 29;
pub const DW_OP_mul: u32 = 30;
pub const DW_OP_neg: u32 = 31;
pub const DW_OP_not: u32 = 32;
pub const DW_OP_or: u32 = 33;
pub const DW_OP_plus: u32 = 34;
pub const DW_OP_plus_uconst: u32 = 35;
pub const DW_OP_shl: u32 = 36;
pub const DW_OP_shr: u32 = 37;
pub const DW_OP_shra: u32 = 38;
pub const DW_OP_xor: u32 = 39;
pub const DW_OP_skip: u32 = 47;
pub const DW_OP_bra: u32 = 40;
pub const DW_OP_eq: u32 = 41;
pub const DW_OP_ge: u32 = 42;
pub const DW_OP_gt: u32 = 43;
pub const DW_OP_le: u32 = 44;
pub const DW_OP_lt: u32 = 45;
pub const DW_OP_ne: u32 = 46;
pub const DW_OP_lit0: u32 = 48;
pub const DW_OP_lit1: u32 = 49;
pub const DW_OP_lit2: u32 = 50;
pub const DW_OP_lit3: u32 = 51;
pub const DW_OP_lit4: u32 = 52;
pub const DW_OP_lit5: u32 = 53;
pub const DW_OP_lit6: u32 = 54;
pub const DW_OP_lit7: u32 = 55;
pub const DW_OP_lit8: u32 = 56;
pub const DW_OP_lit9: u32 = 57;
pub const DW_OP_lit10: u32 = 58;
pub const DW_OP_lit11: u32 = 59;
pub const DW_OP_lit12: u32 = 60;
pub const DW_OP_lit13: u32 = 61;
pub const DW_OP_lit14: u32 = 62;
pub const DW_OP_lit15: u32 = 63;
pub const DW_OP_lit16: u32 = 64;
pub const DW_OP_lit17: u32 = 65;
pub const DW_OP_lit18: u32 = 66;
pub const DW_OP_lit19: u32 = 67;
pub const DW_OP_lit20: u32 = 68;
pub const DW_OP_lit21: u32 = 69;
pub const DW_OP_lit22: u32 = 70;
pub const DW_OP_lit23: u32 = 71;
pub const DW_OP_lit24: u32 = 72;
pub const DW_OP_lit25: u32 = 73;
pub const DW_OP_lit26: u32 = 74;
pub const DW_OP_lit27: u32 = 75;
pub const DW_OP_lit28: u32 = 76;
pub const DW_OP_lit29: u32 = 77;
pub const DW_OP_lit30: u32 = 78;
pub const DW_OP_lit31: u32 = 79;
pub const DW_OP_reg0: u32 = 80;
pub const DW_OP_reg1: u32 = 81;
pub const DW_OP_reg2: u32 = 82;
pub const DW_OP_reg3: u32 = 83;
pub const DW_OP_reg4: u32 = 84;
pub const DW_OP_reg5: u32 = 85;
pub const DW_OP_reg6: u32 = 86;
pub const DW_OP_reg7: u32 = 87;
pub const DW_OP_reg8: u32 = 88;
pub const DW_OP_reg9: u32 = 89;
pub const DW_OP_reg10: u32 = 90;
pub const DW_OP_reg11: u32 = 91;
pub const DW_OP_reg12: u32 = 92;
pub const DW_OP_reg13: u32 = 93;
pub const DW_OP_reg14: u32 = 94;
pub const DW_OP_reg15: u32 = 95;
pub const DW_OP_reg16: u32 = 96;
pub const DW_OP_reg17: u32 = 97;
pub const DW_OP_reg18: u32 = 98;
pub const DW_OP_reg19: u32 = 99;
pub const DW_OP_reg20: u32 = 100;
pub const DW_OP_reg21: u32 = 101;
pub const DW_OP_reg22: u32 = 102;
pub const DW_OP_reg23: u32 = 103;
pub const DW_OP_reg24: u32 = 104;
pub const DW_OP_reg25: u32 = 105;
pub const DW_OP_reg26: u32 = 106;
pub const DW_OP_reg27: u32 = 107;
pub const DW_OP_reg28: u32 = 108;
pub const DW_OP_reg29: u32 = 109;
pub const DW_OP_reg30: u32 = 110;
pub const DW_OP_reg31: u32 = 111;
pub const DW_OP_breg0: u32 = 112;
pub const DW_OP_breg1: u32 = 113;
pub const DW_OP_breg2: u32 = 114;
pub const DW_OP_breg3: u32 = 115;
pub const DW_OP_breg4: u32 = 116;
pub const DW_OP_breg5: u32 = 117;
pub const DW_OP_breg6: u32 = 118;
pub const DW_OP_breg7: u32 = 119;
pub const DW_OP_breg8: u32 = 120;
pub const DW_OP_breg9: u32 = 121;
pub const DW_OP_breg10: u32 = 122;
pub const DW_OP_breg11: u32 = 123;
pub const DW_OP_breg12: u32 = 124;
pub const DW_OP_breg13: u32 = 125;
pub const DW_OP_breg14: u32 = 126;
pub const DW_OP_breg15: u32 = 127;
pub const DW_OP_breg16: u32 = 128;
pub const DW_OP_breg17: u32 = 129;
pub const DW_OP_breg18: u32 = 130;
pub const DW_OP_breg19: u32 = 131;
pub const DW_OP_breg20: u32 = 132;
pub const DW_OP_breg21: u32 = 133;
pub const DW_OP_breg22: u32 = 134;
pub const DW_OP_breg23: u32 = 135;
pub const DW_OP_breg24: u32 = 136;
pub const DW_OP_breg25: u32 = 137;
pub const DW_OP_breg26: u32 = 138;
pub const DW_OP_breg27: u32 = 139;
pub const DW_OP_breg28: u32 = 140;
pub const DW_OP_breg29: u32 = 141;
pub const DW_OP_breg30: u32 = 142;
pub const DW_OP_breg31: u32 = 143;
pub const DW_OP_regx: u32 = 144;
pub const DW_OP_fbreg: u32 = 145;
pub const DW_OP_bregx: u32 = 146;
pub const DW_OP_piece: u32 = 147;
pub const DW_OP_deref_size: u32 = 148;
pub const DW_OP_xderef_size: u32 = 149;
pub const DW_OP_nop: u32 = 150;
pub const DW_OP_push_object_address: u32 = 151;
pub const DW_OP_call2: u32 = 152;
pub const DW_OP_call4: u32 = 153;
pub const DW_OP_call_ref: u32 = 154;
pub const DW_OP_form_tls_address: u32 = 155;
pub const DW_OP_call_frame_cfa: u32 = 156;
pub const DW_OP_bit_piece: u32 = 157;
pub const DW_OP_implicit_value: u32 = 158;
pub const DW_OP_stack_value: u32 = 159;
pub const DW_OP_lo_user: u32 = 224;
pub const DW_OP_hi_user: u32 = 255;
pub const DW_ATE_address: u32 = 1;
pub const DW_ATE_boolean: u32 = 2;
pub const DW_ATE_complex_float: u32 = 3;
pub const DW_ATE_float: u32 = 4;
pub const DW_ATE_signed: u32 = 5;
pub const DW_ATE_signed_char: u32 = 6;
pub const DW_ATE_unsigned: u32 = 7;
pub const DW_ATE_unsigned_char: u32 = 8;
pub const DW_ATE_imaginary_float: u32 = 9;
pub const DW_ATE_packed_decimal: u32 = 10;
pub const DW_ATE_numeric_string: u32 = 11;
pub const DW_ATE_edited: u32 = 12;
pub const DW_ATE_signed_fixed: u32 = 13;
pub const DW_ATE_unsigned_fixed: u32 = 14;
pub const DW_ATE_decimal_float: u32 = 15;
pub const DW_ATE_UTF: u32 = 16;
pub const DW_ATE_lo_user: u32 = 128;
pub const DW_ATE_hi_user: u32 = 255;
pub const DW_DS_unsigned: u32 = 1;
pub const DW_DS_leading_overpunch: u32 = 2;
pub const DW_DS_trailing_overpunch: u32 = 3;
pub const DW_DS_leading_separate: u32 = 4;
pub const DW_DS_trailing_separate: u32 = 5;
pub const DW_END_default: u32 = 0;
pub const DW_END_big: u32 = 1;
pub const DW_END_little: u32 = 2;
pub const DW_END_lo_user: u32 = 64;
pub const DW_END_hi_user: u32 = 255;
pub const DW_ACCESS_public: u32 = 1;
pub const DW_ACCESS_protected: u32 = 2;
pub const DW_ACCESS_private: u32 = 3;
pub const DW_VIS_local: u32 = 1;
pub const DW_VIS_exported: u32 = 2;
pub const DW_VIS_qualified: u32 = 3;
pub const DW_VIRTUALITY_none: u32 = 0;
pub const DW_VIRTUALITY_virtual: u32 = 1;
pub const DW_VIRTUALITY_pure_virtual: u32 = 2;
pub const DW_LANG_C89: u32 = 1;
pub const DW_LANG_C: u32 = 2;
pub const DW_LANG_Ada83: u32 = 3;
pub const DW_LANG_C_plus_plus: u32 = 4;
pub const DW_LANG_Cobol74: u32 = 5;
pub const DW_LANG_Cobol85: u32 = 6;
pub const DW_LANG_Fortran77: u32 = 7;
pub const DW_LANG_Fortran90: u32 = 8;
pub const DW_LANG_Pascal83: u32 = 9;
pub const DW_LANG_Modula2: u32 = 10;
pub const DW_LANG_Java: u32 = 11;
pub const DW_LANG_C99: u32 = 12;
pub const DW_LANG_Ada95: u32 = 13;
pub const DW_LANG_Fortran95: u32 = 14;
pub const DW_LANG_PLI: u32 = 15;
pub const DW_LANG_ObjC: u32 = 16;
pub const DW_LANG_ObjC_plus_plus: u32 = 17;
pub const DW_LANG_UPC: u32 = 18;
pub const DW_LANG_D: u32 = 19;
pub const DW_LANG_Python: u32 = 20;
pub const DW_LANG_Rust: u32 = 28;
pub const DW_LANG_C11: u32 = 29;
pub const DW_LANG_Swift: u32 = 30;
pub const DW_LANG_Julia: u32 = 31;
pub const DW_LANG_Dylan: u32 = 32;
pub const DW_LANG_C_plus_plus_14: u32 = 33;
pub const DW_LANG_Fortran03: u32 = 34;
pub const DW_LANG_Fortran08: u32 = 35;
pub const DW_LANG_lo_user: u32 = 32768;
pub const DW_LANG_hi_user: u32 = 65535;
pub const DW_ID_case_sensitive: u32 = 0;
pub const DW_ID_up_case: u32 = 1;
pub const DW_ID_down_case: u32 = 2;
pub const DW_ID_case_insensitive: u32 = 3;
pub const DW_CC_normal: u32 = 1;
pub const DW_CC_program: u32 = 2;
pub const DW_CC_nocall: u32 = 3;
pub const DW_CC_lo_user: u32 = 64;
pub const DW_CC_hi_user: u32 = 255;
pub const DW_INL_not_inlined: u32 = 0;
pub const DW_INL_inlined: u32 = 1;
pub const DW_INL_declared_not_inlined: u32 = 2;
pub const DW_INL_declared_inlined: u32 = 3;
pub const DW_ORD_row_major: u32 = 0;
pub const DW_ORD_col_major: u32 = 1;
pub const DW_DSC_label: u32 = 0;
pub const DW_DSC_range: u32 = 1;
pub const DW_MACINFO_define: u32 = 1;
pub const DW_MACINFO_undef: u32 = 2;
pub const DW_MACINFO_start_file: u32 = 3;
pub const DW_MACINFO_end_file: u32 = 4;
pub const DW_MACINFO_vendor_ext: u32 = 255;
pub const DW_CFA_advance_loc: u32 = 64;
pub const DW_CFA_offset: u32 = 128;
pub const DW_CFA_restore: u32 = 192;
pub const DW_CFA_nop: u32 = 0;
pub const DW_CFA_set_loc: u32 = 1;
pub const DW_CFA_advance_loc1: u32 = 2;
pub const DW_CFA_advance_loc2: u32 = 3;
pub const DW_CFA_advance_loc4: u32 = 4;
pub const DW_CFA_offse_extended: u32 = 5;
pub const DW_CFA_restore_extended: u32 = 6;
pub const DW_CFA_undefined: u32 = 7;
pub const DW_CFA_same_value: u32 = 8;
pub const DW_CFA_register: u32 = 9;
pub const DW_CFA_remember_state: u32 = 10;
pub const DW_CFA_restore_state: u32 = 11;
pub const DW_CFA_def_cfa: u32 = 12;
pub const DW_CFA_def_cfa_register: u32 = 13;
pub const DW_CFA_def_cfa_offset: u32 = 14;
pub const DW_CFA_def_cfa_expression: u32 = 15;
pub const DW_CFA_expression: u32 = 16;
pub const DW_CFA_offset_extended_sf: u32 = 17;
pub const DW_CFA_def_cfa_sf: u32 = 18;
pub const DW_CFA_def_cfa_offset_sf: u32 = 19;
pub const DW_CFA_val_offset: u32 = 20;
pub const DW_CFA_val_offset_sf: u32 = 21;
pub const DW_CFA_val_expression: u32 = 22;
pub const DW_CFA_lo_user: u32 = 28;
pub const DW_CFA_hi_user: u32 = 63;
pub const DW_UT_compile: u32 = 1;
pub const DW_UT_type: u32 = 2;
pub const DW_UT_partial: u32 = 3;
pub const DW_UT_skeleton: u32 = 4;
pub const DW_UT_split_compile: u32 = 5;
pub const DW_UT_split_type: u32 = 6;
pub const DW_UT_lo_user: u32 = 128;
pub const DW_UT_hi_user: u32 = 255;
pub const DWARF_INIT_LEN_64: u32 = 4294967295;
pub const COMP_UNIT_CAPACITY: u32 = 8;
pub const DEBUG_INFO_CAPACITY: u32 = 8;
pub const ABBREV_DECL_CAP: u32 = 8;
pub const DEBUG_ABBREV_CAP: u32 = 32;
pub const DWARF_FALSE: u32 = 0;
pub const DWARF_TRUE: u32 = 1;
pub const FILE_NAME_LEN: u32 = 256;
pub const R_BIN_DBG_STRIPPED: u32 = 1;
pub const R_BIN_DBG_STATIC: u32 = 2;
pub const R_BIN_DBG_LINENUMS: u32 = 4;
pub const R_BIN_DBG_SYMS: u32 = 8;
pub const R_BIN_DBG_RELOCS: u32 = 16;
pub const R_BIN_ENTRY_TYPE_PROGRAM: u32 = 0;
pub const R_BIN_ENTRY_TYPE_MAIN: u32 = 1;
pub const R_BIN_ENTRY_TYPE_INIT: u32 = 2;
pub const R_BIN_ENTRY_TYPE_FINI: u32 = 3;
pub const R_BIN_ENTRY_TYPE_TLS: u32 = 4;
pub const R_BIN_ENTRY_TYPE_PREINIT: u32 = 5;
pub const R_BIN_SIZEOF_STRINGS: u32 = 512;
pub const R_BIN_MAX_ARCH: u32 = 1024;
pub const R_BIN_REQ_ALL: i32 = -1;
pub const R_BIN_REQ_UNK: u32 = 0;
pub const R_BIN_REQ_ENTRIES: u32 = 1;
pub const R_BIN_REQ_IMPORTS: u32 = 2;
pub const R_BIN_REQ_SYMBOLS: u32 = 4;
pub const R_BIN_REQ_SECTIONS: u32 = 8;
pub const R_BIN_REQ_INFO: u32 = 16;
pub const R_BIN_REQ_OPERATION: u32 = 32;
pub const R_BIN_REQ_HELP: u32 = 64;
pub const R_BIN_REQ_STRINGS: u32 = 128;
pub const R_BIN_REQ_FIELDS: u32 = 256;
pub const R_BIN_REQ_LIBS: u32 = 512;
pub const R_BIN_REQ_SRCLINE: u32 = 1024;
pub const R_BIN_REQ_MAIN: u32 = 2048;
pub const R_BIN_REQ_EXTRACT: u32 = 4096;
pub const R_BIN_REQ_RELOCS: u32 = 8192;
pub const R_BIN_REQ_LISTARCHS: u32 = 16384;
pub const R_BIN_REQ_CREATE: u32 = 32768;
pub const R_BIN_REQ_CLASSES: u32 = 65536;
pub const R_BIN_REQ_DWARF: u32 = 131072;
pub const R_BIN_REQ_SIZE: u32 = 262144;
pub const R_BIN_REQ_PDB: u32 = 524288;
pub const R_BIN_REQ_PDB_DWNLD: u32 = 1048576;
pub const R_BIN_REQ_DLOPEN: u32 = 2097152;
pub const R_BIN_REQ_EXPORTS: u32 = 4194304;
pub const R_BIN_REQ_VERSIONINFO: u32 = 8388608;
pub const R_BIN_REQ_PACKAGE: u32 = 16777216;
pub const R_BIN_REQ_HEADER: u32 = 33554432;
pub const R_BIN_REQ_LISTPLUGINS: u32 = 67108864;
pub const R_BIN_REQ_RESOURCES: u32 = 134217728;
pub const R_BIN_REQ_INITFINI: u32 = 268435456;
pub const R_BIN_REQ_SEGMENTS: u32 = 536870912;
pub const R_BIN_REQ_HASHES: u32 = 1073741824;
pub const R_BIN_REQ_SIGNATURE: u32 = 2147483648;
pub const R_BIN_REQ_TRYCATCH: u64 = 4294967296;
pub const R_BIN_REQ_SECTIONS_MAPPING: u64 = 8589934592;
pub const R_BIN_METH_CLASS: u32 = 1;
pub const R_BIN_METH_STATIC: u32 = 2;
pub const R_BIN_METH_PUBLIC: u32 = 4;
pub const R_BIN_METH_PRIVATE: u32 = 8;
pub const R_BIN_METH_PROTECTED: u32 = 16;
pub const R_BIN_METH_INTERNAL: u32 = 32;
pub const R_BIN_METH_OPEN: u32 = 64;
pub const R_BIN_METH_FILEPRIVATE: u32 = 128;
pub const R_BIN_METH_FINAL: u32 = 256;
pub const R_BIN_METH_VIRTUAL: u32 = 512;
pub const R_BIN_METH_CONST: u32 = 1024;
pub const R_BIN_METH_MUTATING: u32 = 2048;
pub const R_BIN_METH_ABSTRACT: u32 = 4096;
pub const R_BIN_METH_SYNCHRONIZED: u32 = 8192;
pub const R_BIN_METH_NATIVE: u32 = 16384;
pub const R_BIN_METH_BRIDGE: u32 = 32768;
pub const R_BIN_METH_VARARGS: u32 = 65536;
pub const R_BIN_METH_SYNTHETIC: u32 = 131072;
pub const R_BIN_METH_STRICT: u32 = 262144;
pub const R_BIN_METH_MIRANDA: u32 = 524288;
pub const R_BIN_METH_CONSTRUCTOR: u32 = 1048576;
pub const R_BIN_METH_DECLARED_SYNCHRONIZED: u32 = 2097152;
pub const R_BIN_BIND_LOCAL_STR: &'static [u8; 6usize] = b"LOCAL\0";
pub const R_BIN_BIND_GLOBAL_STR: &'static [u8; 7usize] = b"GLOBAL\0";
pub const R_BIN_BIND_WEAK_STR: &'static [u8; 5usize] = b"WEAK\0";
pub const R_BIN_BIND_NUM_STR: &'static [u8; 4usize] = b"NUM\0";
pub const R_BIN_BIND_LOOS_STR: &'static [u8; 5usize] = b"LOOS\0";
pub const R_BIN_BIND_HIOS_STR: &'static [u8; 5usize] = b"HIOS\0";
pub const R_BIN_BIND_LOPROC_STR: &'static [u8; 7usize] = b"LOPROC\0";
pub const R_BIN_BIND_HIPROC_STR: &'static [u8; 7usize] = b"HIPROC\0";
pub const R_BIN_BIND_UNKNOWN_STR: &'static [u8; 8usize] = b"UNKNOWN\0";
pub const R_BIN_TYPE_NOTYPE_STR: &'static [u8; 7usize] = b"NOTYPE\0";
pub const R_BIN_TYPE_OBJECT_STR: &'static [u8; 4usize] = b"OBJ\0";
pub const R_BIN_TYPE_FUNC_STR: &'static [u8; 5usize] = b"FUNC\0";
pub const R_BIN_TYPE_METH_STR: &'static [u8; 5usize] = b"METH\0";
pub const R_BIN_TYPE_STATIC_STR: &'static [u8; 7usize] = b"STATIC\0";
pub const R_BIN_TYPE_SECTION_STR: &'static [u8; 5usize] = b"SECT\0";
pub const R_BIN_TYPE_FILE_STR: &'static [u8; 5usize] = b"FILE\0";
pub const R_BIN_TYPE_COMMON_STR: &'static [u8; 7usize] = b"COMMON\0";
pub const R_BIN_TYPE_TLS_STR: &'static [u8; 4usize] = b"TLS\0";
pub const R_BIN_TYPE_NUM_STR: &'static [u8; 4usize] = b"NUM\0";
pub const R_BIN_TYPE_LOOS_STR: &'static [u8; 5usize] = b"LOOS\0";
pub const R_BIN_TYPE_HIOS_STR: &'static [u8; 5usize] = b"HIOS\0";
pub const R_BIN_TYPE_LOPROC_STR: &'static [u8; 7usize] = b"LOPROC\0";
pub const R_BIN_TYPE_HIPROC_STR: &'static [u8; 7usize] = b"HIPROC\0";
pub const R_BIN_TYPE_SPECIAL_SYM_STR: &'static [u8; 5usize] = b"SPCL\0";
pub const R_BIN_TYPE_UNKNOWN_STR: &'static [u8; 4usize] = b"UNK\0";
pub const R_FLAG_NAME_SIZE: u32 = 512;
pub const R_FLAG_ZONE_USE_SDB: u32 = 0;
pub const USE_VARSUBS: u32 = 0;
pub const R_REG_COND_EQ: u32 = 0;
pub const R_REG_COND_NE: u32 = 1;
pub const R_REG_COND_CF: u32 = 2;
pub const R_REG_COND_CARRY: u32 = 2;
pub const R_REG_COND_NEG: u32 = 3;
pub const R_REG_COND_NEGATIVE: u32 = 3;
pub const R_REG_COND_OF: u32 = 4;
pub const R_REG_COND_OVERFLOW: u32 = 4;
pub const R_REG_COND_HI: u32 = 5;
pub const R_REG_COND_HE: u32 = 6;
pub const R_REG_COND_LO: u32 = 7;
pub const R_REG_COND_LOE: u32 = 8;
pub const R_REG_COND_GE: u32 = 9;
pub const R_REG_COND_GT: u32 = 10;
pub const R_REG_COND_LT: u32 = 11;
pub const R_REG_COND_LE: u32 = 12;
pub const R_REG_COND_LAST: u32 = 13;
pub const R_SEARCH_DISTANCE_MAX: u32 = 10;
pub const R_SEARCH_KEYWORD_TYPE_BINARY: u8 = 105u8;
pub const R_SEARCH_KEYWORD_TYPE_STRING: u8 = 115u8;
pub const R_SEARCH_AES_BOX_SIZE: u32 = 31;
pub const R_SYSCALL_ARGS: u32 = 7;
pub const R_ANAL_ADDR_TYPE_EXEC: u32 = 1;
pub const R_ANAL_ADDR_TYPE_READ: u32 = 2;
pub const R_ANAL_ADDR_TYPE_WRITE: u32 = 4;
pub const R_ANAL_ADDR_TYPE_FLAG: u32 = 8;
pub const R_ANAL_ADDR_TYPE_FUNC: u32 = 16;
pub const R_ANAL_ADDR_TYPE_HEAP: u32 = 32;
pub const R_ANAL_ADDR_TYPE_STACK: u32 = 64;
pub const R_ANAL_ADDR_TYPE_REG: u32 = 128;
pub const R_ANAL_ADDR_TYPE_PROGRAM: u32 = 256;
pub const R_ANAL_ADDR_TYPE_LIBRARY: u32 = 512;
pub const R_ANAL_ADDR_TYPE_ASCII: u32 = 1024;
pub const R_ANAL_ADDR_TYPE_SEQUENCE: u32 = 2048;
pub const R_ANAL_ARCHINFO_MIN_OP_SIZE: u32 = 0;
pub const R_ANAL_ARCHINFO_MAX_OP_SIZE: u32 = 1;
pub const R_ANAL_ARCHINFO_ALIGN: u32 = 2;
pub const R_ANAL_ARCHINFO_DATA_ALIGN: u32 = 4;
pub const R_ANAL_CC_MAXARG: u32 = 16;
pub const R_ANAL_OP_TYPE_MASK: u32 = 2147549183;
pub const R_ANAL_OP_HINT_MASK: u32 = 4026531840;
pub const R_ANAL_ESIL_GOTO_LIMIT: u32 = 4096;
pub const VARPREFIX: &'static [u8; 4usize] = b"var\0";
pub const ARGPREFIX: &'static [u8; 4usize] = b"arg\0";
pub const ESIL_INTERNAL_PREFIX: u8 = 36u8;
pub const ESIL_STACK_NAME: &'static [u8; 9usize] = b"esil.ram\0";
pub const R_ANAL_FCN_VARKIND_LOCAL: u8 = 118u8;
pub const R_ANAL_THRESHOLDFCN: f64 = 0.7;
pub const R_ANAL_THRESHOLDBB: f64 = 0.7;
pub const R_EGG_INCDIR_ENV: &'static [u8; 11usize] = b"EGG_INCDIR\0";
pub const R_EGG_INCDIR_PATH: &'static [u8; 23usize] = b"/lib/radare2/5.4.1/egg\0";
pub const R_EGG_PLUGIN_SHELLCODE: u32 = 0;
pub const R_EGG_PLUGIN_ENCODER: u32 = 1;
pub const R_EGG_OS_LINUX: u32 = 1554393667;
pub const R_EGG_OS_OSX: u32 = 181769121;
pub const R_EGG_OS_DARWIN: u32 = 3631028962;
pub const R_EGG_OS_WATCHOS: u32 = 345267312;
pub const R_EGG_OS_IOS: u32 = 181766192;
pub const R_EGG_OS_MACOS: u32 = 1555184662;
pub const R_EGG_OS_W32: u32 = 181795763;
pub const R_EGG_OS_WINDOWS: u32 = 95936154;
pub const R_EGG_OS_BEOS: u32 = 1348536510;
pub const R_EGG_OS_FREEBSD: u32 = 1940334916;
pub const R_EGG_OS_DEFAULT: u32 = 181769121;
pub const R_EGG_OS_NAME: &'static [u8; 7usize] = b"darwin\0";
pub const R_EGG_FORMAT_DEFAULT: &'static [u8; 6usize] = b"mach0\0";
pub const MACRO_LIMIT: u32 = 1024;
pub const MACRO_LABELS: u32 = 20;
pub const R_CMD_MAXLEN: u32 = 4096;
pub const ZIGN_HASH: &'static [u8; 7usize] = b"sha256\0";
pub const R_SIGN_COL_DELEM: u8 = 58u8;
pub const SHA256_BLOCK_LENGTH: u32 = 64;
pub const SHA384_BLOCK_LENGTH: u32 = 128;
pub const SHA512_BLOCK_LENGTH: u32 = 128;
pub const R_HAVE_CRC15_EXTRA: u32 = 1;
pub const R_HAVE_CRC24: u32 = 1;
pub const R_HAVE_CRC32_EXTRA: u32 = 1;
pub const R_HAVE_CRC64: u32 = 1;
pub const R_HAVE_CRC64_EXTRA: u32 = 1;
pub const PFMTCRCx: &'static [u8; 4usize] = b"llx\0";
pub const R_HASH_SIZE_SSDEEP: u32 = 128;
pub const R_HASH_SIZE_CRC8_SMBUS: u32 = 1;
pub const R_HASH_SIZE_CRC15_CAN: u32 = 2;
pub const R_HASH_SIZE_CRC16: u32 = 2;
pub const R_HASH_SIZE_CRC16_HDLC: u32 = 2;
pub const R_HASH_SIZE_CRC16_USB: u32 = 2;
pub const R_HASH_SIZE_CRC16_CITT: u32 = 2;
pub const R_HASH_SIZE_CRC24: u32 = 3;
pub const R_HASH_SIZE_CRC32: u32 = 4;
pub const R_HASH_SIZE_CRC32C: u32 = 4;
pub const R_HASH_SIZE_CRC32_ECMA_267: u32 = 4;
pub const R_HASH_SIZE_CRC32_BZIP2: u32 = 4;
pub const R_HASH_SIZE_CRC32D: u32 = 4;
pub const R_HASH_SIZE_CRC32_MPEG2: u32 = 4;
pub const R_HASH_SIZE_CRC32_POSIX: u32 = 4;
pub const R_HASH_SIZE_CRC32Q: u32 = 4;
pub const R_HASH_SIZE_CRC32_JAMCRC: u32 = 4;
pub const R_HASH_SIZE_CRC32_XFER: u32 = 4;
pub const R_HASH_SIZE_CRC64: u32 = 8;
pub const R_HASH_SIZE_CRC64_ECMA182: u32 = 8;
pub const R_HASH_SIZE_CRC64_WE: u32 = 8;
pub const R_HASH_SIZE_CRC64_XZ: u32 = 8;
pub const R_HASH_SIZE_CRC64_ISO: u32 = 8;
pub const R_HASH_SIZE_XXHASH: u32 = 4;
pub const R_HASH_SIZE_MD4: u32 = 16;
pub const R_HASH_SIZE_MD5: u32 = 16;
pub const R_HASH_SIZE_SHA1: u32 = 20;
pub const R_HASH_SIZE_SHA256: u32 = 32;
pub const R_HASH_SIZE_SHA384: u32 = 48;
pub const R_HASH_SIZE_SHA512: u32 = 64;
pub const R_HASH_SIZE_ADLER32: u32 = 4;
pub const R_HASH_SIZE_ENTROPY: u32 = 0;
pub const R_HASH_SIZE_PCPRINT: u32 = 1;
pub const R_HASH_SIZE_MOD255: u32 = 1;
pub const R_HASH_SIZE_PARITY: u32 = 1;
pub const R_HASH_SIZE_XOR: u32 = 1;
pub const R_HASH_SIZE_XORPAIR: u32 = 2;
pub const R_HASH_SIZE_HAMDIST: u32 = 1;
pub const R_HASH_SIZE_LUHN: u32 = 1;
pub const R_HASH_SIZE_FLETCHER8: u32 = 1;
pub const R_HASH_SIZE_FLETCHER16: u32 = 2;
pub const R_HASH_SIZE_FLETCHER32: u32 = 4;
pub const R_HASH_SIZE_FLETCHER64: u32 = 8;
pub const R_HASH_NONE: u32 = 0;
pub const R_BP_MAXPIDS: u32 = 10;
pub const R_BP_CONT_NORMAL: u32 = 0;
pub const CN_BOOL: u32 = 1;
pub const CN_INT: u32 = 2;
pub const CN_STR: u32 = 8;
pub const CN_RO: u32 = 16;
pub const CN_RW: u32 = 32;
pub const SNAP_PAGE_SIZE: u32 = 4096;
pub const CHECK_POINT_LIMIT: u32 = 1048576;
pub const R_PRINT_FLAGS_COLOR: u32 = 1;
pub const R_PRINT_FLAGS_ADDRMOD: u32 = 2;
pub const R_PRINT_FLAGS_CURSOR: u32 = 4;
pub const R_PRINT_FLAGS_HEADER: u32 = 8;
pub const R_PRINT_FLAGS_SPARSE: u32 = 16;
pub const R_PRINT_FLAGS_SEGOFF: u32 = 32;
pub const R_PRINT_FLAGS_OFFSET: u32 = 64;
pub const R_PRINT_FLAGS_REFS: u32 = 128;
pub const R_PRINT_FLAGS_DIFFOUT: u32 = 256;
pub const R_PRINT_FLAGS_ADDRDEC: u32 = 512;
pub const R_PRINT_FLAGS_COMMENT: u32 = 1024;
pub const R_PRINT_FLAGS_COMPACT: u32 = 2048;
pub const R_PRINT_FLAGS_NONHEX: u32 = 4096;
pub const R_PRINT_FLAGS_SECSUB: u32 = 8192;
pub const R_PRINT_FLAGS_RAINBOW: u32 = 16384;
pub const R_PRINT_FLAGS_HDROFF: u32 = 32768;
pub const R_PRINT_FLAGS_STYLE: u32 = 65536;
pub const R_PRINT_FLAGS_NONASCII: u32 = 131072;
pub const R_PRINT_FLAGS_ALIGN: u32 = 262144;
pub const R_PRINT_FLAGS_UNALLOC: u32 = 524288;
pub const R_PRINT_FLAGS_BGFILL: u32 = 1048576;
pub const R_PRINT_FLAGS_SECTION: u32 = 2097152;
pub const _00_: u32 = 1;
pub const _01_: u32 = 8;
pub const _10_: u32 = 2;
pub const _11_: u32 = 16;
pub const _20_: u32 = 4;
pub const _21_: u32 = 32;
pub const _30_: u32 = 256;
pub const _31_: u32 = 512;
pub const BRAILE_ONE: u32 = 569;
pub const BRAILE_TWO: u32 = 797;
pub const BRAILE_TRI: u32 = 825;
pub const BRAILE_FUR: u32 = 563;
pub const BRAILE_FIV: u32 = 299;
pub const BRAILE_SIX: u32 = 814;
pub const BRAILE_SEV: u32 = 285;
pub const BRAILE_EIG: u32 = 831;
pub const BRAILE_NIN: u32 = 315;
pub const SEEFLAG: i32 = -2;
pub const JSONOUTPUT: i32 = -3;
pub const R_PRINT_MUSTSEE: u32 = 1;
pub const R_PRINT_ISFIELD: u32 = 2;
pub const R_PRINT_SEEFLAGS: u32 = 4;
pub const R_PRINT_JSON: u32 = 8;
pub const R_PRINT_MUSTSET: u32 = 16;
pub const R_PRINT_UNIONMODE: u32 = 32;
pub const R_PRINT_VALUE: u32 = 64;
pub const R_PRINT_DOT: u32 = 128;
pub const R_PRINT_QUIET: u32 = 256;
pub const R_PRINT_STRUCT: u32 = 512;
pub const R_PRINT_STRING_WIDE: u32 = 1;
pub const R_PRINT_STRING_ZEROEND: u32 = 2;
pub const R_PRINT_STRING_URLENCODE: u32 = 4;
pub const R_PRINT_STRING_WRAP: u32 = 8;
pub const R_PRINT_STRING_WIDE32: u32 = 16;
pub const R_PRINT_STRING_ESC_NL: u32 = 32;
pub const DES_KEY_SIZE: u32 = 8;
pub const DES_BLOCK_SIZE: u32 = 8;
pub const R_CRYPTO_NONE: u32 = 0;
pub const R_CRYPTO_RC2: u32 = 1;
pub const R_CRYPTO_RC4: u32 = 2;
pub const R_CRYPTO_RC6: u32 = 4;
pub const R_CRYPTO_AES_ECB: u32 = 8;
pub const R_CRYPTO_AES_CBC: u32 = 16;
pub const R_CRYPTO_ROR: u32 = 32;
pub const R_CRYPTO_ROL: u32 = 64;
pub const R_CRYPTO_ROT: u32 = 128;
pub const R_CRYPTO_BLOWFISH: u32 = 256;
pub const R_CRYPTO_CPS2: u32 = 512;
pub const R_CRYPTO_DES_ECB: u32 = 1024;
pub const R_CRYPTO_XOR: u32 = 2048;
pub const R_CRYPTO_SERPENT: u32 = 4096;
pub const R_CRYPTO_ALL: u32 = 65535;
pub const R_CODEC_NONE: u32 = 0;
pub const R_CODEC_B64: u32 = 1;
pub const R_CODEC_B91: u32 = 2;
pub const R_CODEC_PUNYCODE: u32 = 4;
pub const R_CODEC_ALL: u32 = 65535;
pub const R_CORE_CMD_OK: u32 = 0;
pub const R_CORE_CMD_INVALID: i32 = -1;
pub const R_CORE_CMD_EXIT: i32 = -2;
pub const R_CORE_BLOCKSIZE: u32 = 256;
pub const R_CORE_BLOCKSIZE_MAX: u32 = 52428800;
pub const R_CORE_ANAL_GRAPHLINES: u32 = 1;
pub const R_CORE_ANAL_GRAPHBODY: u32 = 2;
pub const R_CORE_ANAL_GRAPHDIFF: u32 = 4;
pub const R_CORE_ANAL_JSON: u32 = 8;
pub const R_CORE_ANAL_KEYVALUE: u32 = 16;
pub const R_CORE_ANAL_JSON_FORMAT_DISASM: u32 = 32;
pub const R_CORE_ANAL_STAR: u32 = 64;
pub const R_FLAGS_FS_CLASSES: &'static [u8; 8usize] = b"classes\0";
pub const R_FLAGS_FS_FUNCTIONS: &'static [u8; 10usize] = b"functions\0";
pub const R_FLAGS_FS_IMPORTS: &'static [u8; 8usize] = b"imports\0";
pub const R_FLAGS_FS_RELOCS: &'static [u8; 7usize] = b"relocs\0";
pub const R_FLAGS_FS_REGISTERS: &'static [u8; 10usize] = b"registers\0";
pub const R_FLAGS_FS_RESOURCES: &'static [u8; 10usize] = b"resources\0";
pub const R_FLAGS_FS_SECTIONS: &'static [u8; 9usize] = b"sections\0";
pub const R_FLAGS_FS_SEGMENTS: &'static [u8; 9usize] = b"segments\0";
pub const R_FLAGS_FS_SIGNS: &'static [u8; 5usize] = b"sign\0";
pub const R_FLAGS_FS_STRINGS: &'static [u8; 8usize] = b"strings\0";
pub const R_FLAGS_FS_SYMBOLS: &'static [u8; 8usize] = b"symbols\0";
pub const R_FLAGS_FS_SYMBOLS_SECTIONS: &'static [u8; 17usize] = b"symbols.sections\0";
pub const R_FLAGS_FS_SYSCALLS: &'static [u8; 9usize] = b"syscalls\0";
pub const R_GRAPH_FORMAT_NO: u32 = 0;
pub const R_GRAPH_FORMAT_GMLFCN: u32 = 1;
pub const R_GRAPH_FORMAT_JSON: u32 = 2;
pub const R_GRAPH_FORMAT_GML: u32 = 3;
pub const R_GRAPH_FORMAT_DOT: u32 = 4;
pub const R_GRAPH_FORMAT_CMD: u32 = 5;
pub const RTR_PROTOCOL_RAP: u32 = 0;
pub const RTR_PROTOCOL_TCP: u32 = 1;
pub const RTR_PROTOCOL_UDP: u32 = 2;
pub const RTR_PROTOCOL_HTTP: u32 = 3;
pub const RTR_PROTOCOL_UNIX: u32 = 4;
pub const RTR_MAX_HOSTS: u32 = 255;
pub const R_CORE_ASMQJMPS_NUM: u32 = 10;
pub const R_CORE_ASMQJMPS_LETTERS: u32 = 26;
pub const R_CORE_ASMQJMPS_MAX_LETTERS: u32 = 11881376;
pub const R_CORE_ASMQJMPS_LEN_LETTERS: u32 = 5;
pub const R_CORE_FOREIGN_ADDR: i32 = -1;
pub const R_CORE_LOADLIBS_ENV: u32 = 1;
pub const R_CORE_LOADLIBS_HOME: u32 = 2;
pub const R_CORE_LOADLIBS_SYSTEM: u32 = 4;
pub const R_CORE_LOADLIBS_CONFIG: u32 = 8;
pub const R_CORE_LOADLIBS_ALL: u32 = 4294967295;
pub const R_MIDFLAGS_HIDE: u32 = 0;
pub const R_MIDFLAGS_SHOW: u32 = 1;
pub const R_MIDFLAGS_REALIGN: u32 = 2;
pub const R_MIDFLAGS_SYMALIGN: u32 = 3;
pub const R_CORE_BIN_ACC_STRINGS: u32 = 1;
pub const R_CORE_BIN_ACC_INFO: u32 = 2;
pub const R_CORE_BIN_ACC_MAIN: u32 = 4;
pub const R_CORE_BIN_ACC_ENTRIES: u32 = 8;
pub const R_CORE_BIN_ACC_RELOCS: u32 = 16;
pub const R_CORE_BIN_ACC_IMPORTS: u32 = 32;
pub const R_CORE_BIN_ACC_SYMBOLS: u32 = 64;
pub const R_CORE_BIN_ACC_SECTIONS: u32 = 128;
pub const R_CORE_BIN_ACC_FIELDS: u32 = 256;
pub const R_CORE_BIN_ACC_LIBS: u32 = 512;
pub const R_CORE_BIN_ACC_CLASSES: u32 = 1024;
pub const R_CORE_BIN_ACC_DWARF: u32 = 2048;
pub const R_CORE_BIN_ACC_SIZE: u32 = 4096;
pub const R_CORE_BIN_ACC_PDB: u32 = 8192;
pub const R_CORE_BIN_ACC_MEM: u32 = 16384;
pub const R_CORE_BIN_ACC_EXPORTS: u32 = 32768;
pub const R_CORE_BIN_ACC_VERSIONINFO: u32 = 65536;
pub const R_CORE_BIN_ACC_SIGNATURE: u32 = 131072;
pub const R_CORE_BIN_ACC_RAW_STRINGS: u32 = 262144;
pub const R_CORE_BIN_ACC_HEADER: u32 = 524288;
pub const R_CORE_BIN_ACC_RESOURCES: u32 = 1048576;
pub const R_CORE_BIN_ACC_INITFINI: u32 = 2097152;
pub const R_CORE_BIN_ACC_SEGMENTS: u32 = 4194304;
pub const R_CORE_BIN_ACC_SOURCE: u32 = 8388608;
pub const R_CORE_BIN_ACC_HASHES: u32 = 268435456;
pub const R_CORE_BIN_ACC_TRYCATCH: u32 = 536870912;
pub const R_CORE_BIN_ACC_SECTIONS_MAPPING: u32 = 1073741824;
pub const R_CORE_BIN_ACC_ALL: u32 = 5263359;
pub const R_CORE_PRJ_FLAGS: u32 = 1;
pub const R_CORE_PRJ_EVAL: u32 = 2;
pub const R_CORE_PRJ_IO_MAPS: u32 = 4;
pub const R_CORE_PRJ_SECTIONS: u32 = 8;
pub const R_CORE_PRJ_META: u32 = 16;
pub const R_CORE_PRJ_XREFS: u32 = 32;
pub const R_CORE_PRJ_FCNS: u32 = 64;
pub const R_CORE_PRJ_ANAL_HINTS: u32 = 128;
pub const R_CORE_PRJ_ANAL_TYPES: u32 = 256;
pub const R_CORE_PRJ_ANAL_MACROS: u32 = 512;
pub const R_CORE_PRJ_ANAL_SEEK: u32 = 1024;
pub const R_CORE_PRJ_DBG_BREAK: u32 = 2048;
pub const R_CORE_PRJ_ALL: u32 = 65535;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebx as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ecx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ecx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edx as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edi as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esi as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esp as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eflags as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eip as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__cs as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ds as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__es as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__fs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__gs as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_rsrv as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_rsrv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_xmm_reg>())).__xmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_xmm_reg),
            "::",
            stringify!(__xmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ymm_reg>())).__ymm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ymm_reg),
            "::",
            stringify!(__ymm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_zmm_reg>())).__zmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_zmm_reg),
            "::",
            stringify!(__zmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_opmask_reg>())).__opmask_reg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_opmask_reg),
            "::",
            stringify!(__opmask_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsrmask as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved1 as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__avx_reserved1 as *const _ as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k0 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k1 as *const _ as usize
        },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k2 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k3 as *const _ as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k4 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k5 as *const _ as usize
        },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k6 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k7 as *const _ as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh0 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh1 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh2 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh3 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh4 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh5 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh6 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh7 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr1 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr3 as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr4 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr5 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr6 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr7 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___x86_pagein_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_pagein_state>())).__pagein_error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_pagein_state),
            "::",
            stringify!(__pagein_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rcx as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rcx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdx as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdi as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsi as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbp as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsp as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r8 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r9 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r10 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r11 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r12 as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r13 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r14 as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r15 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rip as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rflags as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__cs as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__fs as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__gs as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_full_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_full_state64>(),
        200usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_full_state64>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_x86_thread_full_state64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ss64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ds as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__es as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ss as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__gsbase as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__gsbase)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh10 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh11 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh12 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh13 as *const _ as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh14 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh15 as *const _ as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh10 as *const _
                as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh11 as *const _
                as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh12 as *const _
                as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh13 as *const _
                as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh14 as *const _
                as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh15 as *const _
                as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k0 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k1 as *const _ as usize
        },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k2 as *const _ as usize
        },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k3 as *const _ as usize
        },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k4 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k5 as *const _ as usize
        },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k6 as *const _ as usize
        },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k7 as *const _ as usize
        },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh0 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh1 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh2 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh3 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh4 as *const _ as usize
        },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh5 as *const _ as usize
        },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh6 as *const _ as usize
        },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh7 as *const _ as usize
        },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh8 as *const _ as usize
        },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh9 as *const _ as usize
        },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh10 as *const _
                as usize
        },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh11 as *const _
                as usize
        },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh12 as *const _
                as usize
        },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh13 as *const _
                as usize
        },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh14 as *const _
                as usize
        },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh15 as *const _
                as usize
        },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm16 as *const _ as usize
        },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm17 as *const _ as usize
        },
        1484usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm17)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm18 as *const _ as usize
        },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm18)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm19 as *const _ as usize
        },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm19)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm20 as *const _ as usize
        },
        1676usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm21 as *const _ as usize
        },
        1740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm22 as *const _ as usize
        },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm23 as *const _ as usize
        },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm24 as *const _ as usize
        },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm25 as *const _ as usize
        },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm25)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm26 as *const _ as usize
        },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm26)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm27 as *const _ as usize
        },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm27)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm28 as *const _ as usize
        },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm28)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm29 as *const _ as usize
        },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm29)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm30 as *const _ as usize
        },
        2316usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm30)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm31 as *const _ as usize
        },
        2380usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm31)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr1 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr3 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr4 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr5 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr6 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr7 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_cpmu_state64>())).__ctrs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        600usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__fs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx32>(),
        792usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__fs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_32>(),
        1112usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__ss as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__fs as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        712usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__fs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64_full>(),
        744usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64_full>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64_full>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64_full>())).__fs as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64_full),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64>(),
        1032usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__fs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64_full>(),
        1064usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx64_full>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx64_full>())).__ss as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx64_full>())).__fs as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64>(),
        2632usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__ss as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__fs as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64_full>(),
        2664usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64_full>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_mcontext_avx512_64_full)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64_full>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64_full>())).__ss as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64_full>())).__fs as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__fs)
        )
    );
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_onstack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_onstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_sigmask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_link as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcontext as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify_function as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent>())).sigev_notify_attributes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_band as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).__pad as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_sigaction as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_tramp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_tramp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_utime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_stime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_maxrss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_ixrss as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_idrss as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_isrss as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_minflt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_majflt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nswap as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_inblock as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_oublock as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgsnd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgrcv as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nsignals as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nvcsw as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nivcsw as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_logical_writes as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_lifetime_max_phys_footprint as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_instructions as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_cycles as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_energy as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_energy as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_interval_max_phys_footprint as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_runnable_time as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_runnable_time)
        )
    );
}
pub type rusage_info_current = rusage_info_v4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    assert_eq!(
        ::std::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_T as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_S as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const wchar_t,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: size_t);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_daemon$1050"]
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneEntry() {
    assert_eq!(
        ::std::mem::size_of::<_RuneEntry>(),
        24usize,
        concat!("Size of: ", stringify!(_RuneEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__types)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[test]
fn bindgen_test_layout__RuneRange() {
    assert_eq!(
        ::std::mem::size_of::<_RuneRange>(),
        16usize,
        concat!("Size of: ", stringify!(_RuneRange))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneRange>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneRange>())).__nranges as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__nranges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneRange>())).__ranges as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__ranges)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneCharClass() {
    assert_eq!(
        ::std::mem::size_of::<_RuneCharClass>(),
        20usize,
        concat!("Size of: ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneCharClass>(),
        4usize,
        concat!("Alignment of ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneCharClass>())).__name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneCharClass>())).__mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[test]
fn bindgen_test_layout__RuneLocale() {
    assert_eq!(
        ::std::mem::size_of::<_RuneLocale>(),
        3208usize,
        concat!("Size of: ", stringify!(_RuneLocale))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneLocale>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneLocale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__encoding as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__sgetrune as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sgetrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__sputrune as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sputrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__invalid_rune as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__invalid_rune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__runetype as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__maplower as *const _ as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__mapupper as *const _ as usize },
        2108usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__runetype_ext as *const _ as usize },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__maplower_ext as *const _ as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__mapupper_ext as *const _ as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__variable as *const _ as usize },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__variable_len as *const _ as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__ncharclasses as *const _ as usize },
        3196usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__ncharclasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__charclasses as *const _ as usize },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__charclasses)
        )
    );
}
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type clock_t = __darwin_clock_t;
pub type ssize_t = __darwin_ssize_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type uut16 = ::std::os::raw::c_ushort;
pub type uut32 = ::std::os::raw::c_uint;
pub type uut64 = ::std::os::raw::c_ulonglong;
pub type ust16 = ::std::os::raw::c_short;
pub type ust32 = ::std::os::raw::c_int;
pub type ust64 = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union utAny {
    pub v8: ::std::os::raw::c_uchar,
    pub v16: ::std::os::raw::c_ushort,
    pub v32: ::std::os::raw::c_uint,
    pub v64: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_utAny() {
    assert_eq!(
        ::std::mem::size_of::<utAny>(),
        8usize,
        concat!("Size of: ", stringify!(utAny))
    );
    assert_eq!(
        ::std::mem::align_of::<utAny>(),
        8usize,
        concat!("Alignment of ", stringify!(utAny))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utAny>())).v8 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(utAny), "::", stringify!(v8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utAny>())).v16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utAny),
            "::",
            stringify!(v16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utAny>())).v32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utAny),
            "::",
            stringify!(v32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utAny>())).v64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utAny),
            "::",
            stringify!(v64)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ut80 {
    pub Low: ::std::os::raw::c_ulonglong,
    pub High: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__ut80() {
    assert_eq!(
        ::std::mem::size_of::<_ut80>(),
        16usize,
        concat!("Size of: ", stringify!(_ut80))
    );
    assert_eq!(
        ::std::mem::align_of::<_ut80>(),
        8usize,
        concat!("Alignment of ", stringify!(_ut80))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ut80>())).Low as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut80),
            "::",
            stringify!(Low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ut80>())).High as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut80),
            "::",
            stringify!(High)
        )
    );
}
pub type ut80 = _ut80;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ut96 {
    pub Low: ::std::os::raw::c_ulonglong,
    pub High: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__ut96() {
    assert_eq!(
        ::std::mem::size_of::<_ut96>(),
        16usize,
        concat!("Size of: ", stringify!(_ut96))
    );
    assert_eq!(
        ::std::mem::align_of::<_ut96>(),
        8usize,
        concat!("Alignment of ", stringify!(_ut96))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ut96>())).Low as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut96),
            "::",
            stringify!(Low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ut96>())).High as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut96),
            "::",
            stringify!(High)
        )
    );
}
pub type ut96 = _ut96;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ut128 {
    pub Low: ::std::os::raw::c_ulonglong,
    pub High: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__ut128() {
    assert_eq!(
        ::std::mem::size_of::<_ut128>(),
        16usize,
        concat!("Size of: ", stringify!(_ut128))
    );
    assert_eq!(
        ::std::mem::align_of::<_ut128>(),
        8usize,
        concat!("Alignment of ", stringify!(_ut128))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ut128>())).Low as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut128),
            "::",
            stringify!(Low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ut128>())).High as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut128),
            "::",
            stringify!(High)
        )
    );
}
pub type ut128 = _ut128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ut256 {
    pub Low: ut128,
    pub High: ut128,
}
#[test]
fn bindgen_test_layout__ut256() {
    assert_eq!(
        ::std::mem::size_of::<_ut256>(),
        32usize,
        concat!("Size of: ", stringify!(_ut256))
    );
    assert_eq!(
        ::std::mem::align_of::<_ut256>(),
        8usize,
        concat!("Alignment of ", stringify!(_ut256))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ut256>())).Low as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut256),
            "::",
            stringify!(Low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ut256>())).High as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ut256),
            "::",
            stringify!(High)
        )
    );
}
pub type ut256 = _ut256;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _utX {
    pub v80: ut80,
    pub v96: ut96,
    pub v128: ut128,
    pub v256: ut256,
}
#[test]
fn bindgen_test_layout__utX() {
    assert_eq!(
        ::std::mem::size_of::<_utX>(),
        80usize,
        concat!("Size of: ", stringify!(_utX))
    );
    assert_eq!(
        ::std::mem::align_of::<_utX>(),
        8usize,
        concat!("Alignment of ", stringify!(_utX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_utX>())).v80 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_utX), "::", stringify!(v80))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_utX>())).v96 as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_utX), "::", stringify!(v96))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_utX>())).v128 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_utX),
            "::",
            stringify!(v128)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_utX>())).v256 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_utX),
            "::",
            stringify!(v256)
        )
    );
}
pub type utX = _utX;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: size_t,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: size_t) -> size_t;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: size_t,
        __little: *const ::std::os::raw::c_void,
        __little_len: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ssize_t,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        24usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[test]
fn bindgen_test_layout_flocktimeout() {
    assert_eq!(
        ::std::mem::size_of::<flocktimeout>(),
        40usize,
        concat!("Size of: ", stringify!(flocktimeout))
    );
    assert_eq!(
        ::std::mem::align_of::<flocktimeout>(),
        8usize,
        concat!("Alignment of ", stringify!(flocktimeout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flocktimeout>())).fl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flocktimeout),
            "::",
            stringify!(fl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flocktimeout>())).timeout as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flocktimeout),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_radvisory() {
    assert_eq!(
        ::std::mem::size_of::<radvisory>(),
        16usize,
        concat!("Size of: ", stringify!(radvisory))
    );
    assert_eq!(
        ::std::mem::align_of::<radvisory>(),
        8usize,
        concat!("Alignment of ", stringify!(radvisory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<radvisory>())).ra_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radvisory),
            "::",
            stringify!(ra_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<radvisory>())).ra_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radvisory),
            "::",
            stringify!(ra_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fcodeblobs {
    pub f_cd_hash: *mut ::std::os::raw::c_void,
    pub f_hash_size: size_t,
    pub f_cd_buffer: *mut ::std::os::raw::c_void,
    pub f_cd_size: size_t,
    pub f_out_size: *mut ::std::os::raw::c_uint,
    pub f_arch: ::std::os::raw::c_int,
    pub __padding: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fcodeblobs() {
    assert_eq!(
        ::std::mem::size_of::<fcodeblobs>(),
        48usize,
        concat!("Size of: ", stringify!(fcodeblobs))
    );
    assert_eq!(
        ::std::mem::align_of::<fcodeblobs>(),
        8usize,
        concat!("Alignment of ", stringify!(fcodeblobs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fcodeblobs>())).f_cd_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fcodeblobs),
            "::",
            stringify!(f_cd_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fcodeblobs>())).f_hash_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fcodeblobs),
            "::",
            stringify!(f_hash_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fcodeblobs>())).f_cd_buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fcodeblobs),
            "::",
            stringify!(f_cd_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fcodeblobs>())).f_cd_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fcodeblobs),
            "::",
            stringify!(f_cd_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fcodeblobs>())).f_out_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fcodeblobs),
            "::",
            stringify!(f_out_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fcodeblobs>())).f_arch as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fcodeblobs),
            "::",
            stringify!(f_arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fcodeblobs>())).__padding as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(fcodeblobs),
            "::",
            stringify!(__padding)
        )
    );
}
pub type fcodeblobs_t = fcodeblobs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: size_t,
}
#[test]
fn bindgen_test_layout_fsignatures() {
    assert_eq!(
        ::std::mem::size_of::<fsignatures>(),
        24usize,
        concat!("Size of: ", stringify!(fsignatures))
    );
    assert_eq!(
        ::std::mem::align_of::<fsignatures>(),
        8usize,
        concat!("Alignment of ", stringify!(fsignatures))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsignatures>())).fs_file_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_file_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsignatures>())).fs_blob_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_blob_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsignatures>())).fs_blob_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_blob_size)
        )
    );
}
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: size_t,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_fchecklv() {
    assert_eq!(
        ::std::mem::size_of::<fchecklv>(),
        24usize,
        concat!("Size of: ", stringify!(fchecklv))
    );
    assert_eq!(
        ::std::mem::align_of::<fchecklv>(),
        8usize,
        concat!("Alignment of ", stringify!(fchecklv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fchecklv>())).lv_file_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_file_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fchecklv>())).lv_error_message_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_error_message_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fchecklv>())).lv_error_message as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_error_message)
        )
    );
}
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
#[test]
fn bindgen_test_layout_fstore() {
    assert_eq!(
        ::std::mem::size_of::<fstore>(),
        32usize,
        concat!("Size of: ", stringify!(fstore))
    );
    assert_eq!(
        ::std::mem::align_of::<fstore>(),
        8usize,
        concat!("Alignment of ", stringify!(fstore))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstore>())).fst_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstore>())).fst_posmode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_posmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstore>())).fst_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstore>())).fst_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstore>())).fst_bytesalloc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_bytesalloc)
        )
    );
}
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
#[test]
fn bindgen_test_layout_fpunchhole() {
    assert_eq!(
        ::std::mem::size_of::<fpunchhole>(),
        24usize,
        concat!("Size of: ", stringify!(fpunchhole))
    );
    assert_eq!(
        ::std::mem::align_of::<fpunchhole>(),
        8usize,
        concat!("Alignment of ", stringify!(fpunchhole))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpunchhole>())).fp_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpunchhole>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpunchhole>())).fp_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpunchhole>())).fp_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_length)
        )
    );
}
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
#[test]
fn bindgen_test_layout_ftrimactivefile() {
    assert_eq!(
        ::std::mem::size_of::<ftrimactivefile>(),
        16usize,
        concat!("Size of: ", stringify!(ftrimactivefile))
    );
    assert_eq!(
        ::std::mem::align_of::<ftrimactivefile>(),
        8usize,
        concat!("Alignment of ", stringify!(ftrimactivefile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftrimactivefile>())).fta_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ftrimactivefile),
            "::",
            stringify!(fta_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftrimactivefile>())).fta_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ftrimactivefile),
            "::",
            stringify!(fta_length)
        )
    );
}
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
#[test]
fn bindgen_test_layout_fspecread() {
    assert_eq!(
        ::std::mem::size_of::<fspecread>(),
        24usize,
        concat!("Size of: ", stringify!(fspecread))
    );
    assert_eq!(
        ::std::mem::align_of::<fspecread>(),
        8usize,
        concat!("Alignment of ", stringify!(fspecread))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspecread>())).fsr_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspecread>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspecread>())).fsr_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspecread>())).fsr_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_length)
        )
    );
}
pub type fspecread_t = fspecread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fbootstraptransfer {
    pub fbt_offset: off_t,
    pub fbt_length: size_t,
    pub fbt_buffer: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_fbootstraptransfer() {
    assert_eq!(
        ::std::mem::size_of::<fbootstraptransfer>(),
        24usize,
        concat!("Size of: ", stringify!(fbootstraptransfer))
    );
    assert_eq!(
        ::std::mem::align_of::<fbootstraptransfer>(),
        8usize,
        concat!("Alignment of ", stringify!(fbootstraptransfer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fbootstraptransfer>())).fbt_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fbootstraptransfer),
            "::",
            stringify!(fbt_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fbootstraptransfer>())).fbt_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fbootstraptransfer),
            "::",
            stringify!(fbt_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fbootstraptransfer>())).fbt_buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fbootstraptransfer),
            "::",
            stringify!(fbt_buffer)
        )
    );
}
pub type fbootstraptransfer_t = fbootstraptransfer;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[test]
fn bindgen_test_layout_log2phys() {
    assert_eq!(
        ::std::mem::size_of::<log2phys>(),
        20usize,
        concat!("Size of: ", stringify!(log2phys))
    );
    assert_eq!(
        ::std::mem::align_of::<log2phys>(),
        4usize,
        concat!("Alignment of ", stringify!(log2phys))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log2phys>())).l2p_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log2phys>())).l2p_contigbytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_contigbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log2phys>())).l2p_devoffset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_devoffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_init() -> filesec_t;
}
extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
pub type PrintfCallback = ::std::option::Option<
    unsafe extern "C" fn(str_: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
#[test]
fn bindgen_test_layout_ostat() {
    assert_eq!(
        ::std::mem::size_of::<ostat>(),
        96usize,
        concat!("Size of: ", stringify!(ostat))
    );
    assert_eq!(
        ::std::mem::align_of::<ostat>(),
        8usize,
        concat!("Alignment of ", stringify!(ostat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_nlink as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_uid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_gid as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_rdev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_size as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_atimespec as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_mtimespec as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_ctimespec as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_blksize as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_blocks as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_flags as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_gen as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_gen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atimespec as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtimespec as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctimespec as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_birthtimespec as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_birthtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_flags as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gen as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_lspare as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_lspare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_qspare as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_qspare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat64 {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[test]
fn bindgen_test_layout_stat64() {
    assert_eq!(
        ::std::mem::size_of::<stat64>(),
        144usize,
        concat!("Size of: ", stringify!(stat64))
    );
    assert_eq!(
        ::std::mem::align_of::<stat64>(),
        8usize,
        concat!("Alignment of ", stringify!(stat64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_nlink as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_rdev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_atimespec as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_mtimespec as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_ctimespec as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_birthtimespec as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_birthtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_blocks as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_blksize as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_flags as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_gen as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_lspare as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_lspare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_qspare as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_qspare)
        )
    );
}
extern "C" {
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstat$INODE64"]
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstat$INODE64"]
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_stat$INODE64"]
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(arg1: mode_t) -> mode_t;
}
extern "C" {
    pub fn fchmodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatat$INODE64"]
    pub fn fstatat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut stat,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatx_np$INODE64"]
    pub fn fstatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstatx_np$INODE64"]
    pub fn lstatx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifox_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statx_np$INODE64"]
    pub fn statx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatx64_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstatx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat64(arg1: ::std::os::raw::c_int, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __uint64_t,
    pub d_seekoff: __uint64_t,
    pub d_reclen: __uint16_t,
    pub d_namlen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 1024usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        1048usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_ino as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_seekoff as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_seekoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_reclen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_namlen as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_namlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_type as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_name as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __padding: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
#[test]
fn bindgen_test_layout_DIR() {
    assert_eq!(
        ::std::mem::size_of::<DIR>(),
        136usize,
        concat!("Size of: ", stringify!(DIR))
    );
    assert_eq!(
        ::std::mem::align_of::<DIR>(),
        8usize,
        concat!("Alignment of ", stringify!(DIR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_loc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_seek as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__padding as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_lock as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_td as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_td)
        )
    );
}
extern "C" {
    pub fn closedir(arg1: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_opendir$INODE64"]
    pub fn opendir(arg1: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_readdir$INODE64"]
    pub fn readdir(arg1: *mut DIR) -> *mut dirent;
}
extern "C" {
    #[link_name = "\u{1}_readdir_r$INODE64"]
    pub fn readdir_r(
        arg1: *mut DIR,
        arg2: *mut dirent,
        arg3: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rewinddir$INODE64"]
    pub fn rewinddir(arg1: *mut DIR);
}
extern "C" {
    #[link_name = "\u{1}_seekdir$INODE64"]
    pub fn seekdir(arg1: *mut DIR, arg2: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_telldir$INODE64"]
    pub fn telldir(arg1: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_fdopendir$INODE64"]
    pub fn fdopendir(arg1: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_alphasort$INODE64"]
    pub fn alphasort(arg1: *mut *const dirent, arg2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dirfd(dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scandir$INODE64"]
    pub fn scandir(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scandir_b$INODE64"]
    pub fn scandir_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect"]
    pub fn getdirentries(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___opendir2$INODE64"]
    pub fn __opendir2(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int)
        -> *mut DIR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_accessx_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<accessx_descriptor>(),
        16usize,
        concat!("Size of: ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<accessx_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accessx_descriptor>())).ad_name_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_name_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accessx_descriptor>())).ad_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accessx_descriptor>())).ad_pad as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_pad)
        )
    );
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: size_t,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: size_t,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: size_t,
        __offset: off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: size_t,
        __offset: off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pselect$1050"]
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_select$1050"]
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub type uuid_t = __darwin_uuid_t;
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: size_t,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: size_t,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval64 {
    pub tv_sec: __int64_t,
    pub tv_usec: __int64_t,
}
#[test]
fn bindgen_test_layout_timeval64() {
    assert_eq!(
        ::std::mem::size_of::<timeval64>(),
        16usize,
        concat!("Size of: ", stringify!(timeval64))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval64>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval64>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval64),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval64>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval64),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_clockinfo() {
    assert_eq!(
        ::std::mem::size_of::<clockinfo>(),
        20usize,
        concat!("Size of: ", stringify!(clockinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<clockinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(clockinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clockinfo>())).hz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(hz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clockinfo>())).tick as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clockinfo>())).tickadj as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(tickadj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clockinfo>())).stathz as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(stathz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clockinfo>())).profhz as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clockinfo),
            "::",
            stringify!(profhz)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
pub const RSysArch_R_SYS_ARCH_NONE: RSysArch = 0;
pub const RSysArch_R_SYS_ARCH_X86: RSysArch = 1;
pub const RSysArch_R_SYS_ARCH_ARM: RSysArch = 2;
pub const RSysArch_R_SYS_ARCH_PPC: RSysArch = 3;
pub const RSysArch_R_SYS_ARCH_M68K: RSysArch = 4;
pub const RSysArch_R_SYS_ARCH_JAVA: RSysArch = 5;
pub const RSysArch_R_SYS_ARCH_MIPS: RSysArch = 6;
pub const RSysArch_R_SYS_ARCH_SPARC: RSysArch = 7;
pub const RSysArch_R_SYS_ARCH_XAP: RSysArch = 8;
pub const RSysArch_R_SYS_ARCH_MSIL: RSysArch = 9;
pub const RSysArch_R_SYS_ARCH_OBJD: RSysArch = 10;
pub const RSysArch_R_SYS_ARCH_BF: RSysArch = 11;
pub const RSysArch_R_SYS_ARCH_SH: RSysArch = 12;
pub const RSysArch_R_SYS_ARCH_AVR: RSysArch = 13;
pub const RSysArch_R_SYS_ARCH_DALVIK: RSysArch = 14;
pub const RSysArch_R_SYS_ARCH_Z80: RSysArch = 15;
pub const RSysArch_R_SYS_ARCH_ARC: RSysArch = 16;
pub const RSysArch_R_SYS_ARCH_I8080: RSysArch = 17;
pub const RSysArch_R_SYS_ARCH_RAR: RSysArch = 18;
pub const RSysArch_R_SYS_ARCH_8051: RSysArch = 19;
pub const RSysArch_R_SYS_ARCH_TMS320: RSysArch = 20;
pub const RSysArch_R_SYS_ARCH_EBC: RSysArch = 21;
pub const RSysArch_R_SYS_ARCH_H8300: RSysArch = 22;
pub const RSysArch_R_SYS_ARCH_CR16: RSysArch = 23;
pub const RSysArch_R_SYS_ARCH_V850: RSysArch = 24;
pub const RSysArch_R_SYS_ARCH_S390: RSysArch = 25;
pub const RSysArch_R_SYS_ARCH_XCORE: RSysArch = 26;
pub const RSysArch_R_SYS_ARCH_PROPELLER: RSysArch = 27;
pub const RSysArch_R_SYS_ARCH_MSP430: RSysArch = 28;
pub const RSysArch_R_SYS_ARCH_CRIS: RSysArch = 29;
pub const RSysArch_R_SYS_ARCH_HPPA: RSysArch = 30;
pub const RSysArch_R_SYS_ARCH_V810: RSysArch = 31;
pub const RSysArch_R_SYS_ARCH_LM32: RSysArch = 32;
pub const RSysArch_R_SYS_ARCH_RISCV: RSysArch = 33;
pub type RSysArch = ::std::os::raw::c_uint;
pub type RRef = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RStrBuf {
    pub buf: [::std::os::raw::c_char; 32usize],
    pub len: size_t,
    pub ptr: *mut ::std::os::raw::c_char,
    pub ptrlen: size_t,
    pub weakref: bool,
}
#[test]
fn bindgen_test_layout_RStrBuf() {
    assert_eq!(
        ::std::mem::size_of::<RStrBuf>(),
        64usize,
        concat!("Size of: ", stringify!(RStrBuf))
    );
    assert_eq!(
        ::std::mem::align_of::<RStrBuf>(),
        8usize,
        concat!("Alignment of ", stringify!(RStrBuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RStrBuf>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RStrBuf),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RStrBuf>())).len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RStrBuf),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RStrBuf>())).ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RStrBuf),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RStrBuf>())).ptrlen as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RStrBuf),
            "::",
            stringify!(ptrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RStrBuf>())).weakref as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RStrBuf),
            "::",
            stringify!(weakref)
        )
    );
}
extern "C" {
    pub fn r_strbuf_new(s: *const ::std::os::raw::c_char) -> *mut RStrBuf;
}
extern "C" {
    pub fn r_strbuf_set(
        sb: *mut RStrBuf,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strbuf_slice(
        sb: *mut RStrBuf,
        from: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_strbuf_setbin(
        sb: *mut RStrBuf,
        s: *const ::std::os::raw::c_uchar,
        len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn r_strbuf_getbin(
        sb: *mut RStrBuf,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_strbuf_setf(
        sb: *mut RStrBuf,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strbuf_vsetf(
        sb: *mut RStrBuf,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strbuf_append(sb: *mut RStrBuf, s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_strbuf_append_n(sb: *mut RStrBuf, s: *const ::std::os::raw::c_char, l: size_t)
        -> bool;
}
extern "C" {
    pub fn r_strbuf_prepend(sb: *mut RStrBuf, s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_strbuf_appendf(sb: *mut RStrBuf, fmt: *const ::std::os::raw::c_char, ...) -> bool;
}
extern "C" {
    pub fn r_strbuf_vappendf(
        sb: *mut RStrBuf,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    pub fn r_strbuf_get(sb: *mut RStrBuf) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strbuf_drain(sb: *mut RStrBuf) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strbuf_drain_nofree(sb: *mut RStrBuf) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strbuf_length(sb: *mut RStrBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_strbuf_size(sb: *mut RStrBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_strbuf_free(sb: *mut RStrBuf);
}
extern "C" {
    pub fn r_strbuf_fini(sb: *mut RStrBuf);
}
extern "C" {
    pub fn r_strbuf_init(sb: *mut RStrBuf);
}
extern "C" {
    pub fn r_strbuf_initf(
        sb: *mut RStrBuf,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strbuf_copy(dst: *mut RStrBuf, src: *mut RStrBuf) -> bool;
}
extern "C" {
    pub fn r_strbuf_equals(sa: *mut RStrBuf, sb: *mut RStrBuf) -> bool;
}
extern "C" {
    pub fn r_strbuf_reserve(sb: *mut RStrBuf, len: size_t) -> bool;
}
extern "C" {
    pub fn r_strbuf_is_empty(sb: *mut RStrBuf) -> bool;
}
extern "C" {
    pub fn r_strbuf_setptr(
        sb: *mut RStrBuf,
        p: *mut ::std::os::raw::c_char,
        l: ::std::os::raw::c_int,
    ) -> bool;
}
pub const PJEncodingStr_PJ_ENCODING_STR_DEFAULT: PJEncodingStr = 0;
pub const PJEncodingStr_PJ_ENCODING_STR_BASE64: PJEncodingStr = 1;
pub const PJEncodingStr_PJ_ENCODING_STR_HEX: PJEncodingStr = 2;
pub const PJEncodingStr_PJ_ENCODING_STR_ARRAY: PJEncodingStr = 3;
pub const PJEncodingStr_PJ_ENCODING_STR_STRIP: PJEncodingStr = 4;
pub type PJEncodingStr = ::std::os::raw::c_uint;
pub const PJEncodingNum_PJ_ENCODING_NUM_DEFAULT: PJEncodingNum = 0;
pub const PJEncodingNum_PJ_ENCODING_NUM_STR: PJEncodingNum = 1;
pub const PJEncodingNum_PJ_ENCODING_NUM_HEX: PJEncodingNum = 2;
pub type PJEncodingNum = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pj_t {
    pub sb: RStrBuf,
    pub is_first: bool,
    pub is_key: bool,
    pub braces: [::std::os::raw::c_char; 128usize],
    pub level: ::std::os::raw::c_int,
    pub str_encoding: PJEncodingStr,
    pub num_encoding: PJEncodingNum,
}
#[test]
fn bindgen_test_layout_pj_t() {
    assert_eq!(
        ::std::mem::size_of::<pj_t>(),
        208usize,
        concat!("Size of: ", stringify!(pj_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pj_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pj_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_t>())).sb as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pj_t), "::", stringify!(sb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_t>())).is_first as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_t),
            "::",
            stringify!(is_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_t>())).is_key as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_t),
            "::",
            stringify!(is_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_t>())).braces as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_t),
            "::",
            stringify!(braces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_t>())).level as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_t),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_t>())).str_encoding as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_t),
            "::",
            stringify!(str_encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pj_t>())).num_encoding as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(pj_t),
            "::",
            stringify!(num_encoding)
        )
    );
}
pub type PJ = pj_t;
extern "C" {
    pub fn pj_new() -> *mut PJ;
}
extern "C" {
    pub fn pj_new_with_encoding(
        str_encoding: PJEncodingStr,
        num_encoding: PJEncodingNum,
    ) -> *mut PJ;
}
extern "C" {
    pub fn pj_free(j: *mut PJ);
}
extern "C" {
    pub fn pj_reset(j: *mut PJ);
}
extern "C" {
    pub fn pj_drain(j: *mut PJ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_string(pj: *mut PJ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pj_end(j: *mut PJ) -> *mut PJ;
}
extern "C" {
    pub fn pj_raw(j: *mut PJ, k: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn pj_o(j: *mut PJ) -> *mut PJ;
}
extern "C" {
    pub fn pj_a(j: *mut PJ) -> *mut PJ;
}
extern "C" {
    pub fn pj_k(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_knull(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_kn(
        j: *mut PJ,
        k: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulonglong,
    ) -> *mut PJ;
}
extern "C" {
    pub fn pj_kN(
        j: *mut PJ,
        k: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_longlong,
    ) -> *mut PJ;
}
extern "C" {
    pub fn pj_ks(
        j: *mut PJ,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> *mut PJ;
}
extern "C" {
    pub fn pj_ka(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_ko(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_ki(j: *mut PJ, k: *const ::std::os::raw::c_char, d: ::std::os::raw::c_int)
        -> *mut PJ;
}
extern "C" {
    pub fn pj_kd(j: *mut PJ, k: *const ::std::os::raw::c_char, d: f64) -> *mut PJ;
}
extern "C" {
    pub fn pj_kf(j: *mut PJ, k: *const ::std::os::raw::c_char, d: f32) -> *mut PJ;
}
extern "C" {
    pub fn pj_kb(j: *mut PJ, k: *const ::std::os::raw::c_char, v: bool) -> *mut PJ;
}
extern "C" {
    pub fn pj_null(j: *mut PJ) -> *mut PJ;
}
extern "C" {
    pub fn pj_r(j: *mut PJ, v: *const ::std::os::raw::c_uchar, v_len: size_t) -> *mut PJ;
}
extern "C" {
    pub fn pj_kr(
        j: *mut PJ,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_uchar,
        v_len: size_t,
    ) -> *mut PJ;
}
extern "C" {
    pub fn pj_s(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_j(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_se(j: *mut PJ, k: *const ::std::os::raw::c_char) -> *mut PJ;
}
extern "C" {
    pub fn pj_ne(j: *mut PJ, n: ::std::os::raw::c_ulonglong) -> *mut PJ;
}
extern "C" {
    pub fn pj_n(j: *mut PJ, n: ::std::os::raw::c_ulonglong) -> *mut PJ;
}
extern "C" {
    pub fn pj_N(j: *mut PJ, n: ::std::os::raw::c_longlong) -> *mut PJ;
}
extern "C" {
    pub fn pj_i(j: *mut PJ, d: ::std::os::raw::c_int) -> *mut PJ;
}
extern "C" {
    pub fn pj_d(j: *mut PJ, d: f64) -> *mut PJ;
}
extern "C" {
    pub fn pj_f(j: *mut PJ, d: f32) -> *mut PJ;
}
extern "C" {
    pub fn pj_b(j: *mut PJ, v: bool) -> *mut PJ;
}
extern "C" {
    pub fn r_flist_resize(
        it: *mut *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type SdbListFree =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type SdbListComparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ls_iter_t {
    pub data: *mut ::std::os::raw::c_void,
    pub n: *mut ls_iter_t,
    pub p: *mut ls_iter_t,
}
#[test]
fn bindgen_test_layout_ls_iter_t() {
    assert_eq!(
        ::std::mem::size_of::<ls_iter_t>(),
        24usize,
        concat!("Size of: ", stringify!(ls_iter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ls_iter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ls_iter_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_iter_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_iter_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_iter_t>())).n as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_iter_t),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_iter_t>())).p as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_iter_t),
            "::",
            stringify!(p)
        )
    );
}
pub type SdbListIter = ls_iter_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ls_t {
    pub length: size_t,
    pub head: *mut SdbListIter,
    pub tail: *mut SdbListIter,
    pub free: SdbListFree,
    pub cmp: SdbListComparator,
    pub sorted: bool,
}
#[test]
fn bindgen_test_layout_ls_t() {
    assert_eq!(
        ::std::mem::size_of::<ls_t>(),
        48usize,
        concat!("Size of: ", stringify!(ls_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ls_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ls_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).head as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).tail as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).free as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).cmp as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ls_t), "::", stringify!(cmp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).sorted as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(sorted)
        )
    );
}
pub type SdbList = ls_t;
extern "C" {
    pub fn ls_new() -> *mut SdbList;
}
extern "C" {
    pub fn ls_newf(freefn: SdbListFree) -> *mut SdbList;
}
extern "C" {
    pub fn ls_append(list: *mut SdbList, data: *mut ::std::os::raw::c_void) -> *mut SdbListIter;
}
extern "C" {
    pub fn ls_prepend(list: *mut SdbList, data: *mut ::std::os::raw::c_void) -> *mut SdbListIter;
}
extern "C" {
    pub fn ls_sort(list: *mut SdbList, cmp: SdbListComparator) -> bool;
}
extern "C" {
    pub fn ls_merge_sort(list: *mut SdbList, cmp: SdbListComparator) -> bool;
}
extern "C" {
    pub fn ls_delete(list: *mut SdbList, iter: *mut SdbListIter);
}
extern "C" {
    pub fn ls_delete_data(list: *mut SdbList, ptr: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn ls_iter_init(iter: *mut SdbListIter, list: *mut SdbList);
}
extern "C" {
    pub fn ls_destroy(list: *mut SdbList);
}
extern "C" {
    pub fn ls_free(list: *mut SdbList);
}
extern "C" {
    pub fn ls_item_new(data: *mut ::std::os::raw::c_void) -> *mut SdbListIter;
}
extern "C" {
    pub fn ls_unlink(list: *mut SdbList, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ls_split(list: *mut SdbList, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ls_split_iter(list: *mut SdbList, iter: *mut SdbListIter);
}
extern "C" {
    pub fn ls_get_n(list: *mut SdbList, n: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ls_get_top(list: *mut SdbList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ls_pop(list: *mut SdbList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ls_reverse(list: *mut SdbList);
}
extern "C" {
    pub fn ls_clone(list: *mut SdbList) -> *mut SdbList;
}
extern "C" {
    pub fn ls_join(first: *mut SdbList, second: *mut SdbList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ls_del_n(list: *mut SdbList, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ls_insert(
        list: *mut SdbList,
        n: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut SdbListIter;
}
extern "C" {
    pub fn ls_pop_head(list: *mut SdbList) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pp_kv {
    pub key: *mut ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_void,
    pub key_len: ::std::os::raw::c_uint,
    pub value_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ht_pp_kv() {
    assert_eq!(
        ::std::mem::size_of::<ht_pp_kv>(),
        24usize,
        concat!("Size of: ", stringify!(ht_pp_kv))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pp_kv>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pp_kv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_kv>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_kv),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_kv>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_kv),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_kv>())).key_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_kv),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_kv>())).value_len as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_kv),
            "::",
            stringify!(value_len)
        )
    );
}
pub type HtPPKv = ht_pp_kv;
pub type HtPPKvFreeFunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut HtPPKv)>;
pub type HtPPDupKey = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type HtPPDupValue = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type HtPPCalcSizeK = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type HtPPCalcSizeV = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type HtPPHashFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type HtPPListComparator = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type HtPPForeachCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pp_bucket_t {
    pub arr: *mut HtPPKv,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ht_pp_bucket_t() {
    assert_eq!(
        ::std::mem::size_of::<ht_pp_bucket_t>(),
        16usize,
        concat!("Size of: ", stringify!(ht_pp_bucket_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pp_bucket_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pp_bucket_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_bucket_t>())).arr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_bucket_t),
            "::",
            stringify!(arr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_bucket_t>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_bucket_t),
            "::",
            stringify!(count)
        )
    );
}
pub type HtPPBucket = ht_pp_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pp_options_t {
    pub cmp: HtPPListComparator,
    pub hashfn: HtPPHashFunction,
    pub dupkey: HtPPDupKey,
    pub dupvalue: HtPPDupValue,
    pub calcsizeK: HtPPCalcSizeK,
    pub calcsizeV: HtPPCalcSizeV,
    pub freefn: HtPPKvFreeFunc,
    pub elem_size: size_t,
}
#[test]
fn bindgen_test_layout_ht_pp_options_t() {
    assert_eq!(
        ::std::mem::size_of::<ht_pp_options_t>(),
        64usize,
        concat!("Size of: ", stringify!(ht_pp_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pp_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pp_options_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_options_t>())).cmp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_options_t>())).hashfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(hashfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_options_t>())).dupkey as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(dupkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_options_t>())).dupvalue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(dupvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_options_t>())).calcsizeK as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(calcsizeK)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_options_t>())).calcsizeV as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(calcsizeV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_options_t>())).freefn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(freefn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_options_t>())).elem_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_options_t),
            "::",
            stringify!(elem_size)
        )
    );
}
pub type HtPPOptions = ht_pp_options_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pp_t {
    pub size: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_uint,
    pub table: *mut HtPPBucket,
    pub prime_idx: ::std::os::raw::c_uint,
    pub opt: HtPPOptions,
}
#[test]
fn bindgen_test_layout_ht_pp_t() {
    assert_eq!(
        ::std::mem::size_of::<ht_pp_t>(),
        88usize,
        concat!("Size of: ", stringify!(ht_pp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pp_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_t>())).count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_t>())).table as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_t),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_t>())).prime_idx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_t),
            "::",
            stringify!(prime_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pp_t>())).opt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pp_t),
            "::",
            stringify!(opt)
        )
    );
}
pub type HtPP = ht_pp_t;
extern "C" {
    pub fn ht_pp_new_opt(opt: *mut HtPPOptions) -> *mut HtPP;
}
extern "C" {
    pub fn ht_pp_free(ht: *mut HtPP);
}
extern "C" {
    pub fn ht_pp_insert(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_pp_update(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_pp_update_key(
        ht: *mut HtPP,
        old_key: *const ::std::os::raw::c_void,
        new_key: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_pp_delete(ht: *mut HtPP, key: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn ht_pp_find(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_void,
        found: *mut bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ht_pp_foreach(ht: *mut HtPP, cb: HtPPForeachCallback, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ht_pp_find_kv(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_void,
        found: *mut bool,
    ) -> *mut HtPPKv;
}
extern "C" {
    pub fn ht_pp_insert_kv(ht: *mut HtPP, kv: *mut HtPPKv, update: bool) -> bool;
}
extern "C" {
    pub fn ht_pp_new0() -> *mut HtPP;
}
extern "C" {
    pub fn ht_pp_new(
        valdup: HtPPDupValue,
        pair_free: HtPPKvFreeFunc,
        valueSize: HtPPCalcSizeV,
    ) -> *mut HtPP;
}
extern "C" {
    pub fn ht_pp_new_size(
        initial_size: ::std::os::raw::c_uint,
        valdup: HtPPDupValue,
        pair_free: HtPPKvFreeFunc,
        valueSize: HtPPCalcSizeV,
    ) -> *mut HtPP;
}
#[doc = " keyvalue pair"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdb_kv {
    pub base: HtPPKv,
    pub cas: ::std::os::raw::c_uint,
    pub expire: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_sdb_kv() {
    assert_eq!(
        ::std::mem::size_of::<sdb_kv>(),
        40usize,
        concat!("Size of: ", stringify!(sdb_kv))
    );
    assert_eq!(
        ::std::mem::align_of::<sdb_kv>(),
        8usize,
        concat!("Alignment of ", stringify!(sdb_kv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_kv>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_kv),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_kv>())).cas as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_kv),
            "::",
            stringify!(cas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_kv>())).expire as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_kv),
            "::",
            stringify!(expire)
        )
    );
}
#[doc = " keyvalue pair"]
pub type SdbKv = sdb_kv;
extern "C" {
    pub fn sdbkv_new2(
        k: *const ::std::os::raw::c_char,
        kl: ::std::os::raw::c_int,
        v: *const ::std::os::raw::c_char,
        vl: ::std::os::raw::c_int,
    ) -> *mut SdbKv;
}
extern "C" {
    pub fn sdbkv_new(
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> *mut SdbKv;
}
extern "C" {
    pub fn sdbkv_free(kv: *mut SdbKv);
}
extern "C" {
    pub fn sdb_hash(key: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sdb_ht_new() -> *mut HtPP;
}
extern "C" {
    pub fn sdb_ht_free(ht: *mut HtPP);
}
extern "C" {
    pub fn sdb_ht_insert(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_ht_insert_kvp(ht: *mut HtPP, kvp: *mut SdbKv, update: bool) -> bool;
}
extern "C" {
    pub fn sdb_ht_update(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_ht_delete(ht: *mut HtPP, key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_ht_find(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_char,
        found: *mut bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_ht_find_kvp(
        ht: *mut HtPP,
        key: *const ::std::os::raw::c_char,
        found: *mut bool,
    ) -> *mut SdbKv;
}
pub type dicti = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dictkv {
    pub k: dicti,
    pub v: dicti,
    pub u: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_dictkv() {
    assert_eq!(
        ::std::mem::size_of::<dictkv>(),
        24usize,
        concat!("Size of: ", stringify!(dictkv))
    );
    assert_eq!(
        ::std::mem::align_of::<dictkv>(),
        8usize,
        concat!("Alignment of ", stringify!(dictkv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictkv>())).k as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dictkv), "::", stringify!(k))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictkv>())).v as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(dictkv), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dictkv>())).u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(dictkv), "::", stringify!(u))
    );
}
pub type dict_freecb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type dictkv_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut dictkv,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dict {
    pub table: *mut *mut ::std::os::raw::c_void,
    pub f: dict_freecb,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_dict() {
    assert_eq!(
        ::std::mem::size_of::<dict>(),
        24usize,
        concat!("Size of: ", stringify!(dict))
    );
    assert_eq!(
        ::std::mem::align_of::<dict>(),
        8usize,
        concat!("Alignment of ", stringify!(dict))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dict>())).table as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dict),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dict>())).f as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(dict), "::", stringify!(f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dict>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dict),
            "::",
            stringify!(size)
        )
    );
}
pub type SdbMini = dict;
extern "C" {
    pub fn dict_new(size: ::std::os::raw::c_uint, f: dict_freecb) -> *mut dict;
}
extern "C" {
    pub fn dict_free(arg1: *mut dict);
}
extern "C" {
    pub fn dict_init(m: *mut dict, arg1: ::std::os::raw::c_uint, f: dict_freecb) -> bool;
}
extern "C" {
    pub fn dict_fini(m: *mut dict);
}
extern "C" {
    pub fn dict_stats(m: *mut dict);
}
extern "C" {
    pub fn dict_hash(s: *const ::std::os::raw::c_char) -> dicti;
}
extern "C" {
    pub fn dict_set(m: *mut dict, k: dicti, v: dicti, u: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn dict_getr(m: *mut dict, k: dicti) -> *mut dictkv;
}
extern "C" {
    pub fn dict_get(m: *mut dict, k: dicti) -> dicti;
}
extern "C" {
    pub fn dict_getu(m: *mut dict, k: dicti) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dict_add(m: *mut dict, k: dicti, v: dicti, u: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn dict_del(m: *mut dict, k: dicti) -> bool;
}
extern "C" {
    pub fn dict_foreach(m: *mut dict, cb: dictkv_cb, u: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdb {
    pub map: *mut ::std::os::raw::c_char,
    pub fd: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_uint,
    pub loop_: ::std::os::raw::c_uint,
    pub khash: ::std::os::raw::c_uint,
    pub kpos: ::std::os::raw::c_uint,
    pub hpos: ::std::os::raw::c_uint,
    pub hslots: ::std::os::raw::c_uint,
    pub dpos: ::std::os::raw::c_uint,
    pub dlen: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cdb() {
    assert_eq!(
        ::std::mem::size_of::<cdb>(),
        48usize,
        concat!("Size of: ", stringify!(cdb))
    );
    assert_eq!(
        ::std::mem::align_of::<cdb>(),
        8usize,
        concat!("Alignment of ", stringify!(cdb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb>())).map as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb>())).fd as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(fd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb>())).size as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb>())).loop_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb),
            "::",
            stringify!(loop_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb>())).khash as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb),
            "::",
            stringify!(khash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb>())).kpos as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(kpos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb>())).hpos as *const _ as usize },
        28usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(hpos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb>())).hslots as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb),
            "::",
            stringify!(hslots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb>())).dpos as *const _ as usize },
        36usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(dpos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb>())).dlen as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(cdb), "::", stringify!(dlen))
    );
}
extern "C" {
    pub fn cdb_getkvlen(
        db: *mut cdb,
        klen: *mut ::std::os::raw::c_uint,
        vlen: *mut ::std::os::raw::c_uint,
        pos: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn cdb_free(arg1: *mut cdb);
}
extern "C" {
    pub fn cdb_init(arg1: *mut cdb, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn cdb_findstart(arg1: *mut cdb);
}
extern "C" {
    pub fn cdb_read(
        arg1: *mut cdb,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn cdb_findnext(
        arg1: *mut cdb,
        u: ::std::os::raw::c_uint,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type BufferOp = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffer {
    pub x: *mut ::std::os::raw::c_char,
    pub p: ::std::os::raw::c_uint,
    pub n: ::std::os::raw::c_uint,
    pub fd: ::std::os::raw::c_int,
    pub op: BufferOp,
}
#[test]
fn bindgen_test_layout_buffer() {
    assert_eq!(
        ::std::mem::size_of::<buffer>(),
        32usize,
        concat!("Size of: ", stringify!(buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffer>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(buffer), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffer>())).p as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(buffer), "::", stringify!(p))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffer>())).n as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(buffer), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffer>())).fd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(buffer),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffer>())).op as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(buffer),
            "::",
            stringify!(op)
        )
    );
}
extern "C" {
    pub fn buffer_init(
        arg1: *mut buffer,
        arg2: BufferOp,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn buffer_flush(arg1: *mut buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_put(
        arg1: *mut buffer,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_putalign(
        arg1: *mut buffer,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_putflush(
        arg1: *mut buffer,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_get(
        arg1: *mut buffer,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_bget(
        arg1: *mut buffer,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_feed(arg1: *mut buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_peek(arg1: *mut buffer) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn buffer_seek(arg1: *mut buffer, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn buffer_copy(arg1: *mut buffer, arg2: *mut buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut buffer_0: *mut buffer;
}
extern "C" {
    pub static mut buffer_0small: *mut buffer;
}
extern "C" {
    pub static mut buffer_1: *mut buffer;
}
extern "C" {
    pub static mut buffer_1small: *mut buffer;
}
extern "C" {
    pub static mut buffer_2: *mut buffer;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdb_hp {
    pub h: ::std::os::raw::c_uint,
    pub p: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cdb_hp() {
    assert_eq!(
        ::std::mem::size_of::<cdb_hp>(),
        8usize,
        concat!("Size of: ", stringify!(cdb_hp))
    );
    assert_eq!(
        ::std::mem::align_of::<cdb_hp>(),
        4usize,
        concat!("Alignment of ", stringify!(cdb_hp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_hp>())).h as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(cdb_hp), "::", stringify!(h))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_hp>())).p as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(cdb_hp), "::", stringify!(p))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdb_hplist {
    pub hp: [cdb_hp; 1000usize],
    pub next: *mut cdb_hplist,
    pub num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cdb_hplist() {
    assert_eq!(
        ::std::mem::size_of::<cdb_hplist>(),
        8016usize,
        concat!("Size of: ", stringify!(cdb_hplist))
    );
    assert_eq!(
        ::std::mem::align_of::<cdb_hplist>(),
        8usize,
        concat!("Alignment of ", stringify!(cdb_hplist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_hplist>())).hp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_hplist),
            "::",
            stringify!(hp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_hplist>())).next as *const _ as usize },
        8000usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_hplist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_hplist>())).num as *const _ as usize },
        8008usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_hplist),
            "::",
            stringify!(num)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdb_make {
    pub bspace: [::std::os::raw::c_char; 8192usize],
    pub final_: [::std::os::raw::c_char; 1024usize],
    pub count: [::std::os::raw::c_uint; 256usize],
    pub start: [::std::os::raw::c_uint; 256usize],
    pub head: *mut cdb_hplist,
    pub split: *mut cdb_hp,
    pub hash: *mut cdb_hp,
    pub numentries: ::std::os::raw::c_uint,
    pub memsize: ::std::os::raw::c_uint,
    pub b: buffer,
    pub pos: ::std::os::raw::c_uint,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cdb_make() {
    assert_eq!(
        ::std::mem::size_of::<cdb_make>(),
        11336usize,
        concat!("Size of: ", stringify!(cdb_make))
    );
    assert_eq!(
        ::std::mem::align_of::<cdb_make>(),
        8usize,
        concat!("Alignment of ", stringify!(cdb_make))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).bspace as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(bspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).final_ as *const _ as usize },
        8192usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(final_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).count as *const _ as usize },
        9216usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).start as *const _ as usize },
        10240usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).head as *const _ as usize },
        11264usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).split as *const _ as usize },
        11272usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(split)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).hash as *const _ as usize },
        11280usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).numentries as *const _ as usize },
        11288usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(numentries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).memsize as *const _ as usize },
        11292usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(memsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).b as *const _ as usize },
        11296usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).pos as *const _ as usize },
        11328usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cdb_make>())).fd as *const _ as usize },
        11332usize,
        concat!(
            "Offset of field: ",
            stringify!(cdb_make),
            "::",
            stringify!(fd)
        )
    );
}
extern "C" {
    pub fn cdb_make_start(
        arg1: *mut cdb_make,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cdb_make_addbegin(
        arg1: *mut cdb_make,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cdb_make_addend(
        arg1: *mut cdb_make,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cdb_make_add(
        arg1: *mut cdb_make,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cdb_make_finish(arg1: *mut cdb_make) -> ::std::os::raw::c_int;
}
pub type GperfForeachCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdb_gperf_t {
    pub name: *const ::std::os::raw::c_char,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(k: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(k: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_uint,
    >,
    pub foreach: ::std::option::Option<
        unsafe extern "C" fn(cb: GperfForeachCallback, user: *mut ::std::os::raw::c_void) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_sdb_gperf_t() {
    assert_eq!(
        ::std::mem::size_of::<sdb_gperf_t>(),
        32usize,
        concat!("Size of: ", stringify!(sdb_gperf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdb_gperf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sdb_gperf_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_gperf_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_gperf_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_gperf_t>())).get as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_gperf_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_gperf_t>())).hash as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_gperf_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_gperf_t>())).foreach as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_gperf_t),
            "::",
            stringify!(foreach)
        )
    );
}
pub type SdbGperf = sdb_gperf_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdb_t {
    pub dir: *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub fd: ::std::os::raw::c_int,
    pub refs: ::std::os::raw::c_int,
    pub lock: ::std::os::raw::c_int,
    pub journal: ::std::os::raw::c_int,
    pub db: cdb,
    pub m: cdb_make,
    pub ht: *mut HtPP,
    pub eod: ::std::os::raw::c_uint,
    pub pos: ::std::os::raw::c_uint,
    pub gp: *mut SdbGperf,
    pub fdump: ::std::os::raw::c_int,
    pub ndump: *mut ::std::os::raw::c_char,
    pub expire: ::std::os::raw::c_ulonglong,
    pub last: ::std::os::raw::c_ulonglong,
    pub options: ::std::os::raw::c_int,
    pub ns_lock: ::std::os::raw::c_int,
    pub ns: *mut SdbList,
    pub hooks: *mut SdbList,
    pub tmpkv: SdbKv,
    pub depth: ::std::os::raw::c_uint,
    pub timestamped: bool,
    pub mht: SdbMini,
}
#[test]
fn bindgen_test_layout_sdb_t() {
    assert_eq!(
        ::std::mem::size_of::<sdb_t>(),
        11576usize,
        concat!("Size of: ", stringify!(sdb_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdb_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sdb_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).dir as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).fd as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(fd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).refs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).lock as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).journal as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(journal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).db as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(db))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).m as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(m))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).ht as *const _ as usize },
        11424usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(ht))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).eod as *const _ as usize },
        11432usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(eod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).pos as *const _ as usize },
        11436usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).gp as *const _ as usize },
        11440usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(gp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).fdump as *const _ as usize },
        11448usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(fdump)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).ndump as *const _ as usize },
        11456usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(ndump)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).expire as *const _ as usize },
        11464usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(expire)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).last as *const _ as usize },
        11472usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).options as *const _ as usize },
        11480usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).ns_lock as *const _ as usize },
        11484usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(ns_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).ns as *const _ as usize },
        11488usize,
        concat!("Offset of field: ", stringify!(sdb_t), "::", stringify!(ns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).hooks as *const _ as usize },
        11496usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(hooks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).tmpkv as *const _ as usize },
        11504usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(tmpkv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).depth as *const _ as usize },
        11544usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).timestamped as *const _ as usize },
        11548usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(timestamped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_t>())).mht as *const _ as usize },
        11552usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_t),
            "::",
            stringify!(mht)
        )
    );
}
pub type Sdb = sdb_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdb_ns_t {
    pub name: *mut ::std::os::raw::c_char,
    pub hash: ::std::os::raw::c_uint,
    pub sdb: *mut Sdb,
}
#[test]
fn bindgen_test_layout_sdb_ns_t() {
    assert_eq!(
        ::std::mem::size_of::<sdb_ns_t>(),
        24usize,
        concat!("Size of: ", stringify!(sdb_ns_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdb_ns_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sdb_ns_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_ns_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_ns_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_ns_t>())).hash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_ns_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_ns_t>())).sdb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_ns_t),
            "::",
            stringify!(sdb)
        )
    );
}
pub type SdbNs = sdb_ns_t;
extern "C" {
    pub fn sdb_new0() -> *mut Sdb;
}
extern "C" {
    pub fn sdb_new(
        path: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        lock: ::std::os::raw::c_int,
    ) -> *mut Sdb;
}
extern "C" {
    pub fn sdb_open(s: *mut Sdb, file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_open_gperf(s: *mut Sdb, g: *mut SdbGperf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_close(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_config(s: *mut Sdb, options: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sdb_free(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_file(s: *mut Sdb, dir: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sdb_merge(d: *mut Sdb, s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_count(s: *mut Sdb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_reset(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_setup(s: *mut Sdb, options: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sdb_drain(arg1: *mut Sdb, arg2: *mut Sdb);
}
extern "C" {
    pub fn sdb_copy(src: *mut Sdb, dst: *mut Sdb);
}
extern "C" {
    pub fn sdb_stats(
        s: *mut Sdb,
        disk: *mut ::std::os::raw::c_uint,
        mem: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_dump_hasnext(s: *mut Sdb) -> bool;
}
pub type SdbForeachCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> bool,
>;
extern "C" {
    pub fn sdb_foreach(
        s: *mut Sdb,
        cb: SdbForeachCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sdb_foreach_list(s: *mut Sdb, sorted: bool) -> *mut SdbList;
}
extern "C" {
    pub fn sdb_foreach_list_filter(
        s: *mut Sdb,
        filter: SdbForeachCallback,
        sorted: bool,
    ) -> *mut SdbList;
}
extern "C" {
    pub fn sdb_foreach_match(
        s: *mut Sdb,
        expr: *const ::std::os::raw::c_char,
        sorted: bool,
    ) -> *mut SdbList;
}
extern "C" {
    pub fn sdb_query(s: *mut Sdb, cmd: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_queryf(
        s: *mut Sdb,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_query_lines(
        s: *mut Sdb,
        cmd: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_querys(
        s: *mut Sdb,
        buf: *mut ::std::os::raw::c_char,
        len: size_t,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_querysf(
        s: *mut Sdb,
        buf: *mut ::std::os::raw::c_char,
        buflen: size_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_query_file(
        s: *mut Sdb,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_exists(arg1: *mut Sdb, key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_remove(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_unset(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_unset_like(s: *mut Sdb, k: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_like(
        s: *mut Sdb,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
        cb: SdbForeachCallback,
    ) -> *mut *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdb_diff_t {
    pub path: *const SdbList,
    pub k: *const ::std::os::raw::c_char,
    pub v: *const ::std::os::raw::c_char,
    pub add: bool,
}
#[test]
fn bindgen_test_layout_sdb_diff_t() {
    assert_eq!(
        ::std::mem::size_of::<sdb_diff_t>(),
        32usize,
        concat!("Size of: ", stringify!(sdb_diff_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sdb_diff_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sdb_diff_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_diff_t>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_diff_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_diff_t>())).k as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_diff_t),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_diff_t>())).v as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_diff_t),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sdb_diff_t>())).add as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sdb_diff_t),
            "::",
            stringify!(add)
        )
    );
}
pub type SdbDiff = sdb_diff_t;
extern "C" {
    pub fn sdb_diff_format(
        str_: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        diff: *const SdbDiff,
    ) -> ::std::os::raw::c_int;
}
pub type SdbDiffCallback = ::std::option::Option<
    unsafe extern "C" fn(diff: *const SdbDiff, user: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn sdb_diff(
        a: *mut Sdb,
        b: *mut Sdb,
        cb: SdbDiffCallback,
        cb_user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sdb_get(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_get_len(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        vlen: *mut ::std::os::raw::c_int,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_const_get(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_const_get_len(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        vlen: *mut ::std::os::raw::c_int,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_set(
        arg1: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_set_owned(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_concat(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_uncat(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_add(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_sync(arg1: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_num_exists(arg1: *mut Sdb, key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_num_base(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_num_get(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_num_set(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_num_add(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_num_inc(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_num_dec(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_num_min(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_num_max(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_ptr_set(
        db: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_void,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_ptr_get(
        db: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sdb_disk_create(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_disk_insert(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_disk_finish(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_disk_unlink(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_text_save_fd(s: *mut Sdb, fd: ::std::os::raw::c_int, sort: bool) -> bool;
}
extern "C" {
    pub fn sdb_text_save(s: *mut Sdb, file: *const ::std::os::raw::c_char, sort: bool) -> bool;
}
extern "C" {
    pub fn sdb_text_load_buf(s: *mut Sdb, buf: *mut ::std::os::raw::c_char, sz: size_t) -> bool;
}
extern "C" {
    pub fn sdb_text_load(s: *mut Sdb, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_text_check(s: *mut Sdb, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_dump_begin(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_dump_next(s: *mut Sdb) -> *mut SdbKv;
}
extern "C" {
    pub fn sdb_dump_dupnext(
        s: *mut Sdb,
        key: *mut ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
        _vlen: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn sdb_journal_close(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_journal_open(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_journal_load(s: *mut Sdb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_journal_log(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_journal_clear(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_journal_unlink(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_itoa(
        n: ::std::os::raw::c_ulonglong,
        s: *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_atoi(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_itoca(n: ::std::os::raw::c_ulonglong) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_lock(s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_lock_file(f: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_unlock(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sdb_unlink(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_lock_wait(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_expire_set(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        expire: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_expire_get(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_now() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_unow() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_hash_len(
        key: *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sdb_hash_byte(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn sdb_isjson(k: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn sdb_json_get_str(
        json: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_json_get_bool(
        json: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_json_get(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_json_set(
        s: *mut Sdb,
        k: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_json_num_get(
        s: *mut Sdb,
        k: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_json_num_set(
        s: *mut Sdb,
        k: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_int,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_json_num_dec(
        s: *mut Sdb,
        k: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_json_num_inc(
        s: *mut Sdb,
        k: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_json_indent(
        s: *const ::std::os::raw::c_char,
        tab: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_json_unindent(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SdbJsonString {
    pub buf: *mut ::std::os::raw::c_char,
    pub blen: size_t,
    pub len: size_t,
}
#[test]
fn bindgen_test_layout_SdbJsonString() {
    assert_eq!(
        ::std::mem::size_of::<SdbJsonString>(),
        24usize,
        concat!("Size of: ", stringify!(SdbJsonString))
    );
    assert_eq!(
        ::std::mem::align_of::<SdbJsonString>(),
        8usize,
        concat!("Alignment of ", stringify!(SdbJsonString))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SdbJsonString>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SdbJsonString),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SdbJsonString>())).blen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SdbJsonString),
            "::",
            stringify!(blen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SdbJsonString>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SdbJsonString),
            "::",
            stringify!(len)
        )
    );
}
extern "C" {
    pub fn sdb_json_format(
        s: *mut SdbJsonString,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_ns(
        s: *mut Sdb,
        name: *const ::std::os::raw::c_char,
        create: ::std::os::raw::c_int,
    ) -> *mut Sdb;
}
extern "C" {
    pub fn sdb_ns_path(
        s: *mut Sdb,
        path: *const ::std::os::raw::c_char,
        create: ::std::os::raw::c_int,
    ) -> *mut Sdb;
}
extern "C" {
    pub fn sdb_ns_init(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_ns_free(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_ns_lock(s: *mut Sdb, lock: ::std::os::raw::c_int, depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sdb_ns_sync(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_ns_set(
        s: *mut Sdb,
        name: *const ::std::os::raw::c_char,
        r: *mut Sdb,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_ns_unset(s: *mut Sdb, name: *const ::std::os::raw::c_char, r: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_array_contains(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_contains_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_indexof(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_set(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_set_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_append(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_append_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_prepend(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_prepend_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_get(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_array_get_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        cas: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_array_get_idx(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_insert(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_insert_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_unset(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_delete(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_sort(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sdb_array_sort_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sdb_array_add(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_add_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_add_sorted(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_add_sorted_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_remove(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_remove_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_anext(
        str_: *mut ::std::os::raw::c_char,
        next: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_const_anext(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_alen(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_alen_ignore_empty(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_size(s: *mut Sdb, key: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_length(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_list(s: *mut Sdb, key: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_push(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        cas: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_array_pop(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_array_push_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_array_pop_num(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_array_pop_head(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_array_pop_tail(
        s: *mut Sdb,
        key: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
pub type SdbHook = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut Sdb,
        user: *mut ::std::os::raw::c_void,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn sdb_global_hook(hook: SdbHook, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn sdb_hook(s: *mut Sdb, cb: SdbHook, user: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn sdb_unhook(s: *mut Sdb, h: SdbHook) -> bool;
}
extern "C" {
    pub fn sdb_hook_call(
        s: *mut Sdb,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_hook_free(s: *mut Sdb);
}
extern "C" {
    pub fn sdb_isnum(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_isempty(s: *mut Sdb) -> bool;
}
extern "C" {
    pub fn sdb_type(k: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_match(
        str_: *const ::std::os::raw::c_char,
        glob: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn sdb_bool_set(
        db: *mut Sdb,
        str_: *const ::std::os::raw::c_char,
        v: bool,
        cas: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_bool_get(
        db: *mut Sdb,
        str_: *const ::std::os::raw::c_char,
        cas: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn sdb_decode(
        in_: *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn sdb_encode(
        bin: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_encode_raw(
        bout: *mut ::std::os::raw::c_char,
        bin: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sdb_decode_raw(
        bout: *mut ::std::os::raw::c_uchar,
        bin: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_fmt(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_fmt_init(
        p: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_fmt_free(p: *mut ::std::os::raw::c_void, fmt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sdb_fmt_tobin(
        _str: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        stru: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sdb_fmt_tostr(
        stru: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_fmt_array(list: *const ::std::os::raw::c_char) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_fmt_array_num(
        list: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn sdb_array_compact(p: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sdb_aslice(
        out: *mut ::std::os::raw::c_char,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
pub type RListFree = ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_list_iter_t {
    pub data: *mut ::std::os::raw::c_void,
    pub n: *mut r_list_iter_t,
    pub p: *mut r_list_iter_t,
}
#[test]
fn bindgen_test_layout_r_list_iter_t() {
    assert_eq!(
        ::std::mem::size_of::<r_list_iter_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_list_iter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_list_iter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_list_iter_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_list_iter_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_list_iter_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_list_iter_t>())).n as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_list_iter_t),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_list_iter_t>())).p as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_list_iter_t),
            "::",
            stringify!(p)
        )
    );
}
pub type RListIter = r_list_iter_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_list_t {
    pub head: *mut RListIter,
    pub tail: *mut RListIter,
    pub free: RListFree,
    pub length: ::std::os::raw::c_int,
    pub sorted: bool,
}
#[test]
fn bindgen_test_layout_r_list_t() {
    assert_eq!(
        ::std::mem::size_of::<r_list_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_list_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_list_t>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_list_t),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_list_t>())).tail as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_list_t),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_list_t>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_list_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_list_t>())).length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_list_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_list_t>())).sorted as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_list_t),
            "::",
            stringify!(sorted)
        )
    );
}
pub type RList = r_list_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_list_range_t {
    pub h: *mut HtPP,
    pub l: *mut RList,
}
#[test]
fn bindgen_test_layout_r_list_range_t() {
    assert_eq!(
        ::std::mem::size_of::<r_list_range_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_list_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_list_range_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_list_range_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_list_range_t>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_list_range_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_list_range_t>())).l as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_list_range_t),
            "::",
            stringify!(l)
        )
    );
}
pub type RListRange = r_list_range_t;
pub type RListComparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_oflist_t {
    pub super_: RList,
    pub array: *mut *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_oflist_t() {
    assert_eq!(
        ::std::mem::size_of::<r_oflist_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_oflist_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_oflist_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_oflist_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_oflist_t>())).super_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_oflist_t),
            "::",
            stringify!(super_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_oflist_t>())).array as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_oflist_t),
            "::",
            stringify!(array)
        )
    );
}
pub type ROFList = r_oflist_t;
extern "C" {
    pub fn r_list_new() -> *mut RList;
}
extern "C" {
    pub fn r_list_newf(f: RListFree) -> *mut RList;
}
extern "C" {
    pub fn r_list_iter_get_next(list: *mut RListIter) -> *mut RListIter;
}
extern "C" {
    pub fn r_list_iter_get_prev(list: *mut RListIter) -> *mut RListIter;
}
extern "C" {
    pub fn r_list_set_n(
        list: *mut RList,
        n: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_list_iter_get_data(list: *mut RListIter) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_list_append(list: *mut RList, data: *mut ::std::os::raw::c_void) -> *mut RListIter;
}
extern "C" {
    pub fn r_list_prepend(list: *mut RList, data: *mut ::std::os::raw::c_void) -> *mut RListIter;
}
extern "C" {
    pub fn r_list_insert(
        list: *mut RList,
        n: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RListIter;
}
extern "C" {
    pub fn r_list_length(list: *const RList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_list_iter_length(iter: *mut RListIter) -> size_t;
}
extern "C" {
    pub fn r_list_first(list: *const RList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_list_last(list: *const RList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_list_add_sorted(
        list: *mut RList,
        data: *mut ::std::os::raw::c_void,
        cmp: RListComparator,
    ) -> *mut RListIter;
}
extern "C" {
    pub fn r_list_sort(list: *mut RList, cmp: RListComparator);
}
extern "C" {
    pub fn r_list_merge_sort(list: *mut RList, cmp: RListComparator);
}
extern "C" {
    pub fn r_list_insertion_sort(list: *mut RList, cmp: RListComparator);
}
extern "C" {
    pub fn r_list_uniq(list: *const RList, cmp: RListComparator) -> *mut RList;
}
extern "C" {
    pub fn r_list_init(list: *mut RList);
}
extern "C" {
    pub fn r_list_delete(list: *mut RList, iter: *mut RListIter);
}
extern "C" {
    pub fn r_list_delete_data(list: *mut RList, ptr: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn r_list_iter_init(iter: *mut RListIter, list: *mut RList);
}
extern "C" {
    pub fn r_list_purge(list: *mut RList);
}
extern "C" {
    pub fn r_list_free(list: *mut RList);
}
extern "C" {
    pub fn r_list_item_new(data: *mut ::std::os::raw::c_void) -> *mut RListIter;
}
extern "C" {
    pub fn r_list_split(list: *mut RList, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_list_split_iter(list: *mut RList, iter: *mut RListIter);
}
extern "C" {
    pub fn r_list_join(list1: *mut RList, list2: *mut RList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_list_get_n(
        list: *const RList,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_list_del_n(list: *mut RList, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_list_get_top(list: *const RList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_list_get_bottom(list: *const RList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_list_iter_to_top(list: *mut RList, iter: *mut RListIter);
}
extern "C" {
    pub fn r_list_pop(list: *mut RList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_list_pop_head(list: *mut RList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_list_reverse(list: *mut RList);
}
extern "C" {
    pub fn r_list_clone(list: *const RList) -> *mut RList;
}
extern "C" {
    pub fn r_list_to_str(
        list: *mut RList,
        ch: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_list_contains(list: *const RList, p: *const ::std::os::raw::c_void) -> *mut RListIter;
}
extern "C" {
    pub fn r_list_find(
        list: *const RList,
        p: *const ::std::os::raw::c_void,
        cmp: RListComparator,
    ) -> *mut RListIter;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_graph_node_t {
    pub idx: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
    pub out_nodes: *mut RList,
    pub in_nodes: *mut RList,
    pub all_neighbours: *mut RList,
    pub free: RListFree,
}
#[test]
fn bindgen_test_layout_r_graph_node_t() {
    assert_eq!(
        ::std::mem::size_of::<r_graph_node_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_graph_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_graph_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_graph_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_node_t>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_node_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_node_t>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_node_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_node_t>())).out_nodes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_node_t),
            "::",
            stringify!(out_nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_node_t>())).in_nodes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_node_t),
            "::",
            stringify!(in_nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_node_t>())).all_neighbours as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_node_t),
            "::",
            stringify!(all_neighbours)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_node_t>())).free as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_node_t),
            "::",
            stringify!(free)
        )
    );
}
pub type RGraphNode = r_graph_node_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_graph_edge_t {
    pub from: *mut RGraphNode,
    pub to: *mut RGraphNode,
    pub nth: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_graph_edge_t() {
    assert_eq!(
        ::std::mem::size_of::<r_graph_edge_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_graph_edge_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_graph_edge_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_graph_edge_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_edge_t>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_edge_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_edge_t>())).to as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_edge_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_edge_t>())).nth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_edge_t),
            "::",
            stringify!(nth)
        )
    );
}
pub type RGraphEdge = r_graph_edge_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_graph_t {
    pub n_nodes: ::std::os::raw::c_uint,
    pub n_edges: ::std::os::raw::c_uint,
    pub last_index: ::std::os::raw::c_int,
    pub nodes: *mut RList,
}
#[test]
fn bindgen_test_layout_r_graph_t() {
    assert_eq!(
        ::std::mem::size_of::<r_graph_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_graph_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_graph_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_graph_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_t>())).n_nodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_t),
            "::",
            stringify!(n_nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_t>())).n_edges as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_t),
            "::",
            stringify!(n_edges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_t>())).last_index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_t),
            "::",
            stringify!(last_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_t>())).nodes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_t),
            "::",
            stringify!(nodes)
        )
    );
}
pub type RGraph = r_graph_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_graph_visitor_t {
    pub discover_node: ::std::option::Option<
        unsafe extern "C" fn(n: *mut RGraphNode, vis: *mut r_graph_visitor_t),
    >,
    pub finish_node: ::std::option::Option<
        unsafe extern "C" fn(n: *mut RGraphNode, vis: *mut r_graph_visitor_t),
    >,
    pub tree_edge: ::std::option::Option<
        unsafe extern "C" fn(e: *const RGraphEdge, vis: *mut r_graph_visitor_t),
    >,
    pub back_edge: ::std::option::Option<
        unsafe extern "C" fn(e: *const RGraphEdge, vis: *mut r_graph_visitor_t),
    >,
    pub fcross_edge: ::std::option::Option<
        unsafe extern "C" fn(e: *const RGraphEdge, vis: *mut r_graph_visitor_t),
    >,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_graph_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<r_graph_visitor_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_graph_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_graph_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_graph_visitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_visitor_t>())).discover_node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_visitor_t),
            "::",
            stringify!(discover_node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_visitor_t>())).finish_node as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_visitor_t),
            "::",
            stringify!(finish_node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_visitor_t>())).tree_edge as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_visitor_t),
            "::",
            stringify!(tree_edge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_visitor_t>())).back_edge as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_visitor_t),
            "::",
            stringify!(back_edge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_visitor_t>())).fcross_edge as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_visitor_t),
            "::",
            stringify!(fcross_edge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_graph_visitor_t>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_graph_visitor_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RGraphVisitor = r_graph_visitor_t;
pub type RGraphNodeCallback =
    ::std::option::Option<unsafe extern "C" fn(n: *mut RGraphNode, vis: *mut RGraphVisitor)>;
pub type RGraphEdgeCallback =
    ::std::option::Option<unsafe extern "C" fn(e: *const RGraphEdge, vis: *mut RGraphVisitor)>;
extern "C" {
    pub fn r_graph_new() -> *mut RGraph;
}
extern "C" {
    pub fn r_graph_free(g: *mut RGraph);
}
extern "C" {
    pub fn r_graph_get_node(g: *const RGraph, idx: ::std::os::raw::c_uint) -> *mut RGraphNode;
}
extern "C" {
    pub fn r_graph_node_iter(g: *const RGraph, idx: ::std::os::raw::c_uint) -> *mut RListIter;
}
extern "C" {
    pub fn r_graph_reset(g: *mut RGraph);
}
extern "C" {
    pub fn r_graph_add_node(g: *mut RGraph, data: *mut ::std::os::raw::c_void) -> *mut RGraphNode;
}
extern "C" {
    pub fn r_graph_add_nodef(
        g: *mut RGraph,
        data: *mut ::std::os::raw::c_void,
        user_free: RListFree,
    ) -> *mut RGraphNode;
}
extern "C" {
    pub fn r_graph_del_node(g: *mut RGraph, n: *mut RGraphNode);
}
extern "C" {
    pub fn r_graph_add_edge(g: *mut RGraph, from: *mut RGraphNode, to: *mut RGraphNode);
}
extern "C" {
    pub fn r_graph_add_edge_at(
        g: *mut RGraph,
        from: *mut RGraphNode,
        to: *mut RGraphNode,
        nth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_graph_node_split_forward(
        g: *mut RGraph,
        split_me: *mut RGraphNode,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RGraphNode;
}
extern "C" {
    pub fn r_graph_del_edge(g: *mut RGraph, from: *mut RGraphNode, to: *mut RGraphNode);
}
extern "C" {
    pub fn r_graph_get_neighbours(g: *const RGraph, n: *const RGraphNode) -> *const RList;
}
extern "C" {
    pub fn r_graph_nth_neighbour(
        g: *const RGraph,
        n: *const RGraphNode,
        nth: ::std::os::raw::c_int,
    ) -> *mut RGraphNode;
}
extern "C" {
    pub fn r_graph_innodes(g: *const RGraph, n: *const RGraphNode) -> *const RList;
}
extern "C" {
    pub fn r_graph_all_neighbours(g: *const RGraph, n: *const RGraphNode) -> *const RList;
}
extern "C" {
    pub fn r_graph_get_nodes(g: *const RGraph) -> *const RList;
}
extern "C" {
    pub fn r_graph_adjacent(
        g: *const RGraph,
        from: *const RGraphNode,
        to: *const RGraphNode,
    ) -> bool;
}
extern "C" {
    pub fn r_graph_dfs_node(g: *mut RGraph, n: *mut RGraphNode, vis: *mut RGraphVisitor);
}
extern "C" {
    pub fn r_graph_dfs_node_reverse(g: *mut RGraph, n: *mut RGraphNode, vis: *mut RGraphVisitor);
}
extern "C" {
    pub fn r_graph_dfs(g: *mut RGraph, vis: *mut RGraphVisitor);
}
extern "C" {
    pub fn r_hex_pair2bin(arg: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_hex_str2binmask(
        in_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
        mask: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_hex_str2bin(
        in_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_hex_bin2str(
        in_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_hex_bin2strdup(
        in_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hex_to_byte(val: *mut ::std::os::raw::c_uchar, c: ::std::os::raw::c_uchar) -> bool;
}
extern "C" {
    pub fn r_hex_str_is_valid(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_hex_bin_truncate(
        in_: ::std::os::raw::c_ulonglong,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_hex_from_c(code: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hex_from_py(code: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hex_from_code(code: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hex_no_code(code: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hex_from_py_str(
        out: *mut ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hex_from_py_array(
        out: *mut ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hex_from_c_str(
        out: *mut ::std::os::raw::c_char,
        code: *mut *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hex_from_c_array(
        out: *mut ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub const r_log_level_R_LOGLVL_SILLY: r_log_level = 0;
pub const r_log_level_R_LOGLVL_DEBUG: r_log_level = 1;
pub const r_log_level_R_LOGLVL_VERBOSE: r_log_level = 2;
pub const r_log_level_R_LOGLVL_INFO: r_log_level = 3;
pub const r_log_level_R_LOGLVL_WARN: r_log_level = 4;
pub const r_log_level_R_LOGLVL_ERROR: r_log_level = 5;
pub const r_log_level_R_LOGLVL_FATAL: r_log_level = 6;
pub const r_log_level_R_LOGLVL_NONE: r_log_level = 255;
pub type r_log_level = ::std::os::raw::c_uint;
pub use self::r_log_level as RLogLevel;
pub type RLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        output: *const ::std::os::raw::c_char,
        funcname: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_uint,
        level: RLogLevel,
        tag: *const ::std::os::raw::c_char,
        fmtstr: *const ::std::os::raw::c_char,
        ...
    ),
>;
extern "C" {
    pub fn r_log_set_level(level: RLogLevel);
}
extern "C" {
    pub fn r_log_set_file(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_log_set_srcinfo(show_info: bool);
}
extern "C" {
    pub fn r_log_set_colors(show_colors: bool);
}
extern "C" {
    pub fn r_log_set_traplevel(level: RLogLevel);
}
extern "C" {
    pub fn r_log_add_callback(cbfunc: RLogCallback);
}
extern "C" {
    pub fn r_log_del_callback(cbfunc: RLogCallback);
}
extern "C" {
    pub fn r_log(
        funcname: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_uint,
        level: RLogLevel,
        tag: *const ::std::os::raw::c_char,
        fmtstr: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn r_vlog(
        funcname: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_uint,
        level: RLogLevel,
        tag: *const ::std::os::raw::c_char,
        fmtstr: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RNumCalcValue {
    pub d: f64,
    pub n: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_RNumCalcValue() {
    assert_eq!(
        ::std::mem::size_of::<RNumCalcValue>(),
        16usize,
        concat!("Size of: ", stringify!(RNumCalcValue))
    );
    assert_eq!(
        ::std::mem::align_of::<RNumCalcValue>(),
        8usize,
        concat!("Alignment of ", stringify!(RNumCalcValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RNumCalcValue>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNumCalcValue),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RNumCalcValue>())).n as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RNumCalcValue),
            "::",
            stringify!(n)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RNumFloat {
    pub u16_: ::std::os::raw::c_ushort,
    pub u32_: ::std::os::raw::c_uint,
    pub u64_: ::std::os::raw::c_ulonglong,
    pub s16: ::std::os::raw::c_short,
    pub s32: ::std::os::raw::c_int,
    pub s64: ::std::os::raw::c_longlong,
    pub f32_: f32,
    pub f64_: f64,
}
#[test]
fn bindgen_test_layout_RNumFloat() {
    assert_eq!(
        ::std::mem::size_of::<RNumFloat>(),
        8usize,
        concat!("Size of: ", stringify!(RNumFloat))
    );
    assert_eq!(
        ::std::mem::align_of::<RNumFloat>(),
        8usize,
        concat!("Alignment of ", stringify!(RNumFloat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RNumFloat>())).u16_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNumFloat),
            "::",
            stringify!(u16_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RNumFloat>())).u32_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNumFloat),
            "::",
            stringify!(u32_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RNumFloat>())).u64_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNumFloat),
            "::",
            stringify!(u64_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RNumFloat>())).s16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNumFloat),
            "::",
            stringify!(s16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RNumFloat>())).s32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNumFloat),
            "::",
            stringify!(s32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RNumFloat>())).s64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNumFloat),
            "::",
            stringify!(s64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RNumFloat>())).f32_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNumFloat),
            "::",
            stringify!(f32_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RNumFloat>())).f64_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNumFloat),
            "::",
            stringify!(f64_)
        )
    );
}
pub const RNumCalcToken_RNCNAME: RNumCalcToken = 0;
pub const RNumCalcToken_RNCNUMBER: RNumCalcToken = 1;
pub const RNumCalcToken_RNCEND: RNumCalcToken = 2;
pub const RNumCalcToken_RNCINC: RNumCalcToken = 3;
pub const RNumCalcToken_RNCDEC: RNumCalcToken = 4;
pub const RNumCalcToken_RNCLT: RNumCalcToken = 5;
pub const RNumCalcToken_RNCGT: RNumCalcToken = 6;
pub const RNumCalcToken_RNCPLUS: RNumCalcToken = 43;
pub const RNumCalcToken_RNCMINUS: RNumCalcToken = 45;
pub const RNumCalcToken_RNCMUL: RNumCalcToken = 42;
pub const RNumCalcToken_RNCDIV: RNumCalcToken = 47;
pub const RNumCalcToken_RNCMOD: RNumCalcToken = 37;
pub const RNumCalcToken_RNCNEG: RNumCalcToken = 126;
pub const RNumCalcToken_RNCAND: RNumCalcToken = 38;
pub const RNumCalcToken_RNCOR: RNumCalcToken = 124;
pub const RNumCalcToken_RNCXOR: RNumCalcToken = 94;
pub const RNumCalcToken_RNCPRINT: RNumCalcToken = 59;
pub const RNumCalcToken_RNCASSIGN: RNumCalcToken = 61;
pub const RNumCalcToken_RNCLEFTP: RNumCalcToken = 40;
pub const RNumCalcToken_RNCRIGHTP: RNumCalcToken = 41;
pub const RNumCalcToken_RNCSHL: RNumCalcToken = 60;
pub const RNumCalcToken_RNCSHR: RNumCalcToken = 62;
pub const RNumCalcToken_RNCROL: RNumCalcToken = 35;
pub const RNumCalcToken_RNCROR: RNumCalcToken = 36;
pub type RNumCalcToken = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_num_calc_t {
    pub curr_tok: RNumCalcToken,
    pub number_value: RNumCalcValue,
    pub string_value: [::std::os::raw::c_char; 1024usize],
    pub errors: ::std::os::raw::c_int,
    pub oc: ::std::os::raw::c_char,
    pub calc_err: *const ::std::os::raw::c_char,
    pub calc_i: ::std::os::raw::c_int,
    pub calc_buf: *const ::std::os::raw::c_char,
    pub calc_len: ::std::os::raw::c_int,
    pub under_calc: bool,
}
#[test]
fn bindgen_test_layout_r_num_calc_t() {
    assert_eq!(
        ::std::mem::size_of::<r_num_calc_t>(),
        1088usize,
        concat!("Size of: ", stringify!(r_num_calc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_num_calc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_num_calc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_calc_t>())).curr_tok as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_calc_t),
            "::",
            stringify!(curr_tok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_calc_t>())).number_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_calc_t),
            "::",
            stringify!(number_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_calc_t>())).string_value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_calc_t),
            "::",
            stringify!(string_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_calc_t>())).errors as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_calc_t),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_calc_t>())).oc as *const _ as usize },
        1052usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_calc_t),
            "::",
            stringify!(oc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_calc_t>())).calc_err as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_calc_t),
            "::",
            stringify!(calc_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_calc_t>())).calc_i as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_calc_t),
            "::",
            stringify!(calc_i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_calc_t>())).calc_buf as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_calc_t),
            "::",
            stringify!(calc_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_calc_t>())).calc_len as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_calc_t),
            "::",
            stringify!(calc_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_calc_t>())).under_calc as *const _ as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_calc_t),
            "::",
            stringify!(under_calc)
        )
    );
}
pub type RNumCalc = r_num_calc_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_num_t {
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            userptr: *mut r_num_t,
            str_: *const ::std::os::raw::c_char,
            ok: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
    >,
    pub cb_from_value: ::std::option::Option<
        unsafe extern "C" fn(
            userptr: *mut r_num_t,
            value: ::std::os::raw::c_ulonglong,
            ok: *mut ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub value: ::std::os::raw::c_ulonglong,
    pub fvalue: f64,
    pub userptr: *mut ::std::os::raw::c_void,
    pub dbz: ::std::os::raw::c_int,
    #[doc = " division by zero happened"]
    pub nc: RNumCalc,
}
#[test]
fn bindgen_test_layout_r_num_t() {
    assert_eq!(
        ::std::mem::size_of::<r_num_t>(),
        1136usize,
        concat!("Size of: ", stringify!(r_num_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_num_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_num_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_t>())).callback as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_t),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_t>())).cb_from_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_t),
            "::",
            stringify!(cb_from_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_t>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_t>())).fvalue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_t),
            "::",
            stringify!(fvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_t>())).userptr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_t),
            "::",
            stringify!(userptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_t>())).dbz as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_t),
            "::",
            stringify!(dbz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_t>())).nc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_t),
            "::",
            stringify!(nc)
        )
    );
}
pub type RNum = r_num_t;
pub type RNumCallback = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut r_num_t,
        str_: *const ::std::os::raw::c_char,
        ok: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RNumCallback2 = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut r_num_t,
        arg1: ::std::os::raw::c_ulonglong,
        ok: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    pub fn r_num_new(
        cb: RNumCallback,
        cb2: RNumCallback2,
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut RNum;
}
extern "C" {
    pub fn r_num_free(num: *mut RNum);
}
extern "C" {
    pub fn r_num_units(
        buf: *mut ::std::os::raw::c_char,
        len: size_t,
        number: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_num_conditional(
        num: *mut RNum,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_num_calc(
        num: *mut RNum,
        str_: *const ::std::os::raw::c_char,
        err: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_num_calc_index(
        num: *mut RNum,
        p: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_num_chs(
        cylinder: ::std::os::raw::c_int,
        head: ::std::os::raw::c_int,
        sector: ::std::os::raw::c_int,
        sectorsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_num_is_valid_input(
        num: *mut RNum,
        input_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_num_get_input_value(
        num: *mut RNum,
        input_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_num_get_name(
        num: *mut RNum,
        n: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_num_as_string(
        ___: *mut RNum,
        n: ::std::os::raw::c_ulonglong,
        printable_only: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_num_tail(
        num: *mut RNum,
        addr: ::std::os::raw::c_ulonglong,
        hex: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_num_tail_base(
        num: *mut RNum,
        addr: ::std::os::raw::c_ulonglong,
        off: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_num_minmax_swap(
        a: *mut ::std::os::raw::c_ulonglong,
        b: *mut ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_num_minmax_swap_i(a: *mut ::std::os::raw::c_int, b: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_num_math(
        num: *mut RNum,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_num_get(
        num: *mut RNum,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_num_to_bits(
        out: *mut ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_num_to_ternary(
        out: *mut ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_num_rand(max: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_num_irand();
}
extern "C" {
    pub fn r_get_input_num_value(
        num: *mut RNum,
        input_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_is_valid_input_num_value(
        num: *mut RNum,
        input_value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_num_between(
        num: *mut RNum,
        input_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_num_is_op(c: ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_num_str_len(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_num_str_split(str_: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_num_str_split_list(str_: *mut ::std::os::raw::c_char) -> *mut RList;
}
extern "C" {
    pub fn r_num_dup(n: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_num_cos(a: f64) -> f64;
}
extern "C" {
    pub fn r_num_sin(a: f64) -> f64;
}
extern "C" {
    pub fn r_num_bit_count(val: ::std::os::raw::c_uint) -> size_t;
}
extern "C" {
    pub fn r_num_get_float(num: *mut RNum, str_: *const ::std::os::raw::c_char) -> f64;
}
pub const RPanelLayout_PANEL_LAYOUT_VERTICAL: RPanelLayout = 0;
pub const RPanelLayout_PANEL_LAYOUT_HORIZONTAL: RPanelLayout = 1;
pub const RPanelLayout_PANEL_LAYOUT_NONE: RPanelLayout = 2;
pub type RPanelLayout = ::std::os::raw::c_uint;
pub const RPanelType_PANEL_TYPE_DEFAULT: RPanelType = 0;
pub const RPanelType_PANEL_TYPE_MENU: RPanelType = 1;
pub type RPanelType = ::std::os::raw::c_uint;
pub const RPanelEdge_PANEL_EDGE_NONE: RPanelEdge = 0;
pub const RPanelEdge_PANEL_EDGE_BOTTOM: RPanelEdge = 1;
pub const RPanelEdge_PANEL_EDGE_RIGHT: RPanelEdge = 2;
pub type RPanelEdge = ::std::os::raw::c_uint;
pub type RPanelMenuUpdateCallback = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, parent: *const ::std::os::raw::c_char),
>;
pub type RPanelDirectionCallback = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, direction: ::std::os::raw::c_int),
>;
pub type RPanelRotateCallback =
    ::std::option::Option<unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, rev: bool)>;
pub type RPanelPrintCallback = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, p: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_panel_pos_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_panel_pos_t() {
    assert_eq!(
        ::std::mem::size_of::<r_panel_pos_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_panel_pos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_panel_pos_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_panel_pos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_pos_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_pos_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_pos_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_pos_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_pos_t>())).w as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_pos_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_pos_t>())).h as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_pos_t),
            "::",
            stringify!(h)
        )
    );
}
pub type RPanelPos = r_panel_pos_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_panel_model_t {
    pub directionCb: RPanelDirectionCallback,
    pub rotateCb: RPanelRotateCallback,
    pub print_cb: RPanelPrintCallback,
    pub type_: RPanelType,
    pub cmd: *mut ::std::os::raw::c_char,
    pub title: *mut ::std::os::raw::c_char,
    pub baseAddr: ::std::os::raw::c_ulonglong,
    pub addr: ::std::os::raw::c_ulonglong,
    pub cache: bool,
    pub cmdStrCache: *mut ::std::os::raw::c_char,
    pub readOnly: *mut ::std::os::raw::c_char,
    pub funcName: *mut ::std::os::raw::c_char,
    pub filter: *mut *mut ::std::os::raw::c_char,
    pub n_filter: ::std::os::raw::c_int,
    pub rotate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_panel_model_t() {
    assert_eq!(
        ::std::mem::size_of::<r_panel_model_t>(),
        112usize,
        concat!("Size of: ", stringify!(r_panel_model_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_panel_model_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_panel_model_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).directionCb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(directionCb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).rotateCb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(rotateCb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).print_cb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(print_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).cmd as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).title as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).baseAddr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(baseAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).addr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).cache as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).cmdStrCache as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(cmdStrCache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).readOnly as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(readOnly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).funcName as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(funcName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).filter as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).n_filter as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(n_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_model_t>())).rotate as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_model_t),
            "::",
            stringify!(rotate)
        )
    );
}
pub type RPanelModel = r_panel_model_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_panel_view_t {
    pub pos: RPanelPos,
    pub prevPos: RPanelPos,
    pub sx: ::std::os::raw::c_int,
    pub sy: ::std::os::raw::c_int,
    pub curpos: ::std::os::raw::c_int,
    pub refresh: bool,
    pub edge: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_panel_view_t() {
    assert_eq!(
        ::std::mem::size_of::<r_panel_view_t>(),
        52usize,
        concat!("Size of: ", stringify!(r_panel_view_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_panel_view_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_panel_view_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_view_t>())).pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_view_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_view_t>())).prevPos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_view_t),
            "::",
            stringify!(prevPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_view_t>())).sx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_view_t),
            "::",
            stringify!(sx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_view_t>())).sy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_view_t),
            "::",
            stringify!(sy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_view_t>())).curpos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_view_t),
            "::",
            stringify!(curpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_view_t>())).refresh as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_view_t),
            "::",
            stringify!(refresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_view_t>())).edge as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_view_t),
            "::",
            stringify!(edge)
        )
    );
}
pub type RPanelView = r_panel_view_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_panel_t {
    pub model: *mut RPanelModel,
    pub view: *mut RPanelView,
}
#[test]
fn bindgen_test_layout_r_panel_t() {
    assert_eq!(
        ::std::mem::size_of::<r_panel_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_panel_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_panel_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_panel_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_t>())).model as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_t),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panel_t>())).view as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panel_t),
            "::",
            stringify!(view)
        )
    );
}
pub type RPanel = r_panel_t;
pub type RPanelAlmightyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        panel: *mut RPanel,
        dir: RPanelLayout,
        title: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn r_sandbox_opendir(path: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn r_sandbox_truncate(
        fd: ::std::os::raw::c_int,
        length: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sandbox_lseek(
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sandbox_close(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sandbox_read(
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sandbox_write(
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sandbox_enable(e: bool) -> bool;
}
extern "C" {
    pub fn r_sandbox_disable(e: bool) -> bool;
}
extern "C" {
    pub fn r_sandbox_system(
        x: *const ::std::os::raw::c_char,
        fork: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sandbox_creat(
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_sandbox_open(
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        perm: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sandbox_fopen(
        path: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn r_sandbox_chdir(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sandbox_check_path(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_sandbox_kill(
        pid: ::std::os::raw::c_int,
        sig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_uint, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_signal_from_string(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_signal_to_string(code: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_signal_to_human(signum: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_signal_sigmask(
        how: ::std::os::raw::c_int,
        newmask: *const sigset_t,
        oldmask: *mut sigset_t,
    );
}
pub type RStackFree = ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_stack_t {
    pub elems: *mut *mut ::std::os::raw::c_void,
    pub n_elems: ::std::os::raw::c_uint,
    pub top: ::std::os::raw::c_int,
    pub free: RStackFree,
}
#[test]
fn bindgen_test_layout_r_stack_t() {
    assert_eq!(
        ::std::mem::size_of::<r_stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_stack_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_stack_t>())).elems as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_stack_t),
            "::",
            stringify!(elems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_stack_t>())).n_elems as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_stack_t),
            "::",
            stringify!(n_elems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_stack_t>())).top as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_stack_t),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_stack_t>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_stack_t),
            "::",
            stringify!(free)
        )
    );
}
pub type RStack = r_stack_t;
extern "C" {
    pub fn r_stack_new(n: ::std::os::raw::c_uint) -> *mut RStack;
}
extern "C" {
    pub fn r_stack_free(s: *mut RStack);
}
extern "C" {
    pub fn r_stack_is_empty(s: *mut RStack) -> bool;
}
extern "C" {
    pub fn r_stack_newf(n: ::std::os::raw::c_uint, f: RStackFree) -> *mut RStack;
}
extern "C" {
    pub fn r_stack_push(s: *mut RStack, el: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn r_stack_pop(s: *mut RStack) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_stack_size(s: *mut RStack) -> size_t;
}
extern "C" {
    pub fn r_stack_peek(s: *mut RStack) -> *mut ::std::os::raw::c_void;
}
pub type mbstate_t = __darwin_mbstate_t;
pub type wctype_t = __darwin_wctype_t;
extern "C" {
    pub fn wctype(arg1: *const ::std::os::raw::c_char) -> wctype_t;
}
extern "C" {
    pub fn btowc(arg1: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn fgetwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fgetws(arg1: *mut wchar_t, arg2: ::std::os::raw::c_int, arg3: *mut FILE)
        -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fputws(arg1: *const wchar_t, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwide(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn mbrlen(
        arg1: *const ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbrtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
        arg4: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbsinit(arg1: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: size_t,
        arg4: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn putwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(arg1: wchar_t) -> wint_t;
}
extern "C" {
    pub fn swprintf(
        arg1: *mut wchar_t,
        arg2: size_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(arg1: *const wchar_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(arg1: wint_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn vfwprintf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        arg1: *mut wchar_t,
        arg2: size_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(arg1: *const wchar_t, arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcscat(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcsftime(
        arg1: *mut wchar_t,
        arg2: size_t,
        arg3: *const wchar_t,
        arg4: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn wcslen(arg1: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: size_t,
        arg4: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn wctob(arg1: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstok(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstol(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wmemchr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemmove(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wprintf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(arg1: *const wchar_t, arg2: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth(arg1: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(arg1: *const wchar_t, arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstoll(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: size_t,
        arg4: size_t,
        arg5: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcpcpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsdup(arg1: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscasecmp(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnlen(arg1: *const wchar_t, arg2: size_t) -> size_t;
}
extern "C" {
    pub fn wcsnrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: size_t,
        arg4: size_t,
        arg5: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn open_wmemstream(__bufp: *mut *mut wchar_t, __sizep: *mut size_t) -> *mut FILE;
}
extern "C" {
    pub fn fgetwln(arg1: *mut FILE, arg2: *mut size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslcat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn wcslcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) -> size_t;
}
pub const RStrEnc_R_STRING_ENC_LATIN1: RStrEnc = 97;
pub const RStrEnc_R_STRING_ENC_UTF8: RStrEnc = 56;
pub const RStrEnc_R_STRING_ENC_UTF16LE: RStrEnc = 117;
pub const RStrEnc_R_STRING_ENC_UTF32LE: RStrEnc = 85;
pub const RStrEnc_R_STRING_ENC_UTF16BE: RStrEnc = 98;
pub const RStrEnc_R_STRING_ENC_UTF32BE: RStrEnc = 66;
pub const RStrEnc_R_STRING_ENC_GUESS: RStrEnc = 103;
pub type RStrEnc = ::std::os::raw::c_uint;
pub type RStrRangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_charset_rune_t {
    pub ch: *mut ::std::os::raw::c_uchar,
    pub hx: *mut ::std::os::raw::c_uchar,
    pub left: *mut r_charset_rune_t,
    pub right: *mut r_charset_rune_t,
}
#[test]
fn bindgen_test_layout_r_charset_rune_t() {
    assert_eq!(
        ::std::mem::size_of::<r_charset_rune_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_charset_rune_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_charset_rune_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_charset_rune_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_charset_rune_t>())).ch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_charset_rune_t),
            "::",
            stringify!(ch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_charset_rune_t>())).hx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_charset_rune_t),
            "::",
            stringify!(hx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_charset_rune_t>())).left as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_charset_rune_t),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_charset_rune_t>())).right as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_charset_rune_t),
            "::",
            stringify!(right)
        )
    );
}
pub type RCharsetRune = r_charset_rune_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_charset_t {
    pub loaded: bool,
    pub db: *mut Sdb,
    pub db_char_to_hex: *mut Sdb,
    pub custom_charset: *mut RCharsetRune,
    pub encode_maxkeylen: size_t,
    pub decode_maxkeylen: size_t,
}
#[test]
fn bindgen_test_layout_r_charset_t() {
    assert_eq!(
        ::std::mem::size_of::<r_charset_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_charset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_charset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_charset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_charset_t>())).loaded as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_charset_t),
            "::",
            stringify!(loaded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_charset_t>())).db as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_charset_t),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_charset_t>())).db_char_to_hex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_charset_t),
            "::",
            stringify!(db_char_to_hex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_charset_t>())).custom_charset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_charset_t),
            "::",
            stringify!(custom_charset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_charset_t>())).encode_maxkeylen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_charset_t),
            "::",
            stringify!(encode_maxkeylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_charset_t>())).decode_maxkeylen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_charset_t),
            "::",
            stringify!(decode_maxkeylen)
        )
    );
}
pub type RCharset = r_charset_t;
extern "C" {
    pub fn r_charset_new() -> *mut RCharset;
}
extern "C" {
    pub fn r_charset_free(charset: *mut RCharset);
}
extern "C" {
    pub fn r_charset_rune_new(
        ch: *const ::std::os::raw::c_uchar,
        hx: *const ::std::os::raw::c_uchar,
    ) -> *mut RCharsetRune;
}
extern "C" {
    pub fn r_charset_rune_free(rcr: *mut RCharsetRune);
}
extern "C" {
    pub fn r_charset_encode_str(
        rc: *mut RCharset,
        out: *mut ::std::os::raw::c_uchar,
        out_len: size_t,
        in_: *const ::std::os::raw::c_uchar,
        in_len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn r_charset_decode_str(
        rc: *mut RCharset,
        out: *mut ::std::os::raw::c_uchar,
        out_len: size_t,
        in_: *const ::std::os::raw::c_uchar,
        in_len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn r_charset_open(c: *mut RCharset, cs: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_charset_use(c: *mut RCharset, cf: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_charset_list(c: *mut RCharset) -> *mut RList;
}
extern "C" {
    pub fn r_charset_close(c: *mut RCharset);
}
extern "C" {
    pub fn add_rune(
        rcsr: *mut RCharsetRune,
        ch: *const ::std::os::raw::c_uchar,
        hx: *const ::std::os::raw::c_uchar,
    ) -> *mut RCharsetRune;
}
extern "C" {
    pub fn search_from_hex(
        rcsr: *mut RCharsetRune,
        hx: *const ::std::os::raw::c_uchar,
    ) -> *mut RCharsetRune;
}
extern "C" {
    pub fn search_from_char(
        rcsr: *mut RCharsetRune,
        ch: *const ::std::os::raw::c_uchar,
    ) -> *mut RCharsetRune;
}
extern "C" {
    pub fn r_str_repeat(
        ch: *const ::std::os::raw::c_char,
        sz: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_pad(
        ch: ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_rstr(
        base: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strstr_ansi(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_rchr(
        base: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_closer_chr(
        b: *const ::std::os::raw::c_char,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_bounds(
        str_: *const ::std::os::raw::c_char,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_crop(
        str_: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        x2: ::std::os::raw::c_uint,
        y2: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_scale(
        r: *const ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_range_in(
        r: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_str_size(
        s: *const ::std::os::raw::c_char,
        rows: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_len_utf8(s: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn r_str_len_utf8_ansi(str_: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn r_str_len_utf8char(
        s: *const ::std::os::raw::c_char,
        left: ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn r_str_utf8_charsize(str_: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn r_str_utf8_charsize_prev(
        str_: *const ::std::os::raw::c_char,
        prev_len: ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn r_str_utf8_charsize_last(str_: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn r_str_filter_zeroline(str_: *mut ::std::os::raw::c_char, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_str_utf8_codepoint(s: *const ::std::os::raw::c_char, left: size_t) -> size_t;
}
extern "C" {
    pub fn r_str_char_fullwidth(s: *const ::std::os::raw::c_char, left: size_t) -> bool;
}
extern "C" {
    pub fn r_str_write(
        fd: ::std::os::raw::c_int,
        b: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_ncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn r_str_sanitize(c: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_sanitize_sdb_key(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_casestr(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_firstbut(
        s: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_char,
        but: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_firstbut_escape(
        s: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_char,
        but: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_lastbut(
        s: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_char,
        but: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_split(
        str_: *mut ::std::os::raw::c_char,
        ch: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_split_list(
        str_: *mut ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_str_split_duplist(
        str_: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        trim: bool,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_str_split_lines(str_: *mut ::std::os::raw::c_char, count: *mut size_t) -> *mut size_t;
}
extern "C" {
    pub fn r_str_replace(
        str_: *mut ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        g: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_replace_icase(
        str_: *mut ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        g: ::std::os::raw::c_int,
        keep_case: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_replace_in(
        str_: *mut ::std::os::raw::c_char,
        sz: ::std::os::raw::c_uint,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        g: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_bits(
        strout: *mut ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        bitz: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_bits64(
        strout: *mut ::std::os::raw::c_char,
        in_: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_bits_from_string(
        buf: *const ::std::os::raw::c_char,
        bitz: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_str_rwx(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_replace_ch(
        s: *mut ::std::os::raw::c_char,
        a: ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
        g: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_replace_char(
        s: *mut ::std::os::raw::c_char,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_replace_char_once(
        s: *mut ::std::os::raw::c_char,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_remove_char(str_: *mut ::std::os::raw::c_char, c: ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_rwx_i(rwx: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_fmtargs(fmt: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_arg_escape(arg: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_arg_unescape(arg: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_argv(
        str_: *const ::std::os::raw::c_char,
        _argc: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_argv_free(argv: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_new(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_snprintf(
        string: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_is_ascii(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_str_nextword(
        s: *mut ::std::os::raw::c_char,
        ch: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_is_printable(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_str_is_printable_limited(
        str_: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_str_is_printable_incl_newlines(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_str_appendlen(
        ptr: *mut ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_newf(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_newvf(
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_distance(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_newlen(
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_sysbits(v: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_trunc_ellipsis(
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_bool(b: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_is_true(s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_str_is_false(s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_str_is_bool(val: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_str_ansi_chrn(
        str_: *const ::std::os::raw::c_char,
        n: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_ansi_len(str_: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn r_str_ansi_nlen(str_: *const ::std::os::raw::c_char, len: size_t) -> size_t;
}
extern "C" {
    pub fn r_str_ansi_trim(
        str_: *mut ::std::os::raw::c_char,
        str_len: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_ansi_filter(
        str_: *mut ::std::os::raw::c_char,
        out: *mut *mut ::std::os::raw::c_char,
        cposs: *mut *mut ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_ansi_crop(
        str_: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        x2: ::std::os::raw::c_uint,
        y2: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_word_count(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_char_count(
        string: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_word_get0set(
        stra: *mut ::std::os::raw::c_char,
        stralen: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
        newstr: *const ::std::os::raw::c_char,
        newlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_word_set0(str_: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_word_set0_stack(str_: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_word_get0(
        str_: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_word_get_first(
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_trim(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_wrap(
        str_: *const ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_trim_dup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_trim_lines(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_trim_head(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_trim_head_ro(str_: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_trim_head_wp(str_: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_trim_tail(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_trim_args(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_hash(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn r_str_hash64(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_str_trim_nc(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_nstr(
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_lchr(
        str_: *const ::std::os::raw::c_char,
        chr: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sub_str_lchr(
        str_: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        chr: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sub_str_rchr(
        str_: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        chr: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_ichr(
        str_: *mut ::std::os::raw::c_char,
        chr: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_ccmp(
        dst: *const ::std::os::raw::c_char,
        orig: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_str_cmp_list(
        list: *const ::std::os::raw::c_char,
        item: *const ::std::os::raw::c_char,
        sep: ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_str_cmp(
        dst: *const ::std::os::raw::c_char,
        orig: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_casecmp(
        dst: *const ::std::os::raw::c_char,
        orig: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_ncasecmp(
        dst: *const ::std::os::raw::c_char,
        orig: *const ::std::os::raw::c_char,
        n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_ccpy(
        dst: *mut ::std::os::raw::c_char,
        orig: *mut ::std::os::raw::c_char,
        ch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_get(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_get_fail(
        str_: *const ::std::os::raw::c_char,
        failstr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_getf(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_ndup(
        ptr: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_dup(
        ptr: *mut ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_inject(
        begin: *mut ::std::os::raw::c_char,
        end: *mut ::std::os::raw::c_char,
        str_: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_delta(
        p: *mut ::std::os::raw::c_char,
        a: ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_filter(str_: *mut ::std::os::raw::c_char, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_str_tok(
        str1: *const ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
        len: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_mb_to_wc(buf: *const ::std::os::raw::c_char) -> *mut wchar_t;
}
extern "C" {
    pub fn r_str_wc_to_mb(buf: *const wchar_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_mb_to_wc_l(
        buf: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn r_str_wc_to_mb_l(
        buf: *const wchar_t,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_str_xy(
        s: *const ::std::os::raw::c_char,
        word: *const ::std::os::raw::c_char,
        prev: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type str_operation =
    ::std::option::Option<unsafe extern "C" fn(c: *mut ::std::os::raw::c_char)>;
extern "C" {
    pub fn r_str_do_until_token(
        op: str_operation,
        str_: *mut ::std::os::raw::c_char,
        tok: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_reverse(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_re_match(
        str_: *const ::std::os::raw::c_char,
        reg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_re_replace(
        str_: *const ::std::os::raw::c_char,
        reg: *const ::std::os::raw::c_char,
        sub: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_path_unescape(path: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_path_escape(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_unescape(buf: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_sanitize_r2(buf: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape(buf: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_sh(buf: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_sql(buf: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_dot(buf: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_latin1(
        buf: *const ::std::os::raw::c_char,
        show_asciidot: bool,
        esc_bslash: bool,
        colors: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_utf8(
        buf: *const ::std::os::raw::c_char,
        show_asciidot: bool,
        esc_bslash: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_utf8_keep_printable(
        buf: *const ::std::os::raw::c_char,
        show_asciidot: bool,
        esc_bslash: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_utf16le(
        buf: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        show_asciidot: bool,
        esc_bslash: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_utf32le(
        buf: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        show_asciidot: bool,
        esc_bslash: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_utf16be(
        buf: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        show_asciidot: bool,
        esc_bslash: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_utf32be(
        buf: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        show_asciidot: bool,
        esc_bslash: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_byte_escape(
        p: *const ::std::os::raw::c_char,
        dst: *mut *mut ::std::os::raw::c_char,
        dot_nl: ::std::os::raw::c_int,
        default_dot: bool,
        esc_bslash: bool,
    );
}
extern "C" {
    pub fn r_str_format_msvc_argv(
        argc: size_t,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_uri_decode(buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_uri_encode(buf: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_utf16_decode(
        s: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_utf16_to_utf8(
        dst: *mut ::std::os::raw::c_uchar,
        len_dst: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_uchar,
        len_src: ::std::os::raw::c_int,
        little_endian: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_utf16_encode(
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_utf8_for_json(
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_escape_utf8_for_json_strip(
        buf: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_encoded_json(
        buf: *const ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        encoding: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_home(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_r2_prefix(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_nlen(s: *const ::std::os::raw::c_char, n: ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn r_str_nlen_w(s: *const ::std::os::raw::c_char, n: ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn r_wstr_clen(s: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn r_str_prepend(
        ptr: *mut ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_prefix_all(
        s: *const ::std::os::raw::c_char,
        pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_append(
        ptr: *mut ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_append_owned(
        ptr: *mut ::std::os::raw::c_char,
        string: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_appendf(
        ptr: *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_appendch(
        x: *mut ::std::os::raw::c_char,
        y: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_case(str_: *mut ::std::os::raw::c_char, up: bool);
}
extern "C" {
    pub fn r_str_trim_path(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_contains_macro(
        input_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_str_truncate_cmd(string: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_replace_thunked(
        str_: *mut ::std::os::raw::c_char,
        clean: *mut ::std::os::raw::c_char,
        thunk: *mut ::std::os::raw::c_int,
        clen: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        g: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_glob(
        str_: *const ::std::os::raw::c_char,
        glob: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_str_binstr2bin(
        str_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_str_between(
        str_: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_startswith(
        str_: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_str_endswith(
        str_: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_str_isnumber(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_str_last(
        in_: *const ::std::os::raw::c_char,
        ch: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_highlight(
        str_: *mut ::std::os::raw::c_char,
        word: *const ::std::os::raw::c_char,
        color: *const ::std::os::raw::c_char,
        color_reset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_qrcode_gen(
        text: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        utf8: bool,
        inverted: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_from_ut64(val: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_stripLine(str_: *mut ::std::os::raw::c_char, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_str_list_join(
        str_: *mut RList,
        sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_array_join(
        a: *mut *const ::std::os::raw::c_char,
        n: size_t,
        sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_sep(
        base: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_rsep(
        base: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_donut(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_str_version(program: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_str_constpool_t {
    pub ht: *mut HtPP,
}
#[test]
fn bindgen_test_layout_r_str_constpool_t() {
    assert_eq!(
        ::std::mem::size_of::<r_str_constpool_t>(),
        8usize,
        concat!("Size of: ", stringify!(r_str_constpool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_str_constpool_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_str_constpool_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_str_constpool_t>())).ht as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_str_constpool_t),
            "::",
            stringify!(ht)
        )
    );
}
pub type RStrConstPool = r_str_constpool_t;
extern "C" {
    pub fn r_str_constpool_init(pool: *mut RStrConstPool) -> bool;
}
extern "C" {
    pub fn r_str_constpool_fini(pool: *mut RStrConstPool);
}
extern "C" {
    pub fn r_str_constpool_get(
        pool: *mut RStrConstPool,
        str_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RSysInfo {
    pub sysname: *mut ::std::os::raw::c_char,
    pub nodename: *mut ::std::os::raw::c_char,
    pub release: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub machine: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RSysInfo() {
    assert_eq!(
        ::std::mem::size_of::<RSysInfo>(),
        40usize,
        concat!("Size of: ", stringify!(RSysInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RSysInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RSysInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RSysInfo>())).sysname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RSysInfo),
            "::",
            stringify!(sysname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RSysInfo>())).nodename as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RSysInfo),
            "::",
            stringify!(nodename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RSysInfo>())).release as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RSysInfo),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RSysInfo>())).version as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RSysInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RSysInfo>())).machine as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RSysInfo),
            "::",
            stringify!(machine)
        )
    );
}
extern "C" {
    pub fn r_sys_info() -> *mut RSysInfo;
}
extern "C" {
    pub fn r_sys_info_free(si: *mut RSysInfo);
}
extern "C" {
    pub fn r_sys_sigaction(
        sig: *mut ::std::os::raw::c_int,
        handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_signal(
        sig: ::std::os::raw::c_int,
        handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_env_init();
}
extern "C" {
    pub fn r_sys_get_environ() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sys_set_environ(e: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_sys_fork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_exit(status: ::std::os::raw::c_int, nocleanup: bool);
}
extern "C" {
    pub fn r_sys_stop() -> bool;
}
extern "C" {
    pub fn r_sys_pid_to_path(pid: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sys_run(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_run_rop(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_getpid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_crash_handler(cmd: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_arch_str(arch: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sys_arch_id(arch: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_arch_match(
        archstr: *const ::std::os::raw::c_char,
        arch: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_sys_dir(path: *const ::std::os::raw::c_char) -> *mut RList;
}
extern "C" {
    pub fn r_sys_perror_str(fun: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_sys_prefix(pfx: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sys_mkdir(dir: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_sys_mkdirp(dir: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_sys_sleep(secs: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_usleep(usecs: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_getenv(key: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sys_getenv_asbool(key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_sys_setenv(
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_whoami() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sys_uid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_getdir() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sys_chdir(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_aslr(val: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_sys_thp_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_cmd_str_full(
        cmd: *const ::std::os::raw::c_char,
        input: *const ::std::os::raw::c_char,
        ilen: ::std::os::raw::c_int,
        output: *mut *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
        sterr: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_truncate(
        file: *const ::std::os::raw::c_char,
        sz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_cmd(cmd: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_cmdbg(cmd: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_cmdf(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sys_cmd_str(
        cmd: *const ::std::os::raw::c_char,
        input: *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sys_cmd_strf(cmd: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sys_backtrace();
}
extern "C" {
    pub fn r_sys_tts(txt: *const ::std::os::raw::c_char, bg: bool) -> bool;
}
extern "C" {
    pub fn r_syscmd_ls(input: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_syscmd_cat(file: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_syscmd_mkdir(dir: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_syscmd_mv(input: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_syscmd_uniq(file: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_syscmd_head(
        file: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_syscmd_tail(
        file: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_syscmd_join(
        file1: *const ::std::os::raw::c_char,
        file2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_syscmd_sort(file: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sys_unxz(
        data: *const ::std::os::raw::c_uchar,
        len: size_t,
        olen: *mut size_t,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_w32_init() -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_mmap_t {
    pub buf: *mut ::std::os::raw::c_uchar,
    pub base: ::std::os::raw::c_ulonglong,
    pub len: ::std::os::raw::c_int,
    pub fd: ::std::os::raw::c_int,
    pub rw: ::std::os::raw::c_int,
    pub filename: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_mmap_t() {
    assert_eq!(
        ::std::mem::size_of::<r_mmap_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_mmap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_mmap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_mmap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mmap_t>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mmap_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mmap_t>())).base as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mmap_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mmap_t>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mmap_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mmap_t>())).fd as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mmap_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mmap_t>())).rw as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mmap_t),
            "::",
            stringify!(rw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mmap_t>())).filename as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mmap_t),
            "::",
            stringify!(filename)
        )
    );
}
pub type RMmap = r_mmap_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_mem_pool_t {
    pub nodes: *mut *mut ::std::os::raw::c_uchar,
    pub ncount: ::std::os::raw::c_int,
    pub npool: ::std::os::raw::c_int,
    pub nodesize: ::std::os::raw::c_int,
    pub poolsize: ::std::os::raw::c_int,
    pub poolcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_mem_pool_t() {
    assert_eq!(
        ::std::mem::size_of::<r_mem_pool_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_mem_pool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_mem_pool_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_mem_pool_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mem_pool_t>())).nodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mem_pool_t),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mem_pool_t>())).ncount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mem_pool_t),
            "::",
            stringify!(ncount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mem_pool_t>())).npool as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mem_pool_t),
            "::",
            stringify!(npool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mem_pool_t>())).nodesize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mem_pool_t),
            "::",
            stringify!(nodesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mem_pool_t>())).poolsize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mem_pool_t),
            "::",
            stringify!(poolsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mem_pool_t>())).poolcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mem_pool_t),
            "::",
            stringify!(poolcount)
        )
    );
}
pub type RMemoryPool = r_mem_pool_t;
extern "C" {
    pub fn r_mem_get_num(
        b: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_mem_pool_deinit(pool: *mut RMemoryPool) -> *mut RMemoryPool;
}
extern "C" {
    pub fn r_mem_pool_new(
        nodesize: ::std::os::raw::c_int,
        poolsize: ::std::os::raw::c_int,
        poolcount: ::std::os::raw::c_int,
    ) -> *mut RMemoryPool;
}
extern "C" {
    pub fn r_mem_pool_free(pool: *mut RMemoryPool) -> *mut RMemoryPool;
}
extern "C" {
    pub fn r_mem_pool_alloc(pool: *mut RMemoryPool) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_mem_dup(
        s: *const ::std::os::raw::c_void,
        l: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_mem_alloc(sz: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_mem_free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_mem_memzero(arg1: *mut ::std::os::raw::c_void, arg2: size_t);
}
extern "C" {
    pub fn r_mem_reverse(b: *mut ::std::os::raw::c_uchar, l: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_mem_protect(
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        prot: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_mem_set_num(
        dest: *mut ::std::os::raw::c_uchar,
        dest_size: ::std::os::raw::c_int,
        num: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_mem_eq(
        a: *mut ::std::os::raw::c_uchar,
        b: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_mem_copybits(
        dst: *mut ::std::os::raw::c_uchar,
        src: *const ::std::os::raw::c_uchar,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_mem_copybits_delta(
        dst: *mut ::std::os::raw::c_uchar,
        doff: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_uchar,
        soff: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_mem_copyloop(
        dest: *mut ::std::os::raw::c_uchar,
        orig: *const ::std::os::raw::c_uchar,
        dsize: ::std::os::raw::c_int,
        osize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_mem_swaporcopy(
        dest: *mut ::std::os::raw::c_uchar,
        src: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        big_endian: bool,
    );
}
extern "C" {
    pub fn r_mem_swapendian(
        dest: *mut ::std::os::raw::c_uchar,
        orig: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_mem_swap(buf: *mut ::std::os::raw::c_uchar, buf_len: size_t);
}
extern "C" {
    pub fn r_mem_cmp_mask(
        dest: *const ::std::os::raw::c_uchar,
        orig: *const ::std::os::raw::c_uchar,
        mask: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_mem_mem(
        haystack: *const ::std::os::raw::c_uchar,
        hlen: ::std::os::raw::c_int,
        needle: *const ::std::os::raw::c_uchar,
        nlen: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_mem_mem_aligned(
        haystack: *const ::std::os::raw::c_uchar,
        hlen: ::std::os::raw::c_int,
        needle: *const ::std::os::raw::c_uchar,
        nlen: ::std::os::raw::c_int,
        align: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_mem_count(addr: *mut *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_mem_is_printable(a: *const ::std::os::raw::c_uchar, la: ::std::os::raw::c_int)
        -> bool;
}
extern "C" {
    pub fn r_mem_is_zero(b: *const ::std::os::raw::c_uchar, l: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_mem_mmap_resize(
        m: *mut RMmap,
        newsize: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_file_is_abspath(file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_file_is_c(file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_file_is_directory(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_file_is_regular(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_file_truncate(
        filename: *const ::std::os::raw::c_char,
        newsize: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_file_new(root: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_size(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_file_root(
        root: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_mmap(
        file: *const ::std::os::raw::c_char,
        rw: bool,
        base: ::std::os::raw::c_ulonglong,
    ) -> *mut RMmap;
}
extern "C" {
    pub fn r_file_mmap_read(
        file: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_file_mmap_write(
        file: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_file_mmap_free(m: *mut RMmap);
}
extern "C" {
    pub fn r_file_chmod(
        file: *const ::std::os::raw::c_char,
        mod_: *const ::std::os::raw::c_char,
        recursive: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_file_temp(prefix: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_path(bin: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_binsh() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_basename(path: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_dirname(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_abspath_rel(
        cwd: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_abspath(file: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_inflate(
        src: *const ::std::os::raw::c_uchar,
        srcLen: ::std::os::raw::c_int,
        srcConsumed: *mut ::std::os::raw::c_int,
        dstLen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_inflate_raw(
        src: *const ::std::os::raw::c_uchar,
        srcLen: ::std::os::raw::c_int,
        srcConsumed: *mut ::std::os::raw::c_int,
        dstLen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_file_gzslurp(
        str_: *const ::std::os::raw::c_char,
        outlen: *mut ::std::os::raw::c_int,
        origonfail: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_stdin_slurp(sz: *mut ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_slurp(
        str_: *const ::std::os::raw::c_char,
        usz: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_slurp_range(
        str_: *const ::std::os::raw::c_char,
        off: ::std::os::raw::c_ulonglong,
        sz: ::std::os::raw::c_int,
        osz: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_slurp_random_line(
        file: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_slurp_random_line_count(
        file: *const ::std::os::raw::c_char,
        linecount: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_slurp_hexpairs(
        str_: *const ::std::os::raw::c_char,
        usz: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_file_dump(
        file: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        append: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_file_touch(file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_file_hexdump(
        file: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        append: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_file_rm(file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_file_exists(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_file_fexists(fmt: *const ::std::os::raw::c_char, ...) -> bool;
}
extern "C" {
    pub fn r_file_slurp_line(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        context: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_slurp_lines(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_slurp_lines_from_bottom(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_mkstemp(
        prefix: *const ::std::os::raw::c_char,
        oname: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_file_tmpdir() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_readlink(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_file_copy(
        src: *const ::std::os::raw::c_char,
        dst: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_file_move(
        src: *const ::std::os::raw::c_char,
        dst: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_file_glob(
        globbed_path: *const ::std::os::raw::c_char,
        maxdepth: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_file_mmap_arch(
        map: *mut RMmap,
        filename: *const ::std::os::raw::c_char,
        fd: ::std::os::raw::c_int,
    ) -> *mut RMmap;
}
extern "C" {
    pub fn r_file_lsrf(dir: *const ::std::os::raw::c_char) -> *mut RList;
}
extern "C" {
    pub fn r_assert_log(level: RLogLevel, fmt: *const ::std::os::raw::c_char, ...);
}
pub type RPVectorComparator = ::std::option::Option<
    unsafe extern "C" fn(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RVectorFree = ::std::option::Option<
    unsafe extern "C" fn(e: *mut ::std::os::raw::c_void, user: *mut ::std::os::raw::c_void),
>;
pub type RPVectorFree = ::std::option::Option<unsafe extern "C" fn(e: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_vector_t {
    pub a: *mut ::std::os::raw::c_void,
    pub len: size_t,
    pub capacity: size_t,
    pub elem_size: size_t,
    pub free: RVectorFree,
    pub free_user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_vector_t() {
    assert_eq!(
        ::std::mem::size_of::<r_vector_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_vector_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_vector_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_vector_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_vector_t>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_vector_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_vector_t>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_vector_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_vector_t>())).capacity as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_vector_t),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_vector_t>())).elem_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_vector_t),
            "::",
            stringify!(elem_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_vector_t>())).free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_vector_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_vector_t>())).free_user as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_vector_t),
            "::",
            stringify!(free_user)
        )
    );
}
pub type RVector = r_vector_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pvector_t {
    pub v: RVector,
}
#[test]
fn bindgen_test_layout_r_pvector_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pvector_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_pvector_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_pvector_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_pvector_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pvector_t>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pvector_t),
            "::",
            stringify!(v)
        )
    );
}
pub type RPVector = r_pvector_t;
extern "C" {
    pub fn r_vector_init(
        vec: *mut RVector,
        elem_size: size_t,
        free: RVectorFree,
        free_user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_vector_new(
        elem_size: size_t,
        free: RVectorFree,
        free_user: *mut ::std::os::raw::c_void,
    ) -> *mut RVector;
}
extern "C" {
    pub fn r_vector_fini(vec: *mut RVector);
}
extern "C" {
    pub fn r_vector_free(vec: *mut RVector);
}
extern "C" {
    pub fn r_vector_clone(vec: *mut RVector) -> *mut RVector;
}
extern "C" {
    pub fn r_vector_clear(vec: *mut RVector);
}
extern "C" {
    pub fn r_vector_assign(
        vec: *mut RVector,
        p: *mut ::std::os::raw::c_void,
        elem: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_vector_assign_at(
        vec: *mut RVector,
        index: size_t,
        elem: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_vector_remove_at(vec: *mut RVector, index: size_t, into: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_vector_insert(
        vec: *mut RVector,
        index: size_t,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_vector_insert_range(
        vec: *mut RVector,
        index: size_t,
        first: *mut ::std::os::raw::c_void,
        count: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_vector_pop(vec: *mut RVector, into: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_vector_pop_front(vec: *mut RVector, into: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_vector_push(
        vec: *mut RVector,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_vector_push_front(
        vec: *mut RVector,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_vector_reserve(vec: *mut RVector, capacity: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_vector_shrink(vec: *mut RVector) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_vector_flush(vec: *mut RVector) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_pvector_init(vec: *mut RPVector, free: RPVectorFree);
}
extern "C" {
    pub fn r_pvector_fini(vec: *mut RPVector);
}
extern "C" {
    pub fn r_pvector_new(free: RPVectorFree) -> *mut RPVector;
}
extern "C" {
    pub fn r_pvector_new_with_len(free: RPVectorFree, length: size_t) -> *mut RPVector;
}
extern "C" {
    pub fn r_pvector_clear(vec: *mut RPVector);
}
extern "C" {
    pub fn r_pvector_free(vec: *mut RPVector);
}
extern "C" {
    pub fn r_pvector_contains(
        vec: *mut RPVector,
        x: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_pvector_remove_at(vec: *mut RPVector, index: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_pvector_remove_data(vec: *mut RPVector, x: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_pvector_pop(vec: *mut RPVector) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_pvector_pop_front(vec: *mut RPVector) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_pvector_sort(vec: *mut RPVector, cmp: RPVectorComparator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_up_kv {
    pub key: ::std::os::raw::c_ulonglong,
    pub value: *mut ::std::os::raw::c_void,
    pub key_len: ::std::os::raw::c_uint,
    pub value_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ht_up_kv() {
    assert_eq!(
        ::std::mem::size_of::<ht_up_kv>(),
        24usize,
        concat!("Size of: ", stringify!(ht_up_kv))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_up_kv>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_up_kv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_kv>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_kv),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_kv>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_kv),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_kv>())).key_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_kv),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_kv>())).value_len as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_kv),
            "::",
            stringify!(value_len)
        )
    );
}
pub type HtUPKv = ht_up_kv;
pub type HtUPKvFreeFunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut HtUPKv)>;
pub type HtUPDupKey = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong,
>;
pub type HtUPDupValue = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type HtUPCalcSizeK = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint,
>;
pub type HtUPCalcSizeV = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type HtUPHashFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint,
>;
pub type HtUPListComparator = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int,
>;
pub type HtUPForeachCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        arg1: ::std::os::raw::c_ulonglong,
        arg2: *const ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_up_bucket_t {
    pub arr: *mut HtUPKv,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ht_up_bucket_t() {
    assert_eq!(
        ::std::mem::size_of::<ht_up_bucket_t>(),
        16usize,
        concat!("Size of: ", stringify!(ht_up_bucket_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_up_bucket_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_up_bucket_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_bucket_t>())).arr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_bucket_t),
            "::",
            stringify!(arr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_bucket_t>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_bucket_t),
            "::",
            stringify!(count)
        )
    );
}
pub type HtUPBucket = ht_up_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_up_options_t {
    pub cmp: HtUPListComparator,
    pub hashfn: HtUPHashFunction,
    pub dupkey: HtUPDupKey,
    pub dupvalue: HtUPDupValue,
    pub calcsizeK: HtUPCalcSizeK,
    pub calcsizeV: HtUPCalcSizeV,
    pub freefn: HtUPKvFreeFunc,
    pub elem_size: size_t,
}
#[test]
fn bindgen_test_layout_ht_up_options_t() {
    assert_eq!(
        ::std::mem::size_of::<ht_up_options_t>(),
        64usize,
        concat!("Size of: ", stringify!(ht_up_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_up_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_up_options_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_options_t>())).cmp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_options_t>())).hashfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(hashfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_options_t>())).dupkey as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(dupkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_options_t>())).dupvalue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(dupvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_options_t>())).calcsizeK as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(calcsizeK)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_options_t>())).calcsizeV as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(calcsizeV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_options_t>())).freefn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(freefn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_options_t>())).elem_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_options_t),
            "::",
            stringify!(elem_size)
        )
    );
}
pub type HtUPOptions = ht_up_options_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_up_t {
    pub size: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_uint,
    pub table: *mut HtUPBucket,
    pub prime_idx: ::std::os::raw::c_uint,
    pub opt: HtUPOptions,
}
#[test]
fn bindgen_test_layout_ht_up_t() {
    assert_eq!(
        ::std::mem::size_of::<ht_up_t>(),
        88usize,
        concat!("Size of: ", stringify!(ht_up_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_up_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_up_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_t>())).count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_t>())).table as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_t),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_t>())).prime_idx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_t),
            "::",
            stringify!(prime_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_up_t>())).opt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_up_t),
            "::",
            stringify!(opt)
        )
    );
}
pub type HtUP = ht_up_t;
extern "C" {
    pub fn ht_up_new_opt(opt: *mut HtUPOptions) -> *mut HtUP;
}
extern "C" {
    pub fn ht_up_free(ht: *mut HtUP);
}
extern "C" {
    pub fn ht_up_insert(
        ht: *mut HtUP,
        key: ::std::os::raw::c_ulonglong,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_up_update(
        ht: *mut HtUP,
        key: ::std::os::raw::c_ulonglong,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_up_update_key(
        ht: *mut HtUP,
        old_key: ::std::os::raw::c_ulonglong,
        new_key: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn ht_up_delete(ht: *mut HtUP, key: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn ht_up_find(
        ht: *mut HtUP,
        key: ::std::os::raw::c_ulonglong,
        found: *mut bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ht_up_foreach(ht: *mut HtUP, cb: HtUPForeachCallback, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ht_up_find_kv(
        ht: *mut HtUP,
        key: ::std::os::raw::c_ulonglong,
        found: *mut bool,
    ) -> *mut HtUPKv;
}
extern "C" {
    pub fn ht_up_insert_kv(ht: *mut HtUP, kv: *mut HtUPKv, update: bool) -> bool;
}
extern "C" {
    pub fn ht_up_new0() -> *mut HtUP;
}
extern "C" {
    pub fn ht_up_new(
        valdup: HtUPDupValue,
        pair_free: HtUPKvFreeFunc,
        valueSize: HtUPCalcSizeV,
    ) -> *mut HtUP;
}
extern "C" {
    pub fn ht_up_new_size(
        initial_size: ::std::os::raw::c_uint,
        valdup: HtUPDupValue,
        pair_free: HtUPKvFreeFunc,
        valueSize: HtUPCalcSizeV,
    ) -> *mut HtUP;
}
pub type tcflag_t = ::std::os::raw::c_ulong;
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_cc: [cc_t; 20usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
#[test]
fn bindgen_test_layout_termios() {
    assert_eq!(
        ::std::mem::size_of::<termios>(),
        72usize,
        concat!("Size of: ", stringify!(termios))
    );
    assert_eq!(
        ::std::mem::align_of::<termios>(),
        8usize,
        concat!("Alignment of ", stringify!(termios))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_iflag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_oflag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_cflag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_lflag as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_cc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_ispeed as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_ispeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_ospeed as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_ospeed)
        )
    );
}
extern "C" {
    pub fn cfgetispeed(arg1: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfgetospeed(arg1: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfsetispeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetospeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetattr(arg1: ::std::os::raw::c_int, arg2: *mut termios) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsetattr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcdrain(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflow(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflush(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsendbreak(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfmakeraw(arg1: *mut termios);
}
extern "C" {
    pub fn cfsetspeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    assert_eq!(
        ::std::mem::size_of::<winsize>(),
        8usize,
        concat!("Size of: ", stringify!(winsize))
    );
    assert_eq!(
        ::std::mem::align_of::<winsize>(),
        2usize,
        concat!("Alignment of ", stringify!(winsize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_row as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_col as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_xpixel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_xpixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_ypixel as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_ypixel)
        )
    );
}
extern "C" {
    pub fn tcgetsid(arg1: ::std::os::raw::c_int) -> pid_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttysize {
    pub ts_lines: ::std::os::raw::c_ushort,
    pub ts_cols: ::std::os::raw::c_ushort,
    pub ts_xxx: ::std::os::raw::c_ushort,
    pub ts_yyy: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_ttysize() {
    assert_eq!(
        ::std::mem::size_of::<ttysize>(),
        8usize,
        concat!("Size of: ", stringify!(ttysize))
    );
    assert_eq!(
        ::std::mem::align_of::<ttysize>(),
        2usize,
        concat!("Alignment of ", stringify!(ttysize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ttysize>())).ts_lines as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ttysize),
            "::",
            stringify!(ts_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ttysize>())).ts_cols as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ttysize),
            "::",
            stringify!(ts_cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ttysize>())).ts_xxx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ttysize),
            "::",
            stringify!(ts_xxx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ttysize>())).ts_yyy as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ttysize),
            "::",
            stringify!(ts_yyy)
        )
    );
}
extern "C" {
    pub fn ioctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type sae_associd_t = __uint32_t;
pub type sae_connid_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sa_endpoints {
    pub sae_srcif: ::std::os::raw::c_uint,
    pub sae_srcaddr: *const sockaddr,
    pub sae_srcaddrlen: socklen_t,
    pub sae_dstaddr: *const sockaddr,
    pub sae_dstaddrlen: socklen_t,
}
#[test]
fn bindgen_test_layout_sa_endpoints() {
    assert_eq!(
        ::std::mem::size_of::<sa_endpoints>(),
        40usize,
        concat!("Size of: ", stringify!(sa_endpoints))
    );
    assert_eq!(
        ::std::mem::align_of::<sa_endpoints>(),
        8usize,
        concat!("Alignment of ", stringify!(sa_endpoints))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sa_endpoints>())).sae_srcif as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_srcif)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sa_endpoints>())).sae_srcaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_srcaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sa_endpoints>())).sae_srcaddrlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_srcaddrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sa_endpoints>())).sae_dstaddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_dstaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sa_endpoints>())).sae_dstaddrlen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sa_endpoints),
            "::",
            stringify!(sae_dstaddrlen)
        )
    );
}
pub type sa_endpoints_t = sa_endpoints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
#[test]
fn bindgen_test_layout_so_np_extensions() {
    assert_eq!(
        ::std::mem::size_of::<so_np_extensions>(),
        8usize,
        concat!("Size of: ", stringify!(so_np_extensions))
    );
    assert_eq!(
        ::std::mem::align_of::<so_np_extensions>(),
        4usize,
        concat!("Alignment of ", stringify!(so_np_extensions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<so_np_extensions>())).npx_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(so_np_extensions),
            "::",
            stringify!(npx_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<so_np_extensions>())).npx_mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(so_np_extensions),
            "::",
            stringify!(npx_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        1usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
#[test]
fn bindgen_test_layout_sockproto() {
    assert_eq!(
        ::std::mem::size_of::<sockproto>(),
        4usize,
        concat!("Size of: ", stringify!(sockproto))
    );
    assert_eq!(
        ::std::mem::align_of::<sockproto>(),
        2usize,
        concat!("Alignment of ", stringify!(sockproto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockproto>())).sp_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockproto),
            "::",
            stringify!(sp_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockproto>())).sp_protocol as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockproto),
            "::",
            stringify!(sp_protocol)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_pad1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_pad2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_pad2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        48usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        12usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_level as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sf_hdtr() {
    assert_eq!(
        ::std::mem::size_of::<sf_hdtr>(),
        32usize,
        concat!("Size of: ", stringify!(sf_hdtr))
    );
    assert_eq!(
        ::std::mem::align_of::<sf_hdtr>(),
        8usize,
        concat!("Alignment of ", stringify!(sf_hdtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sf_hdtr>())).headers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sf_hdtr>())).hdr_cnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(hdr_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sf_hdtr>())).trailers as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(trailers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sf_hdtr>())).trl_cnt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(trl_cnt)
        )
    );
}
extern "C" {
    pub fn accept(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvfrom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn send(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *const msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendto(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn setsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sendfile(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: *mut off_t,
        arg5: *mut sf_hdtr,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pfctlinput(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr);
}
extern "C" {
    pub fn connectx(
        arg1: ::std::os::raw::c_int,
        arg2: *const sa_endpoints_t,
        arg3: sae_associd_t,
        arg4: ::std::os::raw::c_uint,
        arg5: *const iovec,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut size_t,
        arg8: *mut sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn disconnectx(
        arg1: ::std::os::raw::c_int,
        arg2: sae_associd_t,
        arg3: sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_version() -> *const ::std::os::raw::c_char;
}
pub type RConsGetSize = ::std::option::Option<
    unsafe extern "C" fn(rows: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type RConsGetCursor = ::std::option::Option<
    unsafe extern "C" fn(rows: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type RConsIsBreaked = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type RConsFlush = ::std::option::Option<unsafe extern "C" fn()>;
pub type RConsGrepCallback =
    ::std::option::Option<unsafe extern "C" fn(grep: *const ::std::os::raw::c_char)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cons_bind_t {
    pub get_size: RConsGetSize,
    pub get_cursor: RConsGetCursor,
    pub cb_printf: PrintfCallback,
    pub is_breaked: RConsIsBreaked,
    pub cb_flush: RConsFlush,
    pub cb_grep: RConsGrepCallback,
}
#[test]
fn bindgen_test_layout_r_cons_bind_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cons_bind_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_cons_bind_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cons_bind_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cons_bind_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_bind_t>())).get_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_bind_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_bind_t>())).get_cursor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_bind_t),
            "::",
            stringify!(get_cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_bind_t>())).cb_printf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_bind_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_bind_t>())).is_breaked as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_bind_t),
            "::",
            stringify!(is_breaked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_bind_t>())).cb_flush as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_bind_t),
            "::",
            stringify!(cb_flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_bind_t>())).cb_grep as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_bind_t),
            "::",
            stringify!(cb_grep)
        )
    );
}
pub type RConsBind = r_cons_bind_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cons_grep_t {
    pub strings: [[::std::os::raw::c_char; 64usize]; 10usize],
    pub nstrings: ::std::os::raw::c_int,
    pub str_: *mut ::std::os::raw::c_char,
    pub counter: ::std::os::raw::c_int,
    pub charCounter: bool,
    pub less: ::std::os::raw::c_int,
    pub hud: bool,
    pub human: bool,
    pub json: ::std::os::raw::c_int,
    pub json_path: *mut ::std::os::raw::c_char,
    pub range_line: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub sort: ::std::os::raw::c_int,
    pub sort_row: ::std::os::raw::c_int,
    pub sort_invert: bool,
    pub f_line: ::std::os::raw::c_int,
    pub l_line: ::std::os::raw::c_int,
    pub tokens: [::std::os::raw::c_int; 64usize],
    pub tokens_used: ::std::os::raw::c_int,
    pub amp: ::std::os::raw::c_int,
    pub zoom: ::std::os::raw::c_int,
    pub zoomy: ::std::os::raw::c_int,
    pub neg: ::std::os::raw::c_int,
    pub begin: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
    pub icase: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_cons_grep_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cons_grep_t>(),
        1008usize,
        concat!("Size of: ", stringify!(r_cons_grep_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cons_grep_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cons_grep_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).strings as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).nstrings as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(nstrings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).str_ as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).counter as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).charCounter as *const _ as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(charCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).less as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(less)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).hud as *const _ as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(hud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).human as *const _ as usize },
        669usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(human)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).json as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(json)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).json_path as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(json_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).range_line as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(range_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).line as *const _ as usize },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).sort as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(sort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).sort_row as *const _ as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(sort_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).sort_invert as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(sort_invert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).f_line as *const _ as usize },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(f_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).l_line as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(l_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).tokens as *const _ as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).tokens_used as *const _ as usize },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(tokens_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).amp as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(amp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).zoom as *const _ as usize },
        980usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(zoom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).zoomy as *const _ as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(zoomy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).neg as *const _ as usize },
        988usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(neg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).begin as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).end as *const _ as usize },
        996usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_grep_t>())).icase as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_grep_t),
            "::",
            stringify!(icase)
        )
    );
}
pub type RConsGrep = r_cons_grep_t;
pub const ALPHA_RESET: ::std::os::raw::c_uint = 0;
pub const ALPHA_FG: ::std::os::raw::c_uint = 1;
pub const ALPHA_BG: ::std::os::raw::c_uint = 2;
pub const ALPHA_FGBG: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const R_CONS_ATTR_BOLD: ::std::os::raw::c_uint = 2;
pub const R_CONS_ATTR_DIM: ::std::os::raw::c_uint = 4;
pub const R_CONS_ATTR_ITALIC: ::std::os::raw::c_uint = 8;
pub const R_CONS_ATTR_UNDERLINE: ::std::os::raw::c_uint = 16;
pub const R_CONS_ATTR_BLINK: ::std::os::raw::c_uint = 32;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcolor_t {
    pub attr: ::std::os::raw::c_uchar,
    pub a: ::std::os::raw::c_uchar,
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
    pub r2: ::std::os::raw::c_uchar,
    pub g2: ::std::os::raw::c_uchar,
    pub b2: ::std::os::raw::c_uchar,
    pub id16: ::std::os::raw::c_schar,
}
#[test]
fn bindgen_test_layout_rcolor_t() {
    assert_eq!(
        ::std::mem::size_of::<rcolor_t>(),
        9usize,
        concat!("Size of: ", stringify!(rcolor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rcolor_t>(),
        1usize,
        concat!("Alignment of ", stringify!(rcolor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rcolor_t>())).attr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rcolor_t>())).a as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rcolor_t>())).r as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rcolor_t>())).g as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rcolor_t>())).b as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rcolor_t>())).r2 as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(r2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rcolor_t>())).g2 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(g2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rcolor_t>())).b2 as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(b2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rcolor_t>())).id16 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rcolor_t),
            "::",
            stringify!(id16)
        )
    );
}
pub type RColor = rcolor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cons_palette_t {
    pub b0x00: RColor,
    pub b0x7f: RColor,
    pub b0xff: RColor,
    pub args: RColor,
    pub bin: RColor,
    pub btext: RColor,
    pub call: RColor,
    pub cjmp: RColor,
    pub cmp: RColor,
    pub comment: RColor,
    pub usercomment: RColor,
    pub creg: RColor,
    pub flag: RColor,
    pub fline: RColor,
    pub floc: RColor,
    pub flow: RColor,
    pub flow2: RColor,
    pub fname: RColor,
    pub help: RColor,
    pub input: RColor,
    pub invalid: RColor,
    pub jmp: RColor,
    pub label: RColor,
    pub math: RColor,
    pub mov: RColor,
    pub nop: RColor,
    pub num: RColor,
    pub offset: RColor,
    pub other: RColor,
    pub pop: RColor,
    pub prompt: RColor,
    pub push: RColor,
    pub crypto: RColor,
    pub reg: RColor,
    pub reset: RColor,
    pub ret: RColor,
    pub swi: RColor,
    pub trap: RColor,
    pub ucall: RColor,
    pub ujmp: RColor,
    pub ai_read: RColor,
    pub ai_write: RColor,
    pub ai_exec: RColor,
    pub ai_seq: RColor,
    pub ai_ascii: RColor,
    pub gui_cflow: RColor,
    pub gui_dataoffset: RColor,
    pub gui_background: RColor,
    pub gui_alt_background: RColor,
    pub gui_border: RColor,
    pub wordhl: RColor,
    pub linehl: RColor,
    pub func_var: RColor,
    pub func_var_type: RColor,
    pub func_var_addr: RColor,
    pub widget_bg: RColor,
    pub widget_sel: RColor,
    pub graph_box: RColor,
    pub graph_box2: RColor,
    pub graph_box3: RColor,
    pub graph_box4: RColor,
    pub graph_true: RColor,
    pub graph_false: RColor,
    pub graph_trufae: RColor,
    pub graph_traced: RColor,
    pub graph_current: RColor,
    pub graph_diff_match: RColor,
    pub graph_diff_unmatch: RColor,
    pub graph_diff_unknown: RColor,
    pub graph_diff_new: RColor,
}
#[test]
fn bindgen_test_layout_r_cons_palette_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cons_palette_t>(),
        630usize,
        concat!("Size of: ", stringify!(r_cons_palette_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cons_palette_t>(),
        1usize,
        concat!("Alignment of ", stringify!(r_cons_palette_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).b0x00 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(b0x00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).b0x7f as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(b0x7f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).b0xff as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(b0xff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).args as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).bin as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(bin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).btext as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(btext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).call as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).cjmp as *const _ as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(cjmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).cmp as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).comment as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).usercomment as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(usercomment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).creg as *const _ as usize },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(creg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).flag as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).fline as *const _ as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(fline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).floc as *const _ as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(floc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).flow as *const _ as usize },
        135usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(flow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).flow2 as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(flow2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).fname as *const _ as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).help as *const _ as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(help)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).input as *const _ as usize },
        171usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).invalid as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(invalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).jmp as *const _ as usize },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).label as *const _ as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).math as *const _ as usize },
        207usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(math)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).mov as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(mov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).nop as *const _ as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(nop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).num as *const _ as usize },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).offset as *const _ as usize },
        243usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).other as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).pop as *const _ as usize },
        261usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(pop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).prompt as *const _ as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(prompt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).push as *const _ as usize },
        279usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(push)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).crypto as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(crypto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).reg as *const _ as usize },
        297usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).reset as *const _ as usize },
        306usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).ret as *const _ as usize },
        315usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).swi as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(swi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).trap as *const _ as usize },
        333usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(trap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).ucall as *const _ as usize },
        342usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(ucall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).ujmp as *const _ as usize },
        351usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(ujmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).ai_read as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(ai_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).ai_write as *const _ as usize },
        369usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(ai_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).ai_exec as *const _ as usize },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(ai_exec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).ai_seq as *const _ as usize },
        387usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(ai_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).ai_ascii as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(ai_ascii)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).gui_cflow as *const _ as usize },
        405usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(gui_cflow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).gui_dataoffset as *const _ as usize },
        414usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(gui_dataoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).gui_background as *const _ as usize },
        423usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(gui_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_palette_t>())).gui_alt_background as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(gui_alt_background)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).gui_border as *const _ as usize },
        441usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(gui_border)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).wordhl as *const _ as usize },
        450usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(wordhl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).linehl as *const _ as usize },
        459usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(linehl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).func_var as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(func_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).func_var_type as *const _ as usize },
        477usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(func_var_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).func_var_addr as *const _ as usize },
        486usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(func_var_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).widget_bg as *const _ as usize },
        495usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(widget_bg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).widget_sel as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(widget_sel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).graph_box as *const _ as usize },
        513usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_box)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).graph_box2 as *const _ as usize },
        522usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_box2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).graph_box3 as *const _ as usize },
        531usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_box3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).graph_box4 as *const _ as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_box4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).graph_true as *const _ as usize },
        549usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_true)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).graph_false as *const _ as usize },
        558usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_false)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).graph_trufae as *const _ as usize },
        567usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_trufae)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).graph_traced as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_traced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).graph_current as *const _ as usize },
        585usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_current)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_palette_t>())).graph_diff_match as *const _ as usize
        },
        594usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_diff_match)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_palette_t>())).graph_diff_unmatch as *const _ as usize
        },
        603usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_diff_unmatch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_palette_t>())).graph_diff_unknown as *const _ as usize
        },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_diff_unknown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_palette_t>())).graph_diff_new as *const _ as usize },
        621usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_palette_t),
            "::",
            stringify!(graph_diff_new)
        )
    );
}
pub type RConsPalette = r_cons_palette_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cons_printable_palette_t {
    pub b0x00: *mut ::std::os::raw::c_char,
    pub b0x7f: *mut ::std::os::raw::c_char,
    pub b0xff: *mut ::std::os::raw::c_char,
    pub args: *mut ::std::os::raw::c_char,
    pub bin: *mut ::std::os::raw::c_char,
    pub btext: *mut ::std::os::raw::c_char,
    pub call: *mut ::std::os::raw::c_char,
    pub cjmp: *mut ::std::os::raw::c_char,
    pub cmp: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub usercomment: *mut ::std::os::raw::c_char,
    pub creg: *mut ::std::os::raw::c_char,
    pub flag: *mut ::std::os::raw::c_char,
    pub fline: *mut ::std::os::raw::c_char,
    pub floc: *mut ::std::os::raw::c_char,
    pub flow: *mut ::std::os::raw::c_char,
    pub flow2: *mut ::std::os::raw::c_char,
    pub fname: *mut ::std::os::raw::c_char,
    pub help: *mut ::std::os::raw::c_char,
    pub input: *mut ::std::os::raw::c_char,
    pub invalid: *mut ::std::os::raw::c_char,
    pub jmp: *mut ::std::os::raw::c_char,
    pub label: *mut ::std::os::raw::c_char,
    pub math: *mut ::std::os::raw::c_char,
    pub mov: *mut ::std::os::raw::c_char,
    pub nop: *mut ::std::os::raw::c_char,
    pub num: *mut ::std::os::raw::c_char,
    pub offset: *mut ::std::os::raw::c_char,
    pub other: *mut ::std::os::raw::c_char,
    pub pop: *mut ::std::os::raw::c_char,
    pub prompt: *mut ::std::os::raw::c_char,
    pub push: *mut ::std::os::raw::c_char,
    pub crypto: *mut ::std::os::raw::c_char,
    pub reg: *mut ::std::os::raw::c_char,
    pub reset: *mut ::std::os::raw::c_char,
    pub ret: *mut ::std::os::raw::c_char,
    pub swi: *mut ::std::os::raw::c_char,
    pub trap: *mut ::std::os::raw::c_char,
    pub ucall: *mut ::std::os::raw::c_char,
    pub ujmp: *mut ::std::os::raw::c_char,
    pub ai_read: *mut ::std::os::raw::c_char,
    pub ai_write: *mut ::std::os::raw::c_char,
    pub ai_exec: *mut ::std::os::raw::c_char,
    pub ai_seq: *mut ::std::os::raw::c_char,
    pub ai_ascii: *mut ::std::os::raw::c_char,
    pub ai_unmap: *mut ::std::os::raw::c_char,
    pub gui_cflow: *mut ::std::os::raw::c_char,
    pub gui_dataoffset: *mut ::std::os::raw::c_char,
    pub gui_background: *mut ::std::os::raw::c_char,
    pub gui_alt_background: *mut ::std::os::raw::c_char,
    pub gui_border: *mut ::std::os::raw::c_char,
    pub wordhl: *mut ::std::os::raw::c_char,
    pub linehl: *mut ::std::os::raw::c_char,
    pub func_var: *mut ::std::os::raw::c_char,
    pub func_var_type: *mut ::std::os::raw::c_char,
    pub func_var_addr: *mut ::std::os::raw::c_char,
    pub widget_bg: *mut ::std::os::raw::c_char,
    pub widget_sel: *mut ::std::os::raw::c_char,
    pub graph_box: *mut ::std::os::raw::c_char,
    pub graph_box2: *mut ::std::os::raw::c_char,
    pub graph_box3: *mut ::std::os::raw::c_char,
    pub graph_box4: *mut ::std::os::raw::c_char,
    pub graph_diff_match: *mut ::std::os::raw::c_char,
    pub graph_diff_unmatch: *mut ::std::os::raw::c_char,
    pub graph_diff_unknown: *mut ::std::os::raw::c_char,
    pub graph_diff_new: *mut ::std::os::raw::c_char,
    pub graph_true: *mut ::std::os::raw::c_char,
    pub graph_false: *mut ::std::os::raw::c_char,
    pub graph_trufae: *mut ::std::os::raw::c_char,
    pub graph_traced: *mut ::std::os::raw::c_char,
    pub graph_current: *mut ::std::os::raw::c_char,
    pub rainbow: *mut *mut ::std::os::raw::c_char,
    pub rainbow_sz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_cons_printable_palette_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cons_printable_palette_t>(),
        584usize,
        concat!("Size of: ", stringify!(r_cons_printable_palette_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cons_printable_palette_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cons_printable_palette_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).b0x00 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(b0x00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).b0x7f as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(b0x7f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).b0xff as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(b0xff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).bin as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(bin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).btext as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(btext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).call as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).cjmp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(cjmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).cmp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).comment as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).usercomment as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(usercomment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).creg as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(creg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).flag as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).fline as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(fline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).floc as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(floc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).flow as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(flow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).flow2 as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(flow2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).fname as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).help as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(help)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).input as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).invalid as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(invalid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).jmp as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).label as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).math as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(math)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).mov as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(mov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).nop as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(nop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).num as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).offset as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).other as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).pop as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(pop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).prompt as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(prompt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).push as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(push)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).crypto as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(crypto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).reg as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).reset as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).ret as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).swi as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(swi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).trap as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(trap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).ucall as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(ucall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_printable_palette_t>())).ujmp as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(ujmp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).ai_read as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(ai_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).ai_write as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(ai_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).ai_exec as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(ai_exec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).ai_seq as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(ai_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).ai_ascii as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(ai_ascii)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).ai_unmap as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(ai_unmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).gui_cflow as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(gui_cflow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).gui_dataoffset as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(gui_dataoffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).gui_background as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(gui_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).gui_alt_background as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(gui_alt_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).gui_border as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(gui_border)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).wordhl as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(wordhl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).linehl as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(linehl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).func_var as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(func_var)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).func_var_type as *const _
                as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(func_var_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).func_var_addr as *const _
                as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(func_var_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).widget_bg as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(widget_bg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).widget_sel as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(widget_sel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_box as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_box)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_box2 as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_box2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_box3 as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_box3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_box4 as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_box4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_diff_match as *const _
                as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_diff_match)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_diff_unmatch as *const _
                as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_diff_unmatch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_diff_unknown as *const _
                as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_diff_unknown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_diff_new as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_diff_new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_true as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_true)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_false as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_false)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_trufae as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_trufae)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_traced as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_traced)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).graph_current as *const _
                as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(graph_current)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).rainbow as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(rainbow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_printable_palette_t>())).rainbow_sz as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_printable_palette_t),
            "::",
            stringify!(rainbow_sz)
        )
    );
}
pub type RConsPrintablePalette = r_cons_printable_palette_t;
pub type RConsEvent =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cons_canvas_t {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub b: *mut *mut ::std::os::raw::c_char,
    pub blen: *mut ::std::os::raw::c_int,
    pub bsize: *mut ::std::os::raw::c_int,
    pub attr: *const ::std::os::raw::c_char,
    pub attrs: *mut HtUP,
    pub constpool: RStrConstPool,
    pub sx: ::std::os::raw::c_int,
    pub sy: ::std::os::raw::c_int,
    pub color: ::std::os::raw::c_int,
    pub linemode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_cons_canvas_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cons_canvas_t>(),
        80usize,
        concat!("Size of: ", stringify!(r_cons_canvas_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cons_canvas_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cons_canvas_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).h as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).b as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).blen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(blen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).bsize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(bsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).attr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).attrs as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).constpool as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(constpool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).sx as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(sx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).sy as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(sy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).color as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_canvas_t>())).linemode as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_t),
            "::",
            stringify!(linemode)
        )
    );
}
pub type RConsCanvas = r_cons_canvas_t;
pub type RConsEditorCallback = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RConsClickCallback = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RConsBreakCallback =
    ::std::option::Option<unsafe extern "C" fn(core: *mut ::std::os::raw::c_void)>;
pub type RConsSleepBeginCallback = ::std::option::Option<
    unsafe extern "C" fn(core: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type RConsSleepEndCallback = ::std::option::Option<
    unsafe extern "C" fn(core: *mut ::std::os::raw::c_void, user: *mut ::std::os::raw::c_void),
>;
pub type RConsQueueTaskOneshot = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        task: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
    ),
>;
pub type RConsFunctionKey = ::std::option::Option<
    unsafe extern "C" fn(core: *mut ::std::os::raw::c_void, fkey: ::std::os::raw::c_int),
>;
pub const RConsColorMode_COLOR_MODE_DISABLED: RConsColorMode = 0;
pub const RConsColorMode_COLOR_MODE_16: RConsColorMode = 1;
pub const RConsColorMode_COLOR_MODE_256: RConsColorMode = 2;
pub const RConsColorMode_COLOR_MODE_16M: RConsColorMode = 3;
pub type RConsColorMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cons_context_t {
    pub grep: RConsGrep,
    pub cons_stack: *mut RStack,
    pub buffer: *mut ::std::os::raw::c_char,
    pub buffer_len: size_t,
    pub buffer_sz: size_t,
    pub error: *mut RStrBuf,
    pub errmode: ::std::os::raw::c_int,
    pub breaked: bool,
    pub was_breaked: bool,
    pub break_stack: *mut RStack,
    pub event_interrupt: RConsEvent,
    pub event_interrupt_data: *mut ::std::os::raw::c_void,
    pub cmd_depth: ::std::os::raw::c_int,
    pub log_callback: RLogCallback,
    pub lastOutput: *mut ::std::os::raw::c_char,
    pub lastLength: ::std::os::raw::c_int,
    pub lastMode: bool,
    pub lastEnabled: bool,
    pub is_interactive: bool,
    pub pageable: bool,
    pub color_mode: ::std::os::raw::c_int,
    pub cpal: RConsPalette,
    pub pal: RConsPrintablePalette,
    pub sorted_lines: *mut RList,
    pub unsorted_lines: *mut RList,
    pub sorted_column: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_cons_context_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cons_context_t>(),
        2360usize,
        concat!("Size of: ", stringify!(r_cons_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cons_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cons_context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).grep as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(grep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).cons_stack as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(cons_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).buffer as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).buffer_len as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(buffer_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).buffer_sz as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(buffer_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).error as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).errmode as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(errmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).breaked as *const _ as usize },
        1052usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(breaked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).was_breaked as *const _ as usize },
        1053usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(was_breaked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).break_stack as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(break_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_context_t>())).event_interrupt as *const _ as usize
        },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(event_interrupt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_context_t>())).event_interrupt_data as *const _ as usize
        },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(event_interrupt_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).cmd_depth as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(cmd_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).log_callback as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(log_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).lastOutput as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(lastOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).lastLength as *const _ as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(lastLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).lastMode as *const _ as usize },
        1108usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(lastMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).lastEnabled as *const _ as usize },
        1109usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(lastEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).is_interactive as *const _ as usize },
        1110usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(is_interactive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).pageable as *const _ as usize },
        1111usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(pageable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).color_mode as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(color_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).cpal as *const _ as usize },
        1116usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(cpal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).pal as *const _ as usize },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(pal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).sorted_lines as *const _ as usize },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(sorted_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).unsorted_lines as *const _ as usize },
        2344usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(unsorted_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_context_t>())).sorted_column as *const _ as usize },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_context_t),
            "::",
            stringify!(sorted_column)
        )
    );
}
pub type RConsContext = r_cons_context_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RConsCursorPos {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RConsCursorPos() {
    assert_eq!(
        ::std::mem::size_of::<RConsCursorPos>(),
        8usize,
        concat!("Size of: ", stringify!(RConsCursorPos))
    );
    assert_eq!(
        ::std::mem::align_of::<RConsCursorPos>(),
        4usize,
        concat!("Alignment of ", stringify!(RConsCursorPos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RConsCursorPos>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RConsCursorPos),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RConsCursorPos>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RConsCursorPos),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cons_t {
    pub context: *mut RConsContext,
    pub lastline: *mut ::std::os::raw::c_char,
    pub is_html: bool,
    pub was_html: bool,
    pub lines: ::std::os::raw::c_int,
    pub rows: ::std::os::raw::c_int,
    pub echo: ::std::os::raw::c_int,
    pub fps: ::std::os::raw::c_int,
    pub columns: ::std::os::raw::c_int,
    pub force_rows: ::std::os::raw::c_int,
    pub force_columns: ::std::os::raw::c_int,
    pub fix_rows: ::std::os::raw::c_int,
    pub fix_columns: ::std::os::raw::c_int,
    pub break_lines: bool,
    pub noflush: ::std::os::raw::c_int,
    pub optimize: ::std::os::raw::c_int,
    pub show_autocomplete_widget: bool,
    pub fdin: *mut FILE,
    pub fdout: ::std::os::raw::c_int,
    pub teefile: *const ::std::os::raw::c_char,
    pub user_fgets: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub event_resize: RConsEvent,
    pub event_data: *mut ::std::os::raw::c_void,
    pub mouse_event: ::std::os::raw::c_int,
    pub cb_editor: RConsEditorCallback,
    pub cb_break: RConsBreakCallback,
    pub cb_sleep_begin: RConsSleepBeginCallback,
    pub cb_sleep_end: RConsSleepEndCallback,
    pub cb_click: RConsClickCallback,
    pub cb_task_oneshot: RConsQueueTaskOneshot,
    pub cb_fkey: RConsFunctionKey,
    pub user: *mut ::std::os::raw::c_void,
    pub term_raw: termios,
    pub term_buf: termios,
    pub num: *mut RNum,
    pub pager: *mut ::std::os::raw::c_char,
    pub blankline: ::std::os::raw::c_int,
    pub highlight: *mut ::std::os::raw::c_char,
    pub enable_highlight: bool,
    pub null: ::std::os::raw::c_int,
    pub mouse: ::std::os::raw::c_int,
    pub is_wine: ::std::os::raw::c_int,
    pub line: *mut r_line_t,
    pub vline: *mut *const ::std::os::raw::c_char,
    pub refcnt: ::std::os::raw::c_int,
    pub newline: bool,
    pub vtmode: ::std::os::raw::c_int,
    pub flush: bool,
    pub use_utf8: bool,
    pub use_utf8_curvy: bool,
    pub dotted_lines: bool,
    pub linesleep: ::std::os::raw::c_int,
    pub pagesize: ::std::os::raw::c_int,
    pub break_word: *mut ::std::os::raw::c_char,
    pub break_word_len: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_ulonglong,
    pub grep_color: bool,
    pub grep_highlight: bool,
    pub use_tts: bool,
    pub filter: bool,
    pub rgbstr: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *mut ::std::os::raw::c_char,
            sz: size_t,
            addr: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub click_set: bool,
    pub click_x: ::std::os::raw::c_int,
    pub click_y: ::std::os::raw::c_int,
    pub show_vals: bool,
    pub cpos: RConsCursorPos,
}
#[test]
fn bindgen_test_layout_r_cons_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cons_t>(),
        488usize,
        concat!("Size of: ", stringify!(r_cons_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cons_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cons_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).lastline as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(lastline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).is_html as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(is_html)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).was_html as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(was_html)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).lines as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).rows as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).echo as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(echo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).fps as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(fps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).columns as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).force_rows as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(force_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).force_columns as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(force_columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).fix_rows as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(fix_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).fix_columns as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(fix_columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).break_lines as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(break_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).noflush as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(noflush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).optimize as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(optimize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_t>())).show_autocomplete_widget as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(show_autocomplete_widget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).fdin as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(fdin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).fdout as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(fdout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).teefile as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(teefile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).user_fgets as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(user_fgets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).event_resize as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(event_resize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).event_data as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(event_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).mouse_event as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(mouse_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).cb_editor as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(cb_editor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).cb_break as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(cb_break)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).cb_sleep_begin as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(cb_sleep_begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).cb_sleep_end as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(cb_sleep_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).cb_click as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(cb_click)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).cb_task_oneshot as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(cb_task_oneshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).cb_fkey as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(cb_fkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).user as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).term_raw as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(term_raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).term_buf as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(term_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).num as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).pager as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(pager)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).blankline as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(blankline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).highlight as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(highlight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).enable_highlight as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(enable_highlight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).null as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).mouse as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(mouse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).is_wine as *const _ as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(is_wine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).line as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).vline as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(vline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).refcnt as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).newline as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(newline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).vtmode as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(vtmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).flush as *const _ as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).use_utf8 as *const _ as usize },
        413usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(use_utf8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).use_utf8_curvy as *const _ as usize },
        414usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(use_utf8_curvy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).dotted_lines as *const _ as usize },
        415usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(dotted_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).linesleep as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(linesleep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).pagesize as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(pagesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).break_word as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(break_word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).break_word_len as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(break_word_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).timeout as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).grep_color as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(grep_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).grep_highlight as *const _ as usize },
        449usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(grep_highlight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).use_tts as *const _ as usize },
        450usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(use_tts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).filter as *const _ as usize },
        451usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).rgbstr as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(rgbstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).click_set as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(click_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).click_x as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(click_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).click_y as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(click_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).show_vals as *const _ as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(show_vals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cons_t>())).cpos as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_t),
            "::",
            stringify!(cpos)
        )
    );
}
pub type RCons = r_cons_t;
pub const PAL_PROMPT: ::std::os::raw::c_uint = 0;
pub const PAL_ADDRESS: ::std::os::raw::c_uint = 1;
pub const PAL_DEFAULT: ::std::os::raw::c_uint = 2;
pub const PAL_CHANGED: ::std::os::raw::c_uint = 3;
pub const PAL_JUMP: ::std::os::raw::c_uint = 4;
pub const PAL_CALL: ::std::os::raw::c_uint = 5;
pub const PAL_PUSH: ::std::os::raw::c_uint = 6;
pub const PAL_TRAP: ::std::os::raw::c_uint = 7;
pub const PAL_CMP: ::std::os::raw::c_uint = 8;
pub const PAL_RET: ::std::os::raw::c_uint = 9;
pub const PAL_NOP: ::std::os::raw::c_uint = 10;
pub const PAL_METADATA: ::std::os::raw::c_uint = 11;
pub const PAL_HEADER: ::std::os::raw::c_uint = 12;
pub const PAL_PRINTABLE: ::std::os::raw::c_uint = 13;
pub const PAL_LINES0: ::std::os::raw::c_uint = 14;
pub const PAL_LINES1: ::std::os::raw::c_uint = 15;
pub const PAL_LINES2: ::std::os::raw::c_uint = 16;
pub const PAL_00: ::std::os::raw::c_uint = 17;
pub const PAL_7F: ::std::os::raw::c_uint = 18;
pub const PAL_FF: ::std::os::raw::c_uint = 19;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const LINE_NONE: ::std::os::raw::c_uint = 0;
pub const LINE_TRUE: ::std::os::raw::c_uint = 1;
pub const LINE_FALSE: ::std::os::raw::c_uint = 2;
pub const LINE_UNCJMP: ::std::os::raw::c_uint = 3;
pub const LINE_NOSYM_VERT: ::std::os::raw::c_uint = 4;
pub const LINE_NOSYM_HORIZ: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const RViMode_INSERT_MODE: RViMode = 105;
pub const RViMode_CONTROL_MODE: RViMode = 99;
pub type RViMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cons_canvas_line_style_t {
    pub color: ::std::os::raw::c_int,
    pub symbol: ::std::os::raw::c_int,
    pub dot_style: ::std::os::raw::c_int,
    pub ansicolor: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_cons_canvas_line_style_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cons_canvas_line_style_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_cons_canvas_line_style_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cons_canvas_line_style_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cons_canvas_line_style_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_canvas_line_style_t>())).color as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_line_style_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_canvas_line_style_t>())).symbol as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_line_style_t),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_canvas_line_style_t>())).dot_style as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_line_style_t),
            "::",
            stringify!(dot_style)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cons_canvas_line_style_t>())).ansicolor as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cons_canvas_line_style_t),
            "::",
            stringify!(ansicolor)
        )
    );
}
pub type RCanvasLineStyle = r_cons_canvas_line_style_t;
extern "C" {
    pub fn r_cons_image(
        buf: *const ::std::os::raw::c_uchar,
        bufsz: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_cons_canvas_new(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut RConsCanvas;
}
extern "C" {
    pub fn r_cons_canvas_free(c: *mut RConsCanvas);
}
extern "C" {
    pub fn r_cons_canvas_clear(c: *mut RConsCanvas);
}
extern "C" {
    pub fn r_cons_canvas_print(c: *mut RConsCanvas);
}
extern "C" {
    pub fn r_cons_canvas_print_region(c: *mut RConsCanvas);
}
extern "C" {
    pub fn r_cons_canvas_to_string(c: *mut RConsCanvas) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_canvas_attr(c: *mut RConsCanvas, attr: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_canvas_write(c: *mut RConsCanvas, _s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_canvas_gotoxy(
        c: *mut RConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_cons_canvas_goto_write(
        c: *mut RConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_cons_canvas_box(
        c: *mut RConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_cons_canvas_circle(
        c: *mut RConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_cons_canvas_line(
        c: *mut RConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        style: *mut RCanvasLineStyle,
    );
}
extern "C" {
    pub fn r_cons_canvas_line_diagonal(
        c: *mut RConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        style: *mut RCanvasLineStyle,
    );
}
extern "C" {
    pub fn r_cons_canvas_line_square(
        c: *mut RConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        style: *mut RCanvasLineStyle,
    );
}
extern "C" {
    pub fn r_cons_canvas_resize(
        c: *mut RConsCanvas,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_canvas_fill(
        c: *mut RConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        ch: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_cons_canvas_line_square_defined(
        c: *mut RConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        style: *mut RCanvasLineStyle,
        bendpoint: ::std::os::raw::c_int,
        isvert: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_cons_canvas_line_back_edge(
        c: *mut RConsCanvas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        style: *mut RCanvasLineStyle,
        ybendpoint1: ::std::os::raw::c_int,
        xbendpoint: ::std::os::raw::c_int,
        ybendpoint2: ::std::os::raw::c_int,
        isvert: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_cons_new() -> *mut RCons;
}
extern "C" {
    pub fn r_cons_singleton() -> *mut RCons;
}
extern "C" {
    pub fn r_cons_free() -> *mut RCons;
}
extern "C" {
    pub fn r_cons_lastline(size: *mut ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_lastline_utf8_ansi_len(
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_set_click(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_get_click(x: *mut ::std::os::raw::c_int, y: *mut ::std::os::raw::c_int) -> bool;
}
pub type RConsBreak =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn r_cons_is_breaked() -> bool;
}
extern "C" {
    pub fn r_cons_was_breaked() -> bool;
}
extern "C" {
    pub fn r_cons_is_interactive() -> bool;
}
extern "C" {
    pub fn r_cons_default_context_is_interactive() -> bool;
}
extern "C" {
    pub fn r_cons_sleep_begin() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_cons_sleep_end(user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_cons_break_push(cb: RConsBreak, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_cons_break_pop();
}
extern "C" {
    pub fn r_cons_break_clear();
}
extern "C" {
    pub fn r_cons_breakword(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_break_end();
}
extern "C" {
    pub fn r_cons_break_timeout(timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_pipe_open(
        file: *const ::std::os::raw::c_char,
        fdn: ::std::os::raw::c_int,
        append: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_pipe_close(fd: ::std::os::raw::c_int);
}
pub const R_CONS_ERRMODE_NULL: ::std::os::raw::c_uint = 0;
pub const R_CONS_ERRMODE_QUIET: ::std::os::raw::c_uint = 1;
pub const R_CONS_ERRMODE_ECHO: ::std::os::raw::c_uint = 2;
pub const R_CONS_ERRMODE_BUFFER: ::std::os::raw::c_uint = 3;
pub const R_CONS_ERRMODE_FLUSH: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
extern "C" {
    pub fn r_cons_push();
}
extern "C" {
    pub fn r_cons_pop();
}
extern "C" {
    pub fn r_cons_context_new(parent: *mut RConsContext) -> *mut RConsContext;
}
extern "C" {
    pub fn r_cons_context_free(context: *mut RConsContext);
}
extern "C" {
    pub fn r_cons_context_load(context: *mut RConsContext);
}
extern "C" {
    pub fn r_cons_context_reset();
}
extern "C" {
    pub fn r_cons_context_is_main() -> bool;
}
extern "C" {
    pub fn r_cons_context_break(context: *mut RConsContext);
}
extern "C" {
    pub fn r_cons_context_break_push(
        context: *mut RConsContext,
        cb: RConsBreak,
        user: *mut ::std::os::raw::c_void,
        sig: bool,
    );
}
extern "C" {
    pub fn r_cons_context_break_pop(context: *mut RConsContext, sig: bool);
}
extern "C" {
    pub fn r_cons_editor(
        file: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_reset();
}
extern "C" {
    pub fn r_cons_reset_colors();
}
extern "C" {
    pub fn r_cons_errstr() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_errmode(mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_errmodes(mode: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_eprintf(format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_eflush();
}
extern "C" {
    pub fn r_cons_print_clear();
}
extern "C" {
    pub fn r_cons_echo(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_zero();
}
extern "C" {
    pub fn r_cons_highlight(word: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_clear();
}
extern "C" {
    pub fn r_cons_clear_buffer();
}
extern "C" {
    pub fn r_cons_clear00();
}
extern "C" {
    pub fn r_cons_clear_line(err: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_fill_line();
}
extern "C" {
    pub fn r_cons_stdout_open(file: *const ::std::os::raw::c_char, append: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_stdout_set_fd(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_gotoxy(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_get_cur_line() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_line(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        ch: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_cons_show_cursor(cursor: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_swap_ground(col: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_drop(n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_cons_chop();
}
extern "C" {
    pub fn r_cons_set_raw(b: bool);
}
extern "C" {
    pub fn r_cons_set_interactive(b: bool);
}
extern "C" {
    pub fn r_cons_set_last_interactive();
}
extern "C" {
    pub fn r_cons_set_utf8(b: bool);
}
extern "C" {
    pub fn r_cons_grep(grep: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_printf(format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_printf_list(format: *const ::std::os::raw::c_char, ap: *mut __va_list_tag);
}
extern "C" {
    pub fn r_cons_strcat(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_strcat_at(
        str_: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_cons_println(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_strcat_justify(
        str_: *const ::std::os::raw::c_char,
        j: ::std::os::raw::c_int,
        c: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_cons_printat(
        str_: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_cons_write(
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_newline();
}
extern "C" {
    pub fn r_cons_filter();
}
extern "C" {
    pub fn r_cons_flush();
}
extern "C" {
    pub fn r_cons_print_fps(col: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_last();
}
extern "C" {
    pub fn r_cons_less_str(
        str_: *const ::std::os::raw::c_char,
        exitkeys: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_less();
}
extern "C" {
    pub fn r_cons_2048(color: bool);
}
extern "C" {
    pub fn r_cons_memset(ch: ::std::os::raw::c_char, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_visual_flush();
}
extern "C" {
    pub fn r_cons_visual_write(buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_is_utf8() -> bool;
}
extern "C" {
    pub fn r_cons_cmd_help(help: *mut *const ::std::os::raw::c_char, use_color: bool);
}
extern "C" {
    pub fn r_cons_log_stub(
        output: *const ::std::os::raw::c_char,
        funcname: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_uint,
        level: ::std::os::raw::c_uint,
        tag: *const ::std::os::raw::c_char,
        fmtstr: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn r_cons_controlz(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_readchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_readpush(str_: *const ::std::os::raw::c_char, len: ::std::os::raw::c_int)
        -> bool;
}
extern "C" {
    pub fn r_cons_readflush();
}
extern "C" {
    pub fn r_cons_switchbuf(active: bool);
}
extern "C" {
    pub fn r_cons_readchar_timeout(usec: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_any_key(msg: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_eof() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_palette_init(pal: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_pal_set(
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_pal_update_event();
}
extern "C" {
    pub fn r_cons_pal_free(ctx: *mut RConsContext);
}
extern "C" {
    pub fn r_cons_pal_init(ctx: *mut RConsContext);
}
extern "C" {
    pub fn r_cons_pal_copy(dst: *mut RConsContext, src: *mut RConsContext);
}
extern "C" {
    pub fn r_cons_pal_parse(
        str_: *const ::std::os::raw::c_char,
        outcol: *mut RColor,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_pal_random();
}
extern "C" {
    pub fn r_cons_pal_get(key: *const ::std::os::raw::c_char) -> RColor;
}
extern "C" {
    pub fn r_cons_pal_get_i(index: ::std::os::raw::c_int) -> RColor;
}
extern "C" {
    pub fn r_cons_pal_get_name(index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_pal_len() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_rgb_parse(
        p: *const ::std::os::raw::c_char,
        r: *mut ::std::os::raw::c_uchar,
        g: *mut ::std::os::raw::c_uchar,
        b: *mut ::std::os::raw::c_uchar,
        a: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_rgb_tostring(
        r: ::std::os::raw::c_uchar,
        g: ::std::os::raw::c_uchar,
        b: ::std::os::raw::c_uchar,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_pal_list(rad: ::std::os::raw::c_int, arg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_pal_show();
}
extern "C" {
    pub fn r_cons_get_size(rows: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_isatty() -> bool;
}
extern "C" {
    pub fn r_cons_get_cursor(rows: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_arrow_to_hjkl(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_html_filter(
        ptr: *const ::std::os::raw::c_char,
        newlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_rainbow_get(
        idx: ::std::os::raw::c_int,
        last: ::std::os::raw::c_int,
        bg: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_rainbow_free(ctx: *mut RConsContext);
}
extern "C" {
    pub fn r_cons_rainbow_new(ctx: *mut RConsContext, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_fgets(
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_hud(
        list: *mut RList,
        prompt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_hud_line(
        list: *mut RList,
        prompt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_hud_line_string(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_hud_path(
        path: *const ::std::os::raw::c_char,
        dir: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_hud_string(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_hud_file(f: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_get_buffer() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_get_buffer_len() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_grep_help();
}
extern "C" {
    pub fn r_cons_grep_parsecmd(
        cmd: *mut ::std::os::raw::c_char,
        quotestr: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_cons_grep_strip(
        cmd: *mut ::std::os::raw::c_char,
        quotestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_grep_process(grep: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_grep_line(
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_grepbuf();
}
extern "C" {
    pub fn r_cons_rgb(
        r: ::std::os::raw::c_uchar,
        g: ::std::os::raw::c_uchar,
        b: ::std::os::raw::c_uchar,
        a: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn r_cons_rgb_fgbg(
        r: ::std::os::raw::c_uchar,
        g: ::std::os::raw::c_uchar,
        b: ::std::os::raw::c_uchar,
        R: ::std::os::raw::c_uchar,
        G: ::std::os::raw::c_uchar,
        B: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn r_cons_rgb_init();
}
extern "C" {
    pub fn r_cons_rgb_str_mode(
        mode: RConsColorMode,
        outstr: *mut ::std::os::raw::c_char,
        sz: size_t,
        rcolor: *mut RColor,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_rgb_str(
        outstr: *mut ::std::os::raw::c_char,
        sz: size_t,
        rcolor: *mut RColor,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_rgb_str_off(
        outstr: *mut ::std::os::raw::c_char,
        sz: size_t,
        off: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_color(
        fg: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_cons_color_random(alpha: ::std::os::raw::c_uchar) -> RColor;
}
extern "C" {
    pub fn r_cons_invert(set: ::std::os::raw::c_int, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_yesno(
        def: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn r_cons_input(msg: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_password(msg: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_set_cup(enable: bool) -> bool;
}
extern "C" {
    pub fn r_cons_column(c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_cons_get_column() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cons_message(msg: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_set_title(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_cons_enable_mouse(enable: bool) -> bool;
}
extern "C" {
    pub fn r_cons_enable_highlight(enable: bool);
}
extern "C" {
    pub fn r_cons_bind(bind: *mut RConsBind);
}
extern "C" {
    pub fn r_cons_get_rune(ch: ::std::os::raw::c_uchar) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RConsPixel {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub buf: *mut ::std::os::raw::c_uchar,
    pub buf_size: size_t,
}
#[test]
fn bindgen_test_layout_RConsPixel() {
    assert_eq!(
        ::std::mem::size_of::<RConsPixel>(),
        24usize,
        concat!("Size of: ", stringify!(RConsPixel))
    );
    assert_eq!(
        ::std::mem::align_of::<RConsPixel>(),
        8usize,
        concat!("Alignment of ", stringify!(RConsPixel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RConsPixel>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RConsPixel),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RConsPixel>())).h as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RConsPixel),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RConsPixel>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RConsPixel),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RConsPixel>())).buf_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RConsPixel),
            "::",
            stringify!(buf_size)
        )
    );
}
extern "C" {
    pub fn r_cons_pixel_new(w: ::std::os::raw::c_int, h: ::std::os::raw::c_int) -> *mut RConsPixel;
}
extern "C" {
    pub fn r_cons_pixel_free(p: *mut RConsPixel);
}
extern "C" {
    pub fn r_cons_pixel_flush(
        p: *mut RConsPixel,
        sx: ::std::os::raw::c_int,
        sy: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_cons_pixel_drain(p: *mut RConsPixel) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cons_pixel_set(
        p: *mut RConsPixel,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        v: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_cons_pixel_sets(
        p: *mut RConsPixel,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_cons_pixel_fill(
        p: *mut RConsPixel,
        _x: ::std::os::raw::c_int,
        _y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        v: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_cons_pixel_tostring(p: *mut RConsPixel) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_selection_widget_t {
    pub options: *mut *const ::std::os::raw::c_char,
    pub options_len: ::std::os::raw::c_int,
    pub selection: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub scroll: ::std::os::raw::c_int,
    pub complete_common: bool,
    pub direction: bool,
}
#[test]
fn bindgen_test_layout_r_selection_widget_t() {
    assert_eq!(
        ::std::mem::size_of::<r_selection_widget_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_selection_widget_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_selection_widget_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_selection_widget_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_selection_widget_t>())).options as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_selection_widget_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_selection_widget_t>())).options_len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_selection_widget_t),
            "::",
            stringify!(options_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_selection_widget_t>())).selection as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_selection_widget_t),
            "::",
            stringify!(selection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_selection_widget_t>())).w as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_selection_widget_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_selection_widget_t>())).h as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_selection_widget_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_selection_widget_t>())).scroll as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_selection_widget_t),
            "::",
            stringify!(scroll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_selection_widget_t>())).complete_common as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_selection_widget_t),
            "::",
            stringify!(complete_common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_selection_widget_t>())).direction as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(r_selection_widget_t),
            "::",
            stringify!(direction)
        )
    );
}
pub type RSelWidget = r_selection_widget_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_line_hist_t {
    pub data: *mut *mut ::std::os::raw::c_char,
    pub match_: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub autosave: ::std::os::raw::c_int,
    pub do_setup_match: bool,
}
#[test]
fn bindgen_test_layout_r_line_hist_t() {
    assert_eq!(
        ::std::mem::size_of::<r_line_hist_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_line_hist_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_line_hist_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_line_hist_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_hist_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_hist_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_hist_t>())).match_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_hist_t),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_hist_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_hist_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_hist_t>())).index as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_hist_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_hist_t>())).top as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_hist_t),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_hist_t>())).autosave as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_hist_t),
            "::",
            stringify!(autosave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_hist_t>())).do_setup_match as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_hist_t),
            "::",
            stringify!(do_setup_match)
        )
    );
}
pub type RLineHistory = r_line_hist_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_line_buffer_t {
    pub data: [::std::os::raw::c_char; 4096usize],
    pub index: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_line_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<r_line_buffer_t>(),
        4104usize,
        concat!("Size of: ", stringify!(r_line_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_line_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_line_buffer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_buffer_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_buffer_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_buffer_t>())).index as *const _ as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_buffer_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_buffer_t>())).length as *const _ as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_buffer_t),
            "::",
            stringify!(length)
        )
    );
}
pub type RLineBuffer = r_line_buffer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_hud_t {
    pub current_entry_n: ::std::os::raw::c_int,
    pub top_entry_n: ::std::os::raw::c_int,
    pub activate: ::std::os::raw::c_char,
    pub vi: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_hud_t() {
    assert_eq!(
        ::std::mem::size_of::<r_hud_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_hud_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_hud_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_hud_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hud_t>())).current_entry_n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hud_t),
            "::",
            stringify!(current_entry_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hud_t>())).top_entry_n as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hud_t),
            "::",
            stringify!(top_entry_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hud_t>())).activate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hud_t),
            "::",
            stringify!(activate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hud_t>())).vi as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hud_t),
            "::",
            stringify!(vi)
        )
    );
}
pub type RLineHud = r_hud_t;
pub type RLine = r_line_t;
pub type RLineCompletion = r_line_comp_t;
pub const RLinePromptType_R_LINE_PROMPT_DEFAULT: RLinePromptType = 0;
pub const RLinePromptType_R_LINE_PROMPT_OFFSET: RLinePromptType = 1;
pub const RLinePromptType_R_LINE_PROMPT_FILE: RLinePromptType = 2;
pub type RLinePromptType = ::std::os::raw::c_uint;
pub type RLineCompletionCb = ::std::option::Option<
    unsafe extern "C" fn(
        completion: *mut RLineCompletion,
        buf: *mut RLineBuffer,
        prompt_type: RLinePromptType,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_line_comp_t {
    pub opt: bool,
    pub args_limit: size_t,
    pub quit: bool,
    pub args: RPVector,
    pub run: RLineCompletionCb,
    pub run_user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_line_comp_t() {
    assert_eq!(
        ::std::mem::size_of::<r_line_comp_t>(),
        88usize,
        concat!("Size of: ", stringify!(r_line_comp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_line_comp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_line_comp_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_comp_t>())).opt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_comp_t),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_comp_t>())).args_limit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_comp_t),
            "::",
            stringify!(args_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_comp_t>())).quit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_comp_t),
            "::",
            stringify!(quit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_comp_t>())).args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_comp_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_comp_t>())).run as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_comp_t),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_comp_t>())).run_user as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_comp_t),
            "::",
            stringify!(run_user)
        )
    );
}
pub type RLineEditorCb = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RLineHistoryUpCb =
    ::std::option::Option<unsafe extern "C" fn(line: *mut RLine) -> ::std::os::raw::c_int>;
pub type RLineHistoryDownCb =
    ::std::option::Option<unsafe extern "C" fn(line: *mut RLine) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_line_t {
    pub completion: RLineCompletion,
    pub buffer: RLineBuffer,
    pub history: RLineHistory,
    pub sel_widget: *mut RSelWidget,
    pub cb_history_up: RLineHistoryUpCb,
    pub cb_history_down: RLineHistoryDownCb,
    pub cb_editor: RLineEditorCb,
    pub cb_fkey: RConsFunctionKey,
    pub echo: bool,
    pub prompt: *mut ::std::os::raw::c_char,
    pub kill_ring: *mut RList,
    pub kill_ring_ptr: ::std::os::raw::c_int,
    pub clipboard: *mut ::std::os::raw::c_char,
    pub disable: bool,
    pub user: *mut ::std::os::raw::c_void,
    pub histfilter: bool,
    pub hist_up: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub hist_down: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub contents: *mut ::std::os::raw::c_char,
    pub zerosep: bool,
    pub enable_vi_mode: bool,
    pub vi_mode: ::std::os::raw::c_int,
    pub prompt_mode: bool,
    pub prompt_type: RLinePromptType,
    pub offset_hist_index: ::std::os::raw::c_int,
    pub file_hist_index: ::std::os::raw::c_int,
    pub hud: *mut RLineHud,
    pub sdbshell_hist: *mut RList,
    pub sdbshell_hist_iter: *mut RListIter,
    pub vtmode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_line_t() {
    assert_eq!(
        ::std::mem::size_of::<r_line_t>(),
        4416usize,
        concat!("Size of: ", stringify!(r_line_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_line_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_line_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).completion as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(completion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).buffer as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).history as *const _ as usize },
        4192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(history)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).sel_widget as *const _ as usize },
        4232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(sel_widget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).cb_history_up as *const _ as usize },
        4240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(cb_history_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).cb_history_down as *const _ as usize },
        4248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(cb_history_down)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).cb_editor as *const _ as usize },
        4256usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(cb_editor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).cb_fkey as *const _ as usize },
        4264usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(cb_fkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).echo as *const _ as usize },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(echo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).prompt as *const _ as usize },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(prompt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).kill_ring as *const _ as usize },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(kill_ring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).kill_ring_ptr as *const _ as usize },
        4296usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(kill_ring_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).clipboard as *const _ as usize },
        4304usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(clipboard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).disable as *const _ as usize },
        4312usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(disable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).user as *const _ as usize },
        4320usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).histfilter as *const _ as usize },
        4328usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(histfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).hist_up as *const _ as usize },
        4336usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(hist_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).hist_down as *const _ as usize },
        4344usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(hist_down)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).contents as *const _ as usize },
        4352usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).zerosep as *const _ as usize },
        4360usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(zerosep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).enable_vi_mode as *const _ as usize },
        4361usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(enable_vi_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).vi_mode as *const _ as usize },
        4364usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(vi_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).prompt_mode as *const _ as usize },
        4368usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(prompt_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).prompt_type as *const _ as usize },
        4372usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(prompt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).offset_hist_index as *const _ as usize },
        4376usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(offset_hist_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).file_hist_index as *const _ as usize },
        4380usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(file_hist_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).hud as *const _ as usize },
        4384usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(hud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).sdbshell_hist as *const _ as usize },
        4392usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(sdbshell_hist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).sdbshell_hist_iter as *const _ as usize },
        4400usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(sdbshell_hist_iter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_line_t>())).vtmode as *const _ as usize },
        4408usize,
        concat!(
            "Offset of field: ",
            stringify!(r_line_t),
            "::",
            stringify!(vtmode)
        )
    );
}
extern "C" {
    pub fn r_line_new() -> *mut RLine;
}
extern "C" {
    pub fn r_line_singleton() -> *mut RLine;
}
extern "C" {
    pub fn r_line_free();
}
extern "C" {
    pub fn r_line_get_prompt() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_line_set_prompt(prompt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_line_dietline_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_line_clipboard_push(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_line_hist_free();
}
pub type RLineReadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        line: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn r_line_readline() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_line_readline_cb(
        cb: RLineReadCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_line_hist_load(file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_line_hist_add(line: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_line_hist_save(file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_line_hist_label(
        label: *const ::std::os::raw::c_char,
        cb: ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_line_label_show();
}
extern "C" {
    pub fn r_line_hist_list() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_line_hist_get(n: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_line_set_hist_callback(
        line: *mut RLine,
        cb_up: RLineHistoryUpCb,
        cb_down: RLineHistoryDownCb,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_line_hist_cmd_up(line: *mut RLine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_line_hist_cmd_down(line: *mut RLine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_line_completion_init(completion: *mut RLineCompletion, args_limit: size_t);
}
extern "C" {
    pub fn r_line_completion_fini(completion: *mut RLineCompletion);
}
extern "C" {
    pub fn r_line_completion_push(
        completion: *mut RLineCompletion,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_line_completion_set(
        completion: *mut RLineCompletion,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_line_completion_clear(completion: *mut RLineCompletion);
}
pub type RPanelsMenuCallback = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_panels_menu_item {
    pub n_sub: ::std::os::raw::c_int,
    pub selectedIndex: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub sub: *mut *mut r_panels_menu_item,
    pub cb: RPanelsMenuCallback,
    pub p: *mut RPanel,
}
#[test]
fn bindgen_test_layout_r_panels_menu_item() {
    assert_eq!(
        ::std::mem::size_of::<r_panels_menu_item>(),
        40usize,
        concat!("Size of: ", stringify!(r_panels_menu_item))
    );
    assert_eq!(
        ::std::mem::align_of::<r_panels_menu_item>(),
        8usize,
        concat!("Alignment of ", stringify!(r_panels_menu_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_menu_item>())).n_sub as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_item),
            "::",
            stringify!(n_sub)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_panels_menu_item>())).selectedIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_item),
            "::",
            stringify!(selectedIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_menu_item>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_item),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_menu_item>())).sub as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_item),
            "::",
            stringify!(sub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_menu_item>())).cb as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_item),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_menu_item>())).p as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_item),
            "::",
            stringify!(p)
        )
    );
}
pub type RPanelsMenuItem = r_panels_menu_item;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_panels_menu_t {
    pub root: *mut RPanelsMenuItem,
    pub history: *mut *mut RPanelsMenuItem,
    pub depth: ::std::os::raw::c_int,
    pub n_refresh: ::std::os::raw::c_int,
    pub refreshPanels: *mut *mut RPanel,
}
#[test]
fn bindgen_test_layout_r_panels_menu_t() {
    assert_eq!(
        ::std::mem::size_of::<r_panels_menu_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_panels_menu_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_panels_menu_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_panels_menu_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_menu_t>())).root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_t),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_menu_t>())).history as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_t),
            "::",
            stringify!(history)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_menu_t>())).depth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_menu_t>())).n_refresh as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_t),
            "::",
            stringify!(n_refresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_menu_t>())).refreshPanels as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_menu_t),
            "::",
            stringify!(refreshPanels)
        )
    );
}
pub type RPanelsMenu = r_panels_menu_t;
pub const RPanelsMode_PANEL_MODE_DEFAULT: RPanelsMode = 0;
pub const RPanelsMode_PANEL_MODE_MENU: RPanelsMode = 1;
pub const RPanelsMode_PANEL_MODE_ZOOM: RPanelsMode = 2;
pub const RPanelsMode_PANEL_MODE_WINDOW: RPanelsMode = 3;
pub const RPanelsMode_PANEL_MODE_HELP: RPanelsMode = 4;
pub type RPanelsMode = ::std::os::raw::c_uint;
pub const RPanelsFun_PANEL_FUN_SNOW: RPanelsFun = 0;
pub const RPanelsFun_PANEL_FUN_SAKURA: RPanelsFun = 1;
pub const RPanelsFun_PANEL_FUN_NOFUN: RPanelsFun = 2;
pub type RPanelsFun = ::std::os::raw::c_uint;
pub const RPanelsLayout_PANEL_LAYOUT_DEFAULT_STATIC: RPanelsLayout = 0;
pub const RPanelsLayout_PANEL_LAYOUT_DEFAULT_DYNAMIC: RPanelsLayout = 1;
pub type RPanelsLayout = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RPanelsSnow {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RPanelsSnow() {
    assert_eq!(
        ::std::mem::size_of::<RPanelsSnow>(),
        8usize,
        concat!("Size of: ", stringify!(RPanelsSnow))
    );
    assert_eq!(
        ::std::mem::align_of::<RPanelsSnow>(),
        4usize,
        concat!("Alignment of ", stringify!(RPanelsSnow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RPanelsSnow>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RPanelsSnow),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RPanelsSnow>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RPanelsSnow),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RModal {
    pub data: *mut RStrBuf,
    pub pos: RPanelPos,
    pub idx: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RModal() {
    assert_eq!(
        ::std::mem::size_of::<RModal>(),
        32usize,
        concat!("Size of: ", stringify!(RModal))
    );
    assert_eq!(
        ::std::mem::align_of::<RModal>(),
        8usize,
        concat!("Alignment of ", stringify!(RModal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RModal>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RModal),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RModal>())).pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RModal),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RModal>())).idx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RModal),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RModal>())).offset as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RModal),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_panels_t {
    pub can: *mut RConsCanvas,
    pub panel: *mut *mut RPanel,
    pub n_panels: ::std::os::raw::c_int,
    pub columnWidth: ::std::os::raw::c_int,
    pub curnode: ::std::os::raw::c_int,
    pub mouse_orig_x: ::std::os::raw::c_int,
    pub mouse_orig_y: ::std::os::raw::c_int,
    pub autoUpdate: bool,
    pub mouse_on_edge_x: bool,
    pub mouse_on_edge_y: bool,
    pub panels_menu: *mut RPanelsMenu,
    pub db: *mut Sdb,
    pub rotate_db: *mut Sdb,
    pub modal_db: *mut Sdb,
    pub mht: *mut HtPP,
    pub mode: RPanelsMode,
    pub fun: RPanelsFun,
    pub prevMode: RPanelsMode,
    pub layout: RPanelsLayout,
    pub snows: *mut RList,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_panels_t() {
    assert_eq!(
        ::std::mem::size_of::<r_panels_t>(),
        112usize,
        concat!("Size of: ", stringify!(r_panels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_panels_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_panels_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).can as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(can)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).panel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(panel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).n_panels as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(n_panels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).columnWidth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(columnWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).curnode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(curnode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).mouse_orig_x as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(mouse_orig_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).mouse_orig_y as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(mouse_orig_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).autoUpdate as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(autoUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).mouse_on_edge_x as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(mouse_on_edge_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).mouse_on_edge_y as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(mouse_on_edge_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).panels_menu as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(panels_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).db as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).rotate_db as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(rotate_db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).modal_db as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(modal_db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).mht as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(mht)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).mode as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).fun as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(fun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).prevMode as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(prevMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).layout as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).snows as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(snows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_t>())).name as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_t),
            "::",
            stringify!(name)
        )
    );
}
pub type RPanels = r_panels_t;
pub const RPanelsRootState_DEFAULT: RPanelsRootState = 0;
pub const RPanelsRootState_ROTATE: RPanelsRootState = 1;
pub const RPanelsRootState_DEL: RPanelsRootState = 2;
pub const RPanelsRootState_QUIT: RPanelsRootState = 3;
pub type RPanelsRootState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_panels_root_t {
    pub n_panels: ::std::os::raw::c_int,
    pub cur_panels: ::std::os::raw::c_int,
    pub pdc_caches: *mut Sdb,
    pub cur_pdc_cache: *mut Sdb,
    pub panels: *mut *mut RPanels,
    pub root_state: RPanelsRootState,
}
#[test]
fn bindgen_test_layout_r_panels_root_t() {
    assert_eq!(
        ::std::mem::size_of::<r_panels_root_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_panels_root_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_panels_root_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_panels_root_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_root_t>())).n_panels as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_root_t),
            "::",
            stringify!(n_panels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_root_t>())).cur_panels as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_root_t),
            "::",
            stringify!(cur_panels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_root_t>())).pdc_caches as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_root_t),
            "::",
            stringify!(pdc_caches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_root_t>())).cur_pdc_cache as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_root_t),
            "::",
            stringify!(cur_pdc_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_root_t>())).panels as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_root_t),
            "::",
            stringify!(panels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_panels_root_t>())).root_state as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_panels_root_t),
            "::",
            stringify!(root_state)
        )
    );
}
pub type RPanelsRoot = r_panels_root_t;
extern "C" {
    pub fn r_diff_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_diff_op_t {
    pub a_off: ::std::os::raw::c_ulonglong,
    pub a_buf: *const ::std::os::raw::c_uchar,
    pub a_len: ::std::os::raw::c_uint,
    pub b_off: ::std::os::raw::c_ulonglong,
    pub b_buf: *const ::std::os::raw::c_uchar,
    pub b_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_diff_op_t() {
    assert_eq!(
        ::std::mem::size_of::<r_diff_op_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_diff_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_diff_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_diff_op_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_op_t>())).a_off as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_op_t),
            "::",
            stringify!(a_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_op_t>())).a_buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_op_t),
            "::",
            stringify!(a_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_op_t>())).a_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_op_t),
            "::",
            stringify!(a_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_op_t>())).b_off as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_op_t),
            "::",
            stringify!(b_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_op_t>())).b_buf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_op_t),
            "::",
            stringify!(b_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_op_t>())).b_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_op_t),
            "::",
            stringify!(b_len)
        )
    );
}
pub type RDiffOp = r_diff_op_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_diff_t {
    pub off_a: ::std::os::raw::c_ulonglong,
    pub off_b: ::std::os::raw::c_ulonglong,
    pub delta: ::std::os::raw::c_int,
    pub user: *mut ::std::os::raw::c_void,
    pub verbose: bool,
    pub type_: ::std::os::raw::c_int,
    pub diff_cmd: *const ::std::os::raw::c_char,
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            diff: *mut r_diff_t,
            user: *mut ::std::os::raw::c_void,
            op: *mut RDiffOp,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_r_diff_t() {
    assert_eq!(
        ::std::mem::size_of::<r_diff_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_diff_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_diff_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_diff_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_t>())).off_a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_t),
            "::",
            stringify!(off_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_t>())).off_b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_t),
            "::",
            stringify!(off_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_t>())).delta as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_t),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_t>())).user as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_t>())).verbose as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_t),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_t>())).type_ as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_t>())).diff_cmd as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_t),
            "::",
            stringify!(diff_cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_t>())).callback as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_t),
            "::",
            stringify!(callback)
        )
    );
}
pub type RDiff = r_diff_t;
pub const RLevOp_LEVEND: RLevOp = 0;
pub const RLevOp_LEVNOP: RLevOp = 1;
pub const RLevOp_LEVSUB: RLevOp = 2;
pub const RLevOp_LEVADD: RLevOp = 3;
pub const RLevOp_LEVDEL: RLevOp = 4;
pub type RLevOp = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_lev_buf {
    pub buf: *mut ::std::os::raw::c_void,
    pub len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_lev_buf() {
    assert_eq!(
        ::std::mem::size_of::<r_lev_buf>(),
        16usize,
        concat!("Size of: ", stringify!(r_lev_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<r_lev_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(r_lev_buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lev_buf>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lev_buf),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lev_buf>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lev_buf),
            "::",
            stringify!(len)
        )
    );
}
pub type RLevBuf = r_lev_buf;
pub type RLevMatches = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut RLevBuf,
        b: *mut RLevBuf,
        ia: ::std::os::raw::c_uint,
        ib: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type RDiffCallback = ::std::option::Option<
    unsafe extern "C" fn(
        diff: *mut RDiff,
        user: *mut ::std::os::raw::c_void,
        op: *mut RDiffOp,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_diffchar_t {
    pub align_a: *const ::std::os::raw::c_uchar,
    pub align_b: *const ::std::os::raw::c_uchar,
    pub len_buf: size_t,
    pub start_align: size_t,
}
#[test]
fn bindgen_test_layout_r_diffchar_t() {
    assert_eq!(
        ::std::mem::size_of::<r_diffchar_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_diffchar_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_diffchar_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_diffchar_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diffchar_t>())).align_a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diffchar_t),
            "::",
            stringify!(align_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diffchar_t>())).align_b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diffchar_t),
            "::",
            stringify!(align_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diffchar_t>())).len_buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diffchar_t),
            "::",
            stringify!(len_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diffchar_t>())).start_align as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diffchar_t),
            "::",
            stringify!(start_align)
        )
    );
}
pub type RDiffChar = r_diffchar_t;
extern "C" {
    pub fn r_diff_new() -> *mut RDiff;
}
extern "C" {
    pub fn r_diff_new_from(
        off_a: ::std::os::raw::c_ulonglong,
        off_b: ::std::os::raw::c_ulonglong,
    ) -> *mut RDiff;
}
extern "C" {
    pub fn r_diff_free(d: *mut RDiff) -> *mut RDiff;
}
extern "C" {
    pub fn r_diff_buffers(
        d: *mut RDiff,
        a: *const ::std::os::raw::c_uchar,
        la: ::std::os::raw::c_uint,
        b: *const ::std::os::raw::c_uchar,
        lb: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_diff_buffers_static(
        d: *mut RDiff,
        a: *const ::std::os::raw::c_uchar,
        la: ::std::os::raw::c_int,
        b: *const ::std::os::raw::c_uchar,
        lb: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_diff_buffers_radiff(
        d: *mut RDiff,
        a: *const ::std::os::raw::c_uchar,
        la: ::std::os::raw::c_int,
        b: *const ::std::os::raw::c_uchar,
        lb: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_diff_buffers_delta(
        diff: *mut RDiff,
        sa: *const ::std::os::raw::c_uchar,
        la: ::std::os::raw::c_int,
        sb: *const ::std::os::raw::c_uchar,
        lb: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_diff_buffers_to_string(
        d: *mut RDiff,
        a: *const ::std::os::raw::c_uchar,
        la: ::std::os::raw::c_int,
        b: *const ::std::os::raw::c_uchar,
        lb: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_diff_set_callback(
        d: *mut RDiff,
        callback: RDiffCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_diff_buffers_distance(
        d: *mut RDiff,
        a: *const ::std::os::raw::c_uchar,
        la: ::std::os::raw::c_uint,
        b: *const ::std::os::raw::c_uchar,
        lb: ::std::os::raw::c_uint,
        distance: *mut ::std::os::raw::c_uint,
        similarity: *mut f64,
    ) -> bool;
}
extern "C" {
    pub fn r_diff_buffers_distance_myers(
        diff: *mut RDiff,
        a: *const ::std::os::raw::c_uchar,
        la: ::std::os::raw::c_uint,
        b: *const ::std::os::raw::c_uchar,
        lb: ::std::os::raw::c_uint,
        distance: *mut ::std::os::raw::c_uint,
        similarity: *mut f64,
    ) -> bool;
}
extern "C" {
    pub fn r_diff_buffers_distance_levenshtein(
        d: *mut RDiff,
        a: *const ::std::os::raw::c_uchar,
        la: ::std::os::raw::c_uint,
        b: *const ::std::os::raw::c_uchar,
        lb: ::std::os::raw::c_uint,
        distance: *mut ::std::os::raw::c_uint,
        similarity: *mut f64,
    ) -> bool;
}
extern "C" {
    pub fn r_diff_buffers_unified(
        d: *mut RDiff,
        a: *const ::std::os::raw::c_uchar,
        la: ::std::os::raw::c_int,
        b: *const ::std::os::raw::c_uchar,
        lb: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_diff_lines(
        file1: *const ::std::os::raw::c_char,
        sa: *const ::std::os::raw::c_char,
        la: ::std::os::raw::c_int,
        file2: *const ::std::os::raw::c_char,
        sb: *const ::std::os::raw::c_char,
        lb: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_diff_set_delta(d: *mut RDiff, delta: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_diff_gdiff(
        file1: *const ::std::os::raw::c_char,
        file2: *const ::std::os::raw::c_char,
        rad: ::std::os::raw::c_int,
        va: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_diffchar_new(
        a: *const ::std::os::raw::c_uchar,
        b: *const ::std::os::raw::c_uchar,
    ) -> *mut RDiffChar;
}
extern "C" {
    pub fn r_diffchar_print(diffchar: *mut RDiffChar);
}
extern "C" {
    pub fn r_diffchar_free(diffchar: *mut RDiffChar);
}
extern "C" {
    pub fn r_diff_levenshtein_path(
        bufa: *mut RLevBuf,
        bufb: *mut RLevBuf,
        maxdst: ::std::os::raw::c_uint,
        levdiff: RLevMatches,
        chgs: *mut *mut RLevOp,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_regex_t {
    pub re_magic: ::std::os::raw::c_int,
    pub re_nsub: size_t,
    pub re_endp: *const ::std::os::raw::c_char,
    pub re_g: *mut re_guts,
    pub re_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_regex_t() {
    assert_eq!(
        ::std::mem::size_of::<r_regex_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_regex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_regex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_regex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_regex_t>())).re_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_regex_t),
            "::",
            stringify!(re_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_regex_t>())).re_nsub as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_regex_t),
            "::",
            stringify!(re_nsub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_regex_t>())).re_endp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_regex_t),
            "::",
            stringify!(re_endp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_regex_t>())).re_g as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_regex_t),
            "::",
            stringify!(re_g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_regex_t>())).re_flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_regex_t),
            "::",
            stringify!(re_flags)
        )
    );
}
pub type RRegex = r_regex_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_regmatch_t {
    pub rm_so: ::std::os::raw::c_longlong,
    pub rm_eo: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_r_regmatch_t() {
    assert_eq!(
        ::std::mem::size_of::<r_regmatch_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_regmatch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_regmatch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_regmatch_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_regmatch_t>())).rm_so as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_regmatch_t),
            "::",
            stringify!(rm_so)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_regmatch_t>())).rm_eo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_regmatch_t),
            "::",
            stringify!(rm_eo)
        )
    );
}
pub type RRegexMatch = r_regmatch_t;
extern "C" {
    pub fn r_regex_run(
        pattern: *const ::std::os::raw::c_char,
        flags: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_regex_match(
        pattern: *const ::std::os::raw::c_char,
        flags: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_regex_flags(flags: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_regex_new(
        pattern: *const ::std::os::raw::c_char,
        cflags: *const ::std::os::raw::c_char,
    ) -> *mut RRegex;
}
extern "C" {
    pub fn r_regex_free(arg1: *mut RRegex);
}
extern "C" {
    pub fn r_regex_init(
        arg1: *mut RRegex,
        pattern: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_regex_fini(arg1: *mut RRegex);
}
extern "C" {
    pub fn r_regex_check(rr: *const RRegex, str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_regex_exec(
        preg: *const RRegex,
        string: *const ::std::os::raw::c_char,
        nmatch: size_t,
        __pmatch: *mut RRegexMatch,
        eflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_regex_match_list(rx: *mut RRegex, text: *const ::std::os::raw::c_char) -> *mut RList;
}
extern "C" {
    pub fn r_regex_error(
        rx: *mut RRegex,
        errcode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_skiplist_node_t {
    pub data: *mut ::std::os::raw::c_void,
    pub forward: *mut *mut r_skiplist_node_t,
}
#[test]
fn bindgen_test_layout_r_skiplist_node_t() {
    assert_eq!(
        ::std::mem::size_of::<r_skiplist_node_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_skiplist_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_skiplist_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_skiplist_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_skiplist_node_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_skiplist_node_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_skiplist_node_t>())).forward as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_skiplist_node_t),
            "::",
            stringify!(forward)
        )
    );
}
pub type RSkipListNode = r_skiplist_node_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_skiplist_t {
    pub head: *mut RSkipListNode,
    pub list_level: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub freefn: RListFree,
    pub compare: RListComparator,
}
#[test]
fn bindgen_test_layout_r_skiplist_t() {
    assert_eq!(
        ::std::mem::size_of::<r_skiplist_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_skiplist_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_skiplist_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_skiplist_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_skiplist_t>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_skiplist_t),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_skiplist_t>())).list_level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_skiplist_t),
            "::",
            stringify!(list_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_skiplist_t>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_skiplist_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_skiplist_t>())).freefn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_skiplist_t),
            "::",
            stringify!(freefn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_skiplist_t>())).compare as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_skiplist_t),
            "::",
            stringify!(compare)
        )
    );
}
pub type RSkipList = r_skiplist_t;
extern "C" {
    pub fn r_skiplist_new(freefn: RListFree, comparefn: RListComparator) -> *mut RSkipList;
}
extern "C" {
    pub fn r_skiplist_free(list: *mut RSkipList);
}
extern "C" {
    pub fn r_skiplist_purge(list: *mut RSkipList);
}
extern "C" {
    pub fn r_skiplist_insert(
        list: *mut RSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RSkipListNode;
}
extern "C" {
    pub fn r_skiplist_insert_autofree(
        list: *mut RSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_skiplist_delete(list: *mut RSkipList, data: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn r_skiplist_delete_node(list: *mut RSkipList, node: *mut RSkipListNode) -> bool;
}
extern "C" {
    pub fn r_skiplist_find(
        list: *mut RSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RSkipListNode;
}
extern "C" {
    pub fn r_skiplist_find_geq(
        list: *mut RSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RSkipListNode;
}
extern "C" {
    pub fn r_skiplist_find_leq(
        list: *mut RSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RSkipListNode;
}
extern "C" {
    pub fn r_skiplist_join(l1: *mut RSkipList, l2: *mut RSkipList);
}
extern "C" {
    pub fn r_skiplist_get_first(list: *mut RSkipList) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_skiplist_get_n(
        list: *mut RSkipList,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_skiplist_get_geq(
        list: *mut RSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_skiplist_get_leq(
        list: *mut RSkipList,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_skiplist_empty(list: *mut RSkipList) -> bool;
}
extern "C" {
    pub fn r_skiplist_to_list(list: *mut RSkipList) -> *mut RList;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_binheap_t {
    pub a: RPVector,
    pub cmp: RPVectorComparator,
}
#[test]
fn bindgen_test_layout_r_binheap_t() {
    assert_eq!(
        ::std::mem::size_of::<r_binheap_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_binheap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_binheap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_binheap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_binheap_t>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_binheap_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_binheap_t>())).cmp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_binheap_t),
            "::",
            stringify!(cmp)
        )
    );
}
pub type RBinHeap = r_binheap_t;
extern "C" {
    pub fn r_binheap_clear(h: *mut RBinHeap);
}
extern "C" {
    pub fn r_binheap_init(h: *mut RBinHeap, cmp: RPVectorComparator);
}
extern "C" {
    pub fn r_binheap_new(cmp: RPVectorComparator) -> *mut RBinHeap;
}
extern "C" {
    pub fn r_binheap_free(h: *mut RBinHeap);
}
extern "C" {
    pub fn r_binheap_push(h: *mut RBinHeap, x: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn r_binheap_pop(h: *mut RBinHeap) -> *mut ::std::os::raw::c_void;
}
pub type sem_t = ::std::os::raw::c_int;
extern "C" {
    pub fn sem_close(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_destroy(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_getvalue(
        arg1: *mut sem_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_init(
        arg1: *mut sem_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> *mut sem_t;
}
extern "C" {
    pub fn sem_post(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_trywait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_wait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        8usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).__opaque as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(__opaque)
        )
    );
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const QOS_CLASS_USER_INTERACTIVE: ::std::os::raw::c_uint = 33;
pub const QOS_CLASS_USER_INITIATED: ::std::os::raw::c_uint = 25;
pub const QOS_CLASS_DEFAULT: ::std::os::raw::c_uint = 21;
pub const QOS_CLASS_UTILITY: ::std::os::raw::c_uint = 17;
pub const QOS_CLASS_BACKGROUND: ::std::os::raw::c_uint = 9;
pub const QOS_CLASS_UNSPECIFIED: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
extern "C" {
    pub fn pthread_attr_set_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_get_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_set_qos_class_self_np(
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_get_qos_class_np(
        __pthread: pthread_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_override_s {
    _unused: [u8; 0],
}
pub type pthread_override_t = *mut pthread_override_s;
extern "C" {
    pub fn pthread_override_qos_class_start_np(
        __pthread: pthread_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> pthread_override_t;
}
extern "C" {
    pub fn pthread_override_qos_class_end_np(
        __override: pthread_override_t,
    ) -> ::std::os::raw::c_int;
}
pub type mach_port_t = __darwin_mach_port_t;
extern "C" {
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        arg1: *const pthread_attr_t,
        arg2: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        arg1: *const pthread_attr_t,
        arg2: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        arg1: *const pthread_attr_t,
        arg2: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        arg1: *mut pthread_attr_t,
        arg2: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        arg1: *mut pthread_attr_t,
        arg2: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        arg1: *mut pthread_attr_t,
        arg2: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        arg1: *mut pthread_cond_t,
        arg2: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_join(
        arg1: pthread_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        arg1: *mut pthread_mutex_t,
        arg2: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpolicy_np(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpolicy_np(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        arg1: *mut pthread_rwlock_t,
        arg2: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setspecific(
        arg1: pthread_key_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
extern "C" {
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
}
extern "C" {
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> size_t;
}
extern "C" {
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_cond_signal_thread_np(
        arg1: *mut pthread_cond_t,
        arg2: pthread_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait_relative_np(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create_suspended_np(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
}
extern "C" {
    pub fn pthread_yield_np();
}
pub const RThreadFunctionRet_R_TH_FREED: RThreadFunctionRet = -1;
pub const RThreadFunctionRet_R_TH_STOP: RThreadFunctionRet = 0;
pub const RThreadFunctionRet_R_TH_REPEAT: RThreadFunctionRet = 1;
pub type RThreadFunctionRet = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_th_sem_t {
    pub sem: *mut sem_t,
}
#[test]
fn bindgen_test_layout_r_th_sem_t() {
    assert_eq!(
        ::std::mem::size_of::<r_th_sem_t>(),
        8usize,
        concat!("Size of: ", stringify!(r_th_sem_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_th_sem_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_th_sem_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_sem_t>())).sem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_sem_t),
            "::",
            stringify!(sem)
        )
    );
}
pub type RThreadSemaphore = r_th_sem_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_th_lock_t {
    pub lock: pthread_mutex_t,
}
#[test]
fn bindgen_test_layout_r_th_lock_t() {
    assert_eq!(
        ::std::mem::size_of::<r_th_lock_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_th_lock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_th_lock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_th_lock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_lock_t>())).lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_lock_t),
            "::",
            stringify!(lock)
        )
    );
}
pub type RThreadLock = r_th_lock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_th_cond_t {
    pub cond: pthread_cond_t,
}
#[test]
fn bindgen_test_layout_r_th_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<r_th_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_th_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_th_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_th_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_cond_t>())).cond as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_cond_t),
            "::",
            stringify!(cond)
        )
    );
}
pub type RThreadCond = r_th_cond_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_th_t {
    pub tid: pthread_t,
    pub lock: *mut RThreadLock,
    pub fun: ::std::option::Option<unsafe extern "C" fn(arg1: *mut r_th_t) -> RThreadFunctionRet>,
    pub user: *mut ::std::os::raw::c_void,
    pub running: ::std::os::raw::c_int,
    pub breaked: ::std::os::raw::c_int,
    pub delay: ::std::os::raw::c_int,
    pub ready: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_th_t() {
    assert_eq!(
        ::std::mem::size_of::<r_th_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_th_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_th_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_th_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_t>())).tid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_t),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_t>())).lock as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_t>())).fun as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_t),
            "::",
            stringify!(fun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_t>())).user as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_t>())).running as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_t),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_t>())).breaked as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_t),
            "::",
            stringify!(breaked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_t>())).delay as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_t),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_t>())).ready as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_t),
            "::",
            stringify!(ready)
        )
    );
}
pub type RThread = r_th_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_th_pool_t {
    pub size: ::std::os::raw::c_int,
    pub threads: *mut *mut RThread,
}
#[test]
fn bindgen_test_layout_r_th_pool_t() {
    assert_eq!(
        ::std::mem::size_of::<r_th_pool_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_th_pool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_th_pool_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_th_pool_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_pool_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_pool_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_th_pool_t>())).threads as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_th_pool_t),
            "::",
            stringify!(threads)
        )
    );
}
pub type RThreadPool = r_th_pool_t;
extern "C" {
    pub fn r_th_new(
        fun: ::std::option::Option<unsafe extern "C" fn(arg1: *mut r_th_t) -> RThreadFunctionRet>,
        user: *mut ::std::os::raw::c_void,
        delay: ::std::os::raw::c_int,
    ) -> *mut RThread;
}
extern "C" {
    pub fn r_th_start(th: *mut RThread, enable: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_th_wait(th: *mut RThread) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_th_wait_async(th: *mut RThread) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_th_break(th: *mut RThread);
}
extern "C" {
    pub fn r_th_free(th: *mut RThread) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_th_kill_free(th: *mut RThread) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_th_kill(th: *mut RThread, force: bool) -> bool;
}
extern "C" {
    pub fn r_th_self() -> pthread_t;
}
extern "C" {
    pub fn r_th_setname(th: *mut RThread, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_th_getname(th: *mut RThread, name: *mut ::std::os::raw::c_char, len: size_t) -> bool;
}
extern "C" {
    pub fn r_th_setaffinity(th: *mut RThread, cpuid: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_th_sem_new(initial: ::std::os::raw::c_uint) -> *mut RThreadSemaphore;
}
extern "C" {
    pub fn r_th_sem_free(sem: *mut RThreadSemaphore);
}
extern "C" {
    pub fn r_th_sem_post(sem: *mut RThreadSemaphore);
}
extern "C" {
    pub fn r_th_sem_wait(sem: *mut RThreadSemaphore);
}
extern "C" {
    pub fn r_th_lock_new(recursive: bool) -> *mut RThreadLock;
}
extern "C" {
    pub fn r_th_lock_wait(th: *mut RThreadLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_th_lock_tryenter(thl: *mut RThreadLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_th_lock_enter(thl: *mut RThreadLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_th_lock_leave(thl: *mut RThreadLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_th_lock_free(thl: *mut RThreadLock) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_th_cond_new() -> *mut RThreadCond;
}
extern "C" {
    pub fn r_th_cond_signal(cond: *mut RThreadCond);
}
extern "C" {
    pub fn r_th_cond_signal_all(cond: *mut RThreadCond);
}
extern "C" {
    pub fn r_th_cond_wait(cond: *mut RThreadCond, lock: *mut RThreadLock);
}
extern "C" {
    pub fn r_th_cond_free(cond: *mut RThreadCond);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_event_t {
    pub user: *mut ::std::os::raw::c_void,
    pub incall: bool,
    pub callbacks: *mut HtUP,
    pub all_callbacks: RVector,
    pub next_handle: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_event_t() {
    assert_eq!(
        ::std::mem::size_of::<r_event_t>(),
        80usize,
        concat!("Size of: ", stringify!(r_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_event_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_t>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_t>())).incall as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_t),
            "::",
            stringify!(incall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_t>())).callbacks as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_t),
            "::",
            stringify!(callbacks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_t>())).all_callbacks as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_t),
            "::",
            stringify!(all_callbacks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_t>())).next_handle as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_t),
            "::",
            stringify!(next_handle)
        )
    );
}
pub type REvent = r_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_event_callback_handle_t {
    pub handle: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_event_callback_handle_t() {
    assert_eq!(
        ::std::mem::size_of::<r_event_callback_handle_t>(),
        8usize,
        concat!("Size of: ", stringify!(r_event_callback_handle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_event_callback_handle_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_event_callback_handle_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_event_callback_handle_t>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_callback_handle_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_callback_handle_t>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_callback_handle_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type REventCallbackHandle = r_event_callback_handle_t;
pub type REventCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ev: *mut REvent,
        type_: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub const REventType_R_EVENT_ALL: REventType = 0;
pub const REventType_R_EVENT_META_SET: REventType = 1;
pub const REventType_R_EVENT_META_DEL: REventType = 2;
pub const REventType_R_EVENT_META_CLEAR: REventType = 3;
pub const REventType_R_EVENT_CLASS_NEW: REventType = 4;
pub const REventType_R_EVENT_CLASS_DEL: REventType = 5;
pub const REventType_R_EVENT_CLASS_RENAME: REventType = 6;
pub const REventType_R_EVENT_CLASS_ATTR_SET: REventType = 7;
pub const REventType_R_EVENT_CLASS_ATTR_DEL: REventType = 8;
pub const REventType_R_EVENT_CLASS_ATTR_RENAME: REventType = 9;
pub const REventType_R_EVENT_DEBUG_PROCESS_FINISHED: REventType = 10;
pub const REventType_R_EVENT_IO_WRITE: REventType = 11;
pub const REventType_R_EVENT_MAX: REventType = 12;
pub type REventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_event_meta_t {
    pub type_: ::std::os::raw::c_int,
    pub addr: ::std::os::raw::c_ulonglong,
    pub string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_event_meta_t() {
    assert_eq!(
        ::std::mem::size_of::<r_event_meta_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_event_meta_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_event_meta_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_event_meta_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_meta_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_meta_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_meta_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_meta_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_meta_t>())).string as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_meta_t),
            "::",
            stringify!(string)
        )
    );
}
pub type REventMeta = r_event_meta_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_event_class_t {
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_event_class_t() {
    assert_eq!(
        ::std::mem::size_of::<r_event_class_t>(),
        8usize,
        concat!("Size of: ", stringify!(r_event_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_event_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_event_class_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_class_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_class_t),
            "::",
            stringify!(name)
        )
    );
}
pub type REventClass = r_event_class_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_event_class_rename_t {
    pub name_old: *const ::std::os::raw::c_char,
    pub name_new: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_event_class_rename_t() {
    assert_eq!(
        ::std::mem::size_of::<r_event_class_rename_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_event_class_rename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_event_class_rename_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_event_class_rename_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_class_rename_t>())).name_old as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_class_rename_t),
            "::",
            stringify!(name_old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_class_rename_t>())).name_new as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_class_rename_t),
            "::",
            stringify!(name_new)
        )
    );
}
pub type REventClassRename = r_event_class_rename_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_event_class_attr_t {
    pub class_name: *const ::std::os::raw::c_char,
    pub attr_type: ::std::os::raw::c_int,
    pub attr_id: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_event_class_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<r_event_class_attr_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_event_class_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_event_class_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_event_class_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_class_attr_t>())).class_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_class_attr_t),
            "::",
            stringify!(class_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_class_attr_t>())).attr_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_class_attr_t),
            "::",
            stringify!(attr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_class_attr_t>())).attr_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_class_attr_t),
            "::",
            stringify!(attr_id)
        )
    );
}
pub type REventClassAttr = r_event_class_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_event_class_attr_set_t {
    pub attr: REventClassAttr,
    pub content: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_event_class_attr_set_t() {
    assert_eq!(
        ::std::mem::size_of::<r_event_class_attr_set_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_event_class_attr_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_event_class_attr_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_event_class_attr_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_class_attr_set_t>())).attr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_class_attr_set_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_event_class_attr_set_t>())).content as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_class_attr_set_t),
            "::",
            stringify!(content)
        )
    );
}
pub type REventClassAttrSet = r_event_class_attr_set_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_event_class_attr_rename_t {
    pub attr: REventClassAttr,
    pub attr_id_new: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_event_class_attr_rename_t() {
    assert_eq!(
        ::std::mem::size_of::<r_event_class_attr_rename_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_event_class_attr_rename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_event_class_attr_rename_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_event_class_attr_rename_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_event_class_attr_rename_t>())).attr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_class_attr_rename_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_event_class_attr_rename_t>())).attr_id_new as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_class_attr_rename_t),
            "::",
            stringify!(attr_id_new)
        )
    );
}
pub type REventClassAttrRename = r_event_class_attr_rename_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_event_debug_process_finished_t {
    pub pid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_event_debug_process_finished_t() {
    assert_eq!(
        ::std::mem::size_of::<r_event_debug_process_finished_t>(),
        4usize,
        concat!("Size of: ", stringify!(r_event_debug_process_finished_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_event_debug_process_finished_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(r_event_debug_process_finished_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_event_debug_process_finished_t>())).pid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_debug_process_finished_t),
            "::",
            stringify!(pid)
        )
    );
}
pub type REventDebugProcessFinished = r_event_debug_process_finished_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_event_io_write_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub buf: *const ::std::os::raw::c_uchar,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_event_io_write_t() {
    assert_eq!(
        ::std::mem::size_of::<r_event_io_write_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_event_io_write_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_event_io_write_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_event_io_write_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_io_write_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_io_write_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_io_write_t>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_io_write_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_event_io_write_t>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_event_io_write_t),
            "::",
            stringify!(len)
        )
    );
}
pub type REventIOWrite = r_event_io_write_t;
extern "C" {
    pub fn r_event_new(user: *mut ::std::os::raw::c_void) -> *mut REvent;
}
extern "C" {
    pub fn r_event_free(ev: *mut REvent);
}
extern "C" {
    pub fn r_event_hook(
        ev: *mut REvent,
        type_: ::std::os::raw::c_int,
        cb: REventCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> REventCallbackHandle;
}
extern "C" {
    pub fn r_event_unhook(ev: *mut REvent, handle: REventCallbackHandle);
}
extern "C" {
    pub fn r_event_send(
        ev: *mut REvent,
        type_: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_interval_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_interval_t() {
    assert_eq!(
        ::std::mem::size_of::<r_interval_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_interval_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_interval_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_interval_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_interval_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_interval_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_interval_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_interval_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RInterval = r_interval_t;
pub type r_itv_t = RInterval;
pub type RMalloc =
    ::std::option::Option<unsafe extern "C" fn(arg1: size_t) -> *mut ::std::os::raw::c_void>;
pub type RCalloc = ::std::option::Option<
    unsafe extern "C" fn(arg1: size_t, arg2: size_t) -> *mut ::std::os::raw::c_void,
>;
pub type RRealloc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RFree = ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn r_malloc_aligned(size: size_t, alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_free_aligned(p: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_rb_node_t {
    pub parent: *mut r_rb_node_t,
    pub child: [*mut r_rb_node_t; 2usize],
    pub red: bool,
}
#[test]
fn bindgen_test_layout_r_rb_node_t() {
    assert_eq!(
        ::std::mem::size_of::<r_rb_node_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_rb_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_rb_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_rb_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_rb_node_t>())).parent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_rb_node_t),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_rb_node_t>())).child as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_rb_node_t),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_rb_node_t>())).red as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_rb_node_t),
            "::",
            stringify!(red)
        )
    );
}
pub type RBNode = r_rb_node_t;
pub type RBTree = *mut RBNode;
pub type RBComparator = ::std::option::Option<
    unsafe extern "C" fn(
        incoming: *const ::std::os::raw::c_void,
        in_tree: *const RBNode,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RBNodeFree = ::std::option::Option<
    unsafe extern "C" fn(node: *mut RBNode, user: *mut ::std::os::raw::c_void),
>;
pub type RBNodeSum = ::std::option::Option<unsafe extern "C" fn(node: *mut RBNode)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_rb_iter_t {
    pub len: size_t,
    pub path: [*mut RBNode; 62usize],
}
#[test]
fn bindgen_test_layout_r_rb_iter_t() {
    assert_eq!(
        ::std::mem::size_of::<r_rb_iter_t>(),
        504usize,
        concat!("Size of: ", stringify!(r_rb_iter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_rb_iter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_rb_iter_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_rb_iter_t>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_rb_iter_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_rb_iter_t>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_rb_iter_t),
            "::",
            stringify!(path)
        )
    );
}
pub type RBIter = r_rb_iter_t;
pub type RContRBCmp = ::std::option::Option<
    unsafe extern "C" fn(
        incoming: *mut ::std::os::raw::c_void,
        in_: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RContRBFree =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_containing_rb_node_t {
    pub node: RBNode,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_containing_rb_node_t() {
    assert_eq!(
        ::std::mem::size_of::<r_containing_rb_node_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_containing_rb_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_containing_rb_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_containing_rb_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_containing_rb_node_t>())).node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_containing_rb_node_t),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_containing_rb_node_t>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_containing_rb_node_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RContRBNode = r_containing_rb_node_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_containing_rb_tree_t {
    pub root: *mut RContRBNode,
    pub free: RContRBFree,
}
#[test]
fn bindgen_test_layout_r_containing_rb_tree_t() {
    assert_eq!(
        ::std::mem::size_of::<r_containing_rb_tree_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_containing_rb_tree_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_containing_rb_tree_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_containing_rb_tree_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_containing_rb_tree_t>())).root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_containing_rb_tree_t),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_containing_rb_tree_t>())).free as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_containing_rb_tree_t),
            "::",
            stringify!(free)
        )
    );
}
pub type RContRBTree = r_containing_rb_tree_t;
extern "C" {
    pub fn r_rbtree_aug_delete(
        root: *mut *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        cmp_user: *mut ::std::os::raw::c_void,
        freefn: RBNodeFree,
        free_user: *mut ::std::os::raw::c_void,
        sum: RBNodeSum,
    ) -> bool;
}
extern "C" {
    pub fn r_rbtree_aug_insert(
        root: *mut *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        node: *mut RBNode,
        cmp: RBComparator,
        cmp_user: *mut ::std::os::raw::c_void,
        sum: RBNodeSum,
    ) -> bool;
}
extern "C" {
    pub fn r_rbtree_aug_update_sum(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        node: *mut RBNode,
        cmp: RBComparator,
        cmp_user: *mut ::std::os::raw::c_void,
        sum: RBNodeSum,
    ) -> bool;
}
extern "C" {
    pub fn r_rbtree_delete(
        root: *mut *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        cmp_user: *mut ::std::os::raw::c_void,
        freefn: RBNodeFree,
        free_user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_rbtree_find(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut RBNode;
}
extern "C" {
    pub fn r_rbtree_free(root: *mut RBNode, freefn: RBNodeFree, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_rbtree_insert(
        root: *mut *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        node: *mut RBNode,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_rbtree_lower_bound(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut RBNode;
}
extern "C" {
    pub fn r_rbtree_upper_bound(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut RBNode;
}
extern "C" {
    pub fn r_rbtree_first(root: *mut RBNode) -> RBIter;
}
extern "C" {
    pub fn r_rbtree_last(root: *mut RBNode) -> RBIter;
}
extern "C" {
    pub fn r_rbtree_lower_bound_forward(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> RBIter;
}
extern "C" {
    pub fn r_rbtree_upper_bound_backward(
        root: *mut RBNode,
        data: *mut ::std::os::raw::c_void,
        cmp: RBComparator,
        user: *mut ::std::os::raw::c_void,
    ) -> RBIter;
}
extern "C" {
    pub fn r_rbtree_iter_next(it: *mut RBIter);
}
extern "C" {
    pub fn r_rbtree_iter_prev(it: *mut RBIter);
}
extern "C" {
    pub fn r_rbtree_cont_new() -> *mut RContRBTree;
}
extern "C" {
    pub fn r_rbtree_cont_newf(f: RContRBFree) -> *mut RContRBTree;
}
extern "C" {
    pub fn r_rbtree_cont_insert(
        tree: *mut RContRBTree,
        data: *mut ::std::os::raw::c_void,
        cmp: RContRBCmp,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_rbtree_cont_delete(
        tree: *mut RContRBTree,
        data: *mut ::std::os::raw::c_void,
        cmp: RContRBCmp,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_rbtree_cont_find_node(
        tree: *mut RContRBTree,
        data: *mut ::std::os::raw::c_void,
        cmp: RContRBCmp,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut RContRBNode;
}
extern "C" {
    pub fn r_rbtree_cont_node_next(node: *mut RContRBNode) -> *mut RContRBNode;
}
extern "C" {
    pub fn r_rbtree_cont_node_prev(node: *mut RContRBNode) -> *mut RContRBNode;
}
extern "C" {
    pub fn r_rbtree_cont_node_first(tree: *mut RContRBTree) -> *mut RContRBNode;
}
extern "C" {
    pub fn r_rbtree_cont_node_last(tree: *mut RContRBTree) -> *mut RContRBNode;
}
extern "C" {
    pub fn r_rbtree_cont_find(
        tree: *mut RContRBTree,
        data: *mut ::std::os::raw::c_void,
        cmp: RContRBCmp,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_rbtree_cont_first(tree: *mut RContRBTree) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_rbtree_cont_last(tree: *mut RContRBTree) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_rbtree_cont_free(tree: *mut RContRBTree);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_interval_node_t {
    pub node: RBNode,
    pub start: ::std::os::raw::c_ulonglong,
    pub end: ::std::os::raw::c_ulonglong,
    pub max_end: ::std::os::raw::c_ulonglong,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_interval_node_t() {
    assert_eq!(
        ::std::mem::size_of::<r_interval_node_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_interval_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_interval_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_interval_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_interval_node_t>())).node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_interval_node_t),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_interval_node_t>())).start as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_interval_node_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_interval_node_t>())).end as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_interval_node_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_interval_node_t>())).max_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_interval_node_t),
            "::",
            stringify!(max_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_interval_node_t>())).data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_interval_node_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RIntervalNode = r_interval_node_t;
pub type RIntervalNodeFree =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_interval_tree_t {
    pub root: *mut RIntervalNode,
    pub free: RIntervalNodeFree,
}
#[test]
fn bindgen_test_layout_r_interval_tree_t() {
    assert_eq!(
        ::std::mem::size_of::<r_interval_tree_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_interval_tree_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_interval_tree_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_interval_tree_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_interval_tree_t>())).root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_interval_tree_t),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_interval_tree_t>())).free as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_interval_tree_t),
            "::",
            stringify!(free)
        )
    );
}
pub type RIntervalTree = r_interval_tree_t;
extern "C" {
    pub fn r_interval_tree_init(tree: *mut RIntervalTree, free: RIntervalNodeFree);
}
extern "C" {
    pub fn r_interval_tree_fini(tree: *mut RIntervalTree);
}
extern "C" {
    pub fn r_interval_tree_insert(
        tree: *mut RIntervalTree,
        start: ::std::os::raw::c_ulonglong,
        end: ::std::os::raw::c_ulonglong,
        data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_interval_tree_delete(
        tree: *mut RIntervalTree,
        node: *mut RIntervalNode,
        free: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_interval_tree_resize(
        tree: *mut RIntervalTree,
        node: *mut RIntervalNode,
        new_start: ::std::os::raw::c_ulonglong,
        new_end: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_interval_tree_first_at(
        tree: *mut RIntervalTree,
        start: ::std::os::raw::c_ulonglong,
    ) -> RBIter;
}
extern "C" {
    pub fn r_interval_tree_node_at(
        tree: *mut RIntervalTree,
        start: ::std::os::raw::c_ulonglong,
    ) -> *mut RIntervalNode;
}
extern "C" {
    pub fn r_interval_tree_node_at_data(
        tree: *mut RIntervalTree,
        start: ::std::os::raw::c_ulonglong,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RIntervalNode;
}
pub type RIntervalIterCb = ::std::option::Option<
    unsafe extern "C" fn(node: *mut RIntervalNode, user: *mut ::std::os::raw::c_void) -> bool,
>;
extern "C" {
    pub fn r_interval_tree_all_at(
        tree: *mut RIntervalTree,
        start: ::std::os::raw::c_ulonglong,
        cb: RIntervalIterCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_interval_tree_all_in(
        tree: *mut RIntervalTree,
        value: ::std::os::raw::c_ulonglong,
        end_inclusive: bool,
        cb: RIntervalIterCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_interval_tree_all_intersect(
        tree: *mut RIntervalTree,
        start: ::std::os::raw::c_ulonglong,
        end: ::std::os::raw::c_ulonglong,
        end_inclusive: bool,
        cb: RIntervalIterCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
pub type RIntervalTreeIter = RBIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_num_big_t {
    pub array: [::std::os::raw::c_uint; 128usize],
    pub sign: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_num_big_t() {
    assert_eq!(
        ::std::mem::size_of::<r_num_big_t>(),
        516usize,
        concat!("Size of: ", stringify!(r_num_big_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_num_big_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_num_big_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_big_t>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_big_t),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_num_big_t>())).sign as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(r_num_big_t),
            "::",
            stringify!(sign)
        )
    );
}
pub type RNumBig = r_num_big_t;
extern "C" {
    pub fn r_big_new() -> *mut RNumBig;
}
extern "C" {
    pub fn r_big_free(b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_init(b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_fini(b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_from_int(b: *mut RNumBig, v: ::std::os::raw::c_longlong);
}
extern "C" {
    pub fn r_big_to_int(b: *mut RNumBig) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_big_from_hexstr(b: *mut RNumBig, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_big_to_hexstr(b: *mut RNumBig) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_big_assign(dst: *mut RNumBig, src: *mut RNumBig);
}
extern "C" {
    pub fn r_big_add(c: *mut RNumBig, a: *mut RNumBig, b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_sub(c: *mut RNumBig, a: *mut RNumBig, b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_mul(c: *mut RNumBig, a: *mut RNumBig, b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_div(c: *mut RNumBig, a: *mut RNumBig, b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_mod(c: *mut RNumBig, a: *mut RNumBig, b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_divmod(c: *mut RNumBig, d: *mut RNumBig, a: *mut RNumBig, b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_and(c: *mut RNumBig, a: *mut RNumBig, b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_or(c: *mut RNumBig, a: *mut RNumBig, b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_xor(c: *mut RNumBig, a: *mut RNumBig, b: *mut RNumBig);
}
extern "C" {
    pub fn r_big_lshift(c: *mut RNumBig, a: *mut RNumBig, nbits: size_t);
}
extern "C" {
    pub fn r_big_rshift(c: *mut RNumBig, a: *mut RNumBig, nbits: size_t);
}
extern "C" {
    pub fn r_big_cmp(a: *mut RNumBig, b: *mut RNumBig) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_big_is_zero(a: *mut RNumBig) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_big_inc(a: *mut RNumBig);
}
extern "C" {
    pub fn r_big_dec(a: *mut RNumBig);
}
extern "C" {
    pub fn r_big_powm(c: *mut RNumBig, a: *mut RNumBig, b: *mut RNumBig, m: *mut RNumBig);
}
extern "C" {
    pub fn r_big_isqrt(c: *mut RNumBig, a: *mut RNumBig);
}
extern "C" {
    pub fn r_base64_encode(
        bout: *mut ::std::os::raw::c_char,
        bin: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_base64_decode(
        bout: *mut ::std::os::raw::c_uchar,
        bin: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_base64_decode_dyn(
        in_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_base64_encode_dyn(
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_base91_encode(
        bout: *mut ::std::os::raw::c_char,
        bin: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_base91_decode(
        bout: *mut ::std::os::raw::c_uchar,
        bin: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type RBuffer = r_buf_t;
pub type RBufferInit = ::std::option::Option<
    unsafe extern "C" fn(b: *mut RBuffer, user: *const ::std::os::raw::c_void) -> bool,
>;
pub type RBufferFini = ::std::option::Option<unsafe extern "C" fn(b: *mut RBuffer) -> bool>;
pub type RBufferRead = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut RBuffer,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong,
>;
pub type RBufferWrite = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut RBuffer,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong,
>;
pub type RBufferGetSize =
    ::std::option::Option<unsafe extern "C" fn(b: *mut RBuffer) -> ::std::os::raw::c_ulonglong>;
pub type RBufferResize = ::std::option::Option<
    unsafe extern "C" fn(b: *mut RBuffer, newsize: ::std::os::raw::c_ulonglong) -> bool,
>;
pub type RBufferSeek = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut RBuffer,
        addr: ::std::os::raw::c_longlong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong,
>;
pub type RBufferGetWholeBuf = ::std::option::Option<
    unsafe extern "C" fn(
        b: *mut RBuffer,
        sz: *mut ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_uchar,
>;
pub type RBufferFreeWholeBuf = ::std::option::Option<unsafe extern "C" fn(b: *mut RBuffer)>;
pub type RBufferNonEmptyList =
    ::std::option::Option<unsafe extern "C" fn(b: *mut RBuffer) -> *mut RList>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_buffer_methods_t {
    pub init: RBufferInit,
    pub fini: RBufferFini,
    pub read: RBufferRead,
    pub write: RBufferWrite,
    pub get_size: RBufferGetSize,
    pub resize: RBufferResize,
    pub seek: RBufferSeek,
    pub get_whole_buf: RBufferGetWholeBuf,
    pub free_whole_buf: RBufferFreeWholeBuf,
    pub nonempty_list: RBufferNonEmptyList,
}
#[test]
fn bindgen_test_layout_r_buffer_methods_t() {
    assert_eq!(
        ::std::mem::size_of::<r_buffer_methods_t>(),
        80usize,
        concat!("Size of: ", stringify!(r_buffer_methods_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_buffer_methods_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_buffer_methods_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buffer_methods_t>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buffer_methods_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buffer_methods_t>())).fini as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buffer_methods_t),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buffer_methods_t>())).read as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buffer_methods_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buffer_methods_t>())).write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buffer_methods_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buffer_methods_t>())).get_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buffer_methods_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buffer_methods_t>())).resize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buffer_methods_t),
            "::",
            stringify!(resize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buffer_methods_t>())).seek as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buffer_methods_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_buffer_methods_t>())).get_whole_buf as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buffer_methods_t),
            "::",
            stringify!(get_whole_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_buffer_methods_t>())).free_whole_buf as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buffer_methods_t),
            "::",
            stringify!(free_whole_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_buffer_methods_t>())).nonempty_list as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buffer_methods_t),
            "::",
            stringify!(nonempty_list)
        )
    );
}
pub type RBufferMethods = r_buffer_methods_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_buf_t {
    pub methods: *const RBufferMethods,
    pub priv_: *mut ::std::os::raw::c_void,
    pub whole_buf: *mut ::std::os::raw::c_uchar,
    pub readonly: bool,
    pub Oxff_priv: ::std::os::raw::c_uchar,
    pub refctr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<r_buf_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_buf_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_t>())).methods as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_t),
            "::",
            stringify!(methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_t>())).priv_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_t),
            "::",
            stringify!(priv_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_t>())).whole_buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_t),
            "::",
            stringify!(whole_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_t>())).readonly as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_t),
            "::",
            stringify!(readonly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_t>())).Oxff_priv as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_t),
            "::",
            stringify!(Oxff_priv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_t>())).refctr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_t),
            "::",
            stringify!(refctr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_buf_cache_t {
    pub from: ::std::os::raw::c_ulonglong,
    pub to: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_uchar,
    pub written: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_buf_cache_t() {
    assert_eq!(
        ::std::mem::size_of::<r_buf_cache_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_buf_cache_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_buf_cache_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_buf_cache_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_cache_t>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_cache_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_cache_t>())).to as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_cache_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_cache_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_cache_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_cache_t>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_cache_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_buf_cache_t>())).written as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_buf_cache_t),
            "::",
            stringify!(written)
        )
    );
}
pub type RBufferSparse = r_buf_cache_t;
extern "C" {
    pub fn r_buf_new() -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_with_io(
        iob: *mut ::std::os::raw::c_void,
        fd: ::std::os::raw::c_int,
    ) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_with_bytes(
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_with_string(msg: *const ::std::os::raw::c_char) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_with_pointers(
        bytes: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
        steal: bool,
    ) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_file(
        file: *const ::std::os::raw::c_char,
        perm: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_with_buf(b: *mut RBuffer) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_slurp(file: *const ::std::os::raw::c_char) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_slice(
        b: *mut RBuffer,
        offset: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_empty(len: ::std::os::raw::c_ulonglong) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_mmap(
        file: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_new_sparse(Oxff: ::std::os::raw::c_uchar) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_dump(buf: *mut RBuffer, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_buf_set_bytes(
        b: *mut RBuffer,
        buf: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_buf_append_string(
        b: *mut RBuffer,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_append_buf(b: *mut RBuffer, a: *mut RBuffer) -> bool;
}
extern "C" {
    pub fn r_buf_append_bytes(
        b: *mut RBuffer,
        buf: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_buf_append_nbytes(b: *mut RBuffer, length: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_buf_append_ut8(b: *mut RBuffer, n: ::std::os::raw::c_uchar) -> bool;
}
extern "C" {
    pub fn r_buf_append_ut16(b: *mut RBuffer, n: ::std::os::raw::c_ushort) -> bool;
}
extern "C" {
    pub fn r_buf_append_buf_slice(
        b: *mut RBuffer,
        a: *mut RBuffer,
        offset: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_buf_append_ut32(b: *mut RBuffer, n: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_buf_append_ut64(b: *mut RBuffer, n: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_buf_prepend_bytes(
        b: *mut RBuffer,
        buf: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_buf_insert_bytes(
        b: *mut RBuffer,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_to_string(b: *mut RBuffer) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_buf_get_string(
        b: *mut RBuffer,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_buf_read(
        b: *mut RBuffer,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_read_all(
        b: *mut RBuffer,
        blen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_buf_read8(b: *mut RBuffer) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_buf_fread(
        b: *mut RBuffer,
        buf: *mut ::std::os::raw::c_uchar,
        fmt: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_read_at(
        b: *mut RBuffer,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_read8_at(
        b: *mut RBuffer,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_buf_tell(b: *mut RBuffer) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_buf_seek(
        b: *mut RBuffer,
        addr: ::std::os::raw::c_longlong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_fread_at(
        b: *mut RBuffer,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        fmt: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_write(
        b: *mut RBuffer,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_fwrite(
        b: *mut RBuffer,
        buf: *const ::std::os::raw::c_uchar,
        fmt: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_write_at(
        b: *mut RBuffer,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_fwrite_at(
        b: *mut RBuffer,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        fmt: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_data(
        b: *mut RBuffer,
        size: *mut ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_buf_size(b: *mut RBuffer) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_buf_resize(b: *mut RBuffer, newsize: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_buf_ref(b: *mut RBuffer) -> *mut RBuffer;
}
extern "C" {
    pub fn r_buf_free(b: *mut RBuffer);
}
extern "C" {
    pub fn r_buf_fini(b: *mut RBuffer) -> bool;
}
extern "C" {
    pub fn r_buf_nonempty_list(b: *mut RBuffer) -> *mut RList;
}
extern "C" {
    pub fn r_buf_uleb128(
        b: *mut RBuffer,
        v: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_buf_sleb128(
        b: *mut RBuffer,
        v: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bitmap_t {
    pub length: ::std::os::raw::c_int,
    pub bitmap: *mut ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_bitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bitmap_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_bitmap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bitmap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bitmap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bitmap_t>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bitmap_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bitmap_t>())).bitmap as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bitmap_t),
            "::",
            stringify!(bitmap)
        )
    );
}
pub type RBitmap = r_bitmap_t;
extern "C" {
    pub fn r_bitmap_new(len: size_t) -> *mut RBitmap;
}
extern "C" {
    pub fn r_bitmap_set_bytes(
        b: *mut RBitmap,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_bitmap_free(b: *mut RBitmap);
}
extern "C" {
    pub fn r_bitmap_set(b: *mut RBitmap, bit: size_t);
}
extern "C" {
    pub fn r_bitmap_unset(b: *mut RBitmap, bit: size_t);
}
extern "C" {
    pub fn r_bitmap_test(b: *mut RBitmap, bit: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_time_now() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_time_now_mono() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_time_stamp_to_str(timeStamp: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_time_dos_time_stamp_to_posix(
        timeStamp: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn r_time_stamp_is_dos_format(
        certainPosixTimeStamp: ::std::os::raw::c_uint,
        possiblePosixOrDosTimeStamp: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn r_time_to_string(ts: ::std::os::raw::c_ulonglong) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_asctime_r(
        tm: *const tm,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_ctime_r(
        timer: *const time_t,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_debruijn_pattern(
        size: ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_debruijn_offset(
        value: ::std::os::raw::c_ulonglong,
        is_big_endian: bool,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cache_t {
    pub base: ::std::os::raw::c_ulonglong,
    pub buf: *mut ::std::os::raw::c_uchar,
    pub len: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_cache_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cache_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_cache_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cache_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cache_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cache_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cache_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cache_t>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cache_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cache_t>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cache_t),
            "::",
            stringify!(len)
        )
    );
}
pub type RCache = r_cache_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_prof_t {
    pub when: timeval,
    pub result: f64,
}
#[test]
fn bindgen_test_layout_r_prof_t() {
    assert_eq!(
        ::std::mem::size_of::<r_prof_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_prof_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_prof_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_prof_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_prof_t>())).when as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_prof_t),
            "::",
            stringify!(when)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_prof_t>())).result as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_prof_t),
            "::",
            stringify!(result)
        )
    );
}
pub type RProfile = r_prof_t;
extern "C" {
    pub fn r_cache_new() -> *mut RCache;
}
extern "C" {
    pub fn r_cache_free(c: *mut RCache);
}
extern "C" {
    pub fn r_cache_get(
        c: *mut RCache,
        addr: ::std::os::raw::c_ulonglong,
        len: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_cache_set(
        c: *mut RCache,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cache_flush(c: *mut RCache);
}
extern "C" {
    pub fn r_prof_start(p: *mut RProfile);
}
extern "C" {
    pub fn r_prof_end(p: *mut RProfile) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_type_enum {
    pub name: *const ::std::os::raw::c_char,
    pub val: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_type_enum() {
    assert_eq!(
        ::std::mem::size_of::<r_type_enum>(),
        16usize,
        concat!("Size of: ", stringify!(r_type_enum))
    );
    assert_eq!(
        ::std::mem::align_of::<r_type_enum>(),
        8usize,
        concat!("Alignment of ", stringify!(r_type_enum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_type_enum>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_type_enum),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_type_enum>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_type_enum),
            "::",
            stringify!(val)
        )
    );
}
pub type RTypeEnum = r_type_enum;
pub const RTypeKind_R_TYPE_BASIC: RTypeKind = 0;
pub const RTypeKind_R_TYPE_ENUM: RTypeKind = 1;
pub const RTypeKind_R_TYPE_STRUCT: RTypeKind = 2;
pub const RTypeKind_R_TYPE_UNION: RTypeKind = 3;
pub const RTypeKind_R_TYPE_TYPEDEF: RTypeKind = 4;
pub type RTypeKind = ::std::os::raw::c_uint;
extern "C" {
    pub fn r_type_set(
        TDB: *mut Sdb,
        at: ::std::os::raw::c_ulonglong,
        field: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_type_del(TDB: *mut Sdb, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_type_kind(TDB: *mut Sdb, name: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_type_enum_member(
        TDB: *mut Sdb,
        name: *const ::std::os::raw::c_char,
        member: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_type_enum_getbitfield(
        TDB: *mut Sdb,
        name: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_type_get_enum(TDB: *mut Sdb, name: *const ::std::os::raw::c_char) -> *mut RList;
}
extern "C" {
    pub fn r_type_get_bitsize(
        TDB: *mut Sdb,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_type_get_by_offset(TDB: *mut Sdb, offset: ::std::os::raw::c_ulonglong) -> *mut RList;
}
extern "C" {
    pub fn r_type_get_struct_memb(
        TDB: *mut Sdb,
        type_: *const ::std::os::raw::c_char,
        offset: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_type_link_at(
        TDB: *mut Sdb,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_type_set_link(
        TDB: *mut Sdb,
        val: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_type_unlink(TDB: *mut Sdb, addr: ::std::os::raw::c_ulonglong)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_type_link_offset(
        TDB: *mut Sdb,
        val: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_type_format(
        TDB: *mut Sdb,
        t: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_type_func_exist(
        TDB: *mut Sdb,
        func_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_type_func_cc(
        TDB: *mut Sdb,
        func_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_type_func_ret(
        TDB: *mut Sdb,
        func_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_type_func_args_count(
        TDB: *mut Sdb,
        func_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_type_func_args_type(
        TDB: *mut Sdb,
        func_name: *const ::std::os::raw::c_char,
        i: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_type_func_args_name(
        TDB: *mut Sdb,
        func_name: *const ::std::os::raw::c_char,
        i: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_type_func_guess(
        TDB: *mut Sdb,
        func_name: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_name_validate_print(ch: ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_name_validate_first(ch: ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_name_check(s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_name_filter_ro(a: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_name_filter_flag(s: *mut ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_name_filter_print(s: *mut ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_name_filter(name: *mut ::std::os::raw::c_char, maxlen: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_name_filter2(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTableColumnType {
    pub name: *const ::std::os::raw::c_char,
    pub cmp: RListComparator,
}
#[test]
fn bindgen_test_layout_RTableColumnType() {
    assert_eq!(
        ::std::mem::size_of::<RTableColumnType>(),
        16usize,
        concat!("Size of: ", stringify!(RTableColumnType))
    );
    assert_eq!(
        ::std::mem::align_of::<RTableColumnType>(),
        8usize,
        concat!("Alignment of ", stringify!(RTableColumnType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTableColumnType>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTableColumnType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTableColumnType>())).cmp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTableColumnType),
            "::",
            stringify!(cmp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTableColumn {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut RTableColumnType,
    pub align: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub maxWidth: ::std::os::raw::c_int,
    pub forceUppercase: bool,
    pub total: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RTableColumn() {
    assert_eq!(
        ::std::mem::size_of::<RTableColumn>(),
        40usize,
        concat!("Size of: ", stringify!(RTableColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<RTableColumn>(),
        8usize,
        concat!("Alignment of ", stringify!(RTableColumn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTableColumn>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTableColumn),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTableColumn>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTableColumn),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTableColumn>())).align as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTableColumn),
            "::",
            stringify!(align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTableColumn>())).width as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTableColumn),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTableColumn>())).maxWidth as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTableColumn),
            "::",
            stringify!(maxWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTableColumn>())).forceUppercase as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTableColumn),
            "::",
            stringify!(forceUppercase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTableColumn>())).total as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTableColumn),
            "::",
            stringify!(total)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RListInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub pitv: RInterval,
    pub vitv: RInterval,
    pub perm: ::std::os::raw::c_int,
    pub extra: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RListInfo() {
    assert_eq!(
        ::std::mem::size_of::<RListInfo>(),
        56usize,
        concat!("Size of: ", stringify!(RListInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RListInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RListInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RListInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RListInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RListInfo>())).pitv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RListInfo),
            "::",
            stringify!(pitv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RListInfo>())).vitv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RListInfo),
            "::",
            stringify!(vitv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RListInfo>())).perm as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RListInfo),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RListInfo>())).extra as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RListInfo),
            "::",
            stringify!(extra)
        )
    );
}
pub const R_TABLE_ALIGN_LEFT: ::std::os::raw::c_uint = 0;
pub const R_TABLE_ALIGN_RIGHT: ::std::os::raw::c_uint = 1;
pub const R_TABLE_ALIGN_CENTER: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTableRow {
    pub items: *mut RList,
}
#[test]
fn bindgen_test_layout_RTableRow() {
    assert_eq!(
        ::std::mem::size_of::<RTableRow>(),
        8usize,
        concat!("Size of: ", stringify!(RTableRow))
    );
    assert_eq!(
        ::std::mem::align_of::<RTableRow>(),
        8usize,
        concat!("Alignment of ", stringify!(RTableRow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTableRow>())).items as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTableRow),
            "::",
            stringify!(items)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTable {
    pub name: *mut ::std::os::raw::c_char,
    pub rows: *mut RList,
    pub cols: *mut RList,
    pub totalCols: ::std::os::raw::c_int,
    pub showHeader: bool,
    pub showFancy: bool,
    pub showSQL: bool,
    pub showJSON: bool,
    pub showCSV: bool,
    pub showR2: bool,
    pub showSum: bool,
    pub adjustedCols: bool,
    pub cons: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RTable() {
    assert_eq!(
        ::std::mem::size_of::<RTable>(),
        48usize,
        concat!("Size of: ", stringify!(RTable))
    );
    assert_eq!(
        ::std::mem::align_of::<RTable>(),
        8usize,
        concat!("Alignment of ", stringify!(RTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).rows as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).cols as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).totalCols as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(totalCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).showHeader as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(showHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).showFancy as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(showFancy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).showSQL as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(showSQL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).showJSON as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(showJSON)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).showCSV as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(showCSV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).showR2 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(showR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).showSum as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(showSum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).adjustedCols as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(adjustedCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RTable>())).cons as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTable),
            "::",
            stringify!(cons)
        )
    );
}
pub type RTableSelector = ::std::option::Option<
    unsafe extern "C" fn(acc: *mut RTableRow, new_row: *mut RTableRow, nth: ::std::os::raw::c_int),
>;
extern "C" {
    pub fn r_table_row_free(_row: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_table_column_free(_col: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_table_column_clone(col: *mut RTableColumn) -> *mut RTableColumn;
}
extern "C" {
    pub fn r_table_type(name: *const ::std::os::raw::c_char) -> *mut RTableColumnType;
}
extern "C" {
    pub fn r_table_new(name: *const ::std::os::raw::c_char) -> *mut RTable;
}
extern "C" {
    pub fn r_table_clone(t: *const RTable) -> *mut RTable;
}
extern "C" {
    pub fn r_table_free(t: *mut RTable);
}
extern "C" {
    pub fn r_table_column_nth(
        t: *mut RTable,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_table_add_column(
        t: *mut RTable,
        type_: *mut RTableColumnType,
        name: *const ::std::os::raw::c_char,
        maxWidth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_table_set_columnsf(t: *mut RTable, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn r_table_row_new(items: *mut RList) -> *mut RTableRow;
}
extern "C" {
    pub fn r_table_add_row(t: *mut RTable, name: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn r_table_add_rowf(t: *mut RTable, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn r_table_add_row_list(t: *mut RTable, items: *mut RList);
}
extern "C" {
    pub fn r_table_tofancystring(t: *mut RTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_table_tosimplestring(t: *mut RTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_table_tostring(t: *mut RTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_table_tosql(t: *mut RTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_table_tocsv(t: *mut RTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_table_tor2cmds(t: *mut RTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_table_tojson(t: *mut RTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_table_help() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_table_filter(
        t: *mut RTable,
        nth: ::std::os::raw::c_int,
        op: ::std::os::raw::c_int,
        un: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_table_sort(t: *mut RTable, nth: ::std::os::raw::c_int, inc: bool);
}
extern "C" {
    pub fn r_table_uniq(t: *mut RTable);
}
extern "C" {
    pub fn r_table_group(t: *mut RTable, nth: ::std::os::raw::c_int, fcn: RTableSelector);
}
extern "C" {
    pub fn r_table_query(t: *mut RTable, q: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_table_hide_header(t: *mut RTable);
}
extern "C" {
    pub fn r_table_align(
        t: *mut RTable,
        nth: ::std::os::raw::c_int,
        align: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_table_visual_list(
        table: *mut RTable,
        list: *mut RList,
        seek: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_ulonglong,
        width: ::std::os::raw::c_int,
        va: bool,
    );
}
extern "C" {
    pub fn r_table_push(t: *mut RTable) -> *mut RTable;
}
extern "C" {
    pub fn r_table_pop(t: *mut RTable) -> *mut RTable;
}
extern "C" {
    pub fn r_table_fromjson(t: *mut RTable, csv: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_table_fromcsv(t: *mut RTable, csv: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_table_tohtml(t: *mut RTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_table_transpose(t: *mut RTable);
}
extern "C" {
    pub fn r_table_format(t: *mut RTable, nth: ::std::os::raw::c_int, type_: *mut RTableColumnType);
}
extern "C" {
    pub fn r_table_reduce(
        t: *mut RTable,
        nth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_table_columns(t: *mut RTable, cols: *mut RList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_mem_pool_factory_t {
    pub limit: ::std::os::raw::c_int,
    pub pools: *mut *mut RMemoryPool,
}
#[test]
fn bindgen_test_layout_r_mem_pool_factory_t() {
    assert_eq!(
        ::std::mem::size_of::<r_mem_pool_factory_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_mem_pool_factory_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_mem_pool_factory_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_mem_pool_factory_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mem_pool_factory_t>())).limit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mem_pool_factory_t),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_mem_pool_factory_t>())).pools as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_mem_pool_factory_t),
            "::",
            stringify!(pools)
        )
    );
}
pub type RPoolFactory = r_mem_pool_factory_t;
extern "C" {
    pub fn r_poolfactory_instance() -> *mut RPoolFactory;
}
extern "C" {
    pub fn r_poolfactory_init(limit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_poolfactory_new(limit: ::std::os::raw::c_int) -> *mut RPoolFactory;
}
extern "C" {
    pub fn r_poolfactory_alloc(
        pf: *mut RPoolFactory,
        nodesize: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_poolfactory_stats(pf: *mut RPoolFactory);
}
extern "C" {
    pub fn r_poolfactory_free(pf: *mut RPoolFactory);
}
extern "C" {
    pub fn r_punycode_encode(
        src: *const ::std::os::raw::c_uchar,
        srclen: ::std::os::raw::c_int,
        dstlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_punycode_decode(
        src: *const ::std::os::raw::c_char,
        srclen: ::std::os::raw::c_int,
        dstlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_queue_t {
    pub elems: *mut *mut ::std::os::raw::c_void,
    pub capacity: ::std::os::raw::c_uint,
    pub front: ::std::os::raw::c_uint,
    pub rear: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_queue_t() {
    assert_eq!(
        ::std::mem::size_of::<r_queue_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_queue_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_queue_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_queue_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_queue_t>())).elems as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_queue_t),
            "::",
            stringify!(elems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_queue_t>())).capacity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_queue_t),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_queue_t>())).front as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_queue_t),
            "::",
            stringify!(front)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_queue_t>())).rear as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_queue_t),
            "::",
            stringify!(rear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_queue_t>())).size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_queue_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RQueue = r_queue_t;
extern "C" {
    pub fn r_queue_new(n: ::std::os::raw::c_int) -> *mut RQueue;
}
extern "C" {
    pub fn r_queue_free(q: *mut RQueue);
}
extern "C" {
    pub fn r_queue_enqueue(
        q: *mut RQueue,
        el: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_queue_dequeue(q: *mut RQueue) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_queue_is_empty(q: *mut RQueue) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_range_item_t {
    pub fr: ::std::os::raw::c_ulonglong,
    pub to: ::std::os::raw::c_ulonglong,
    pub data: *mut ::std::os::raw::c_uchar,
    pub datalen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_range_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_range_item_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_range_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_range_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_range_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_range_item_t>())).fr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_range_item_t),
            "::",
            stringify!(fr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_range_item_t>())).to as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_range_item_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_range_item_t>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_range_item_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_range_item_t>())).datalen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_range_item_t),
            "::",
            stringify!(datalen)
        )
    );
}
pub type RRangeItem = r_range_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_range_t {
    pub count: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_int,
    pub ranges: *mut RList,
}
#[test]
fn bindgen_test_layout_r_range_t() {
    assert_eq!(
        ::std::mem::size_of::<r_range_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_range_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_range_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_range_t>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_range_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_range_t>())).changed as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_range_t),
            "::",
            stringify!(changed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_range_t>())).ranges as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_range_t),
            "::",
            stringify!(ranges)
        )
    );
}
pub type RRange = r_range_t;
extern "C" {
    pub fn r_range_new() -> *mut RRange;
}
extern "C" {
    pub fn r_range_new_from_string(string: *const ::std::os::raw::c_char) -> *mut RRange;
}
extern "C" {
    pub fn r_range_free(r: *mut RRange) -> *mut RRange;
}
extern "C" {
    pub fn r_range_item_get(r: *mut RRange, addr: ::std::os::raw::c_ulonglong) -> *mut RRangeItem;
}
extern "C" {
    pub fn r_range_size(r: *mut RRange) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_range_add_from_string(
        rgs: *mut RRange,
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_range_add(
        rgs: *mut RRange,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        rw: ::std::os::raw::c_int,
    ) -> *mut RRangeItem;
}
extern "C" {
    pub fn r_range_sub(
        rgs: *mut RRange,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_range_merge(rgs: *mut RRange, r: *mut RRange);
}
extern "C" {
    pub fn r_range_contains(
        rgs: *mut RRange,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_range_sort(rgs: *mut RRange) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_range_percent(rgs: *mut RRange);
}
extern "C" {
    pub fn r_range_list(rgs: *mut RRange, rad: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_range_get_n(
        rgs: *mut RRange,
        n: ::std::os::raw::c_int,
        from: *mut ::std::os::raw::c_ulonglong,
        to: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_range_inverse(
        rgs: *mut RRange,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        flags: ::std::os::raw::c_int,
    ) -> *mut RRange;
}
extern "C" {
    pub fn r_range_overlap(
        a0: ::std::os::raw::c_ulonglong,
        a1: ::std::os::raw::c_ulonglong,
        b0: ::std::os::raw::c_ulonglong,
        b1: ::std::os::raw::c_ulonglong,
        d: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_space_t {
    pub name: *mut ::std::os::raw::c_char,
    pub rb: RBNode,
}
#[test]
fn bindgen_test_layout_r_space_t() {
    assert_eq!(
        ::std::mem::size_of::<r_space_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_space_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_space_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_space_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_space_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_space_t>())).rb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_t),
            "::",
            stringify!(rb)
        )
    );
}
pub type RSpace = r_space_t;
pub const RSpaceEventType_R_SPACE_EVENT_COUNT: RSpaceEventType = 1;
pub const RSpaceEventType_R_SPACE_EVENT_RENAME: RSpaceEventType = 2;
pub const RSpaceEventType_R_SPACE_EVENT_UNSET: RSpaceEventType = 3;
pub type RSpaceEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_space_event_t {
    pub data: r_space_event_t__bindgen_ty_1,
    pub res: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union r_space_event_t__bindgen_ty_1 {
    pub count: r_space_event_t__bindgen_ty_1__bindgen_ty_1,
    pub unset: r_space_event_t__bindgen_ty_1__bindgen_ty_2,
    pub rename: r_space_event_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_space_event_t__bindgen_ty_1__bindgen_ty_1 {
    pub space: *const RSpace,
}
#[test]
fn bindgen_test_layout_r_space_event_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_space_event_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_space_event_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_space_event_t__bindgen_ty_1__bindgen_ty_1>())).space
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_space_event_t__bindgen_ty_1__bindgen_ty_2 {
    pub space: *const RSpace,
}
#[test]
fn bindgen_test_layout_r_space_event_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<r_space_event_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_space_event_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_space_event_t__bindgen_ty_1__bindgen_ty_2>())).space
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_space_event_t__bindgen_ty_1__bindgen_ty_3 {
    pub space: *const RSpace,
    pub oldname: *const ::std::os::raw::c_char,
    pub newname: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_space_event_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<r_space_event_t__bindgen_ty_1__bindgen_ty_3>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_space_event_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_space_event_t__bindgen_ty_1__bindgen_ty_3>())).space
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_space_event_t__bindgen_ty_1__bindgen_ty_3>())).oldname
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(oldname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_space_event_t__bindgen_ty_1__bindgen_ty_3>())).newname
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_event_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(newname)
        )
    );
}
#[test]
fn bindgen_test_layout_r_space_event_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_space_event_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(r_space_event_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_space_event_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(r_space_event_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_space_event_t__bindgen_ty_1>())).count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_event_t__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_space_event_t__bindgen_ty_1>())).unset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_event_t__bindgen_ty_1),
            "::",
            stringify!(unset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_space_event_t__bindgen_ty_1>())).rename as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_event_t__bindgen_ty_1),
            "::",
            stringify!(rename)
        )
    );
}
#[test]
fn bindgen_test_layout_r_space_event_t() {
    assert_eq!(
        ::std::mem::size_of::<r_space_event_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_space_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_space_event_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_space_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_space_event_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_event_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_space_event_t>())).res as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_space_event_t),
            "::",
            stringify!(res)
        )
    );
}
pub type RSpaceEvent = r_space_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_spaces_t {
    pub name: *const ::std::os::raw::c_char,
    pub current: *mut RSpace,
    pub spaces: RBTree,
    pub spacestack: *mut RList,
    pub event: *mut REvent,
}
#[test]
fn bindgen_test_layout_r_spaces_t() {
    assert_eq!(
        ::std::mem::size_of::<r_spaces_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_spaces_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_spaces_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_spaces_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_spaces_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_spaces_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_spaces_t>())).current as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_spaces_t),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_spaces_t>())).spaces as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_spaces_t),
            "::",
            stringify!(spaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_spaces_t>())).spacestack as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_spaces_t),
            "::",
            stringify!(spacestack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_spaces_t>())).event as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_spaces_t),
            "::",
            stringify!(event)
        )
    );
}
pub type RSpaces = r_spaces_t;
extern "C" {
    pub fn r_spaces_new(name: *const ::std::os::raw::c_char) -> *mut RSpaces;
}
extern "C" {
    pub fn r_spaces_init(sp: *mut RSpaces, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_spaces_fini(sp: *mut RSpaces);
}
extern "C" {
    pub fn r_spaces_free(sp: *mut RSpaces);
}
extern "C" {
    pub fn r_spaces_purge(sp: *mut RSpaces);
}
extern "C" {
    pub fn r_spaces_get(sp: *mut RSpaces, name: *const ::std::os::raw::c_char) -> *mut RSpace;
}
extern "C" {
    pub fn r_spaces_add(sp: *mut RSpaces, name: *const ::std::os::raw::c_char) -> *mut RSpace;
}
extern "C" {
    pub fn r_spaces_set(sp: *mut RSpaces, name: *const ::std::os::raw::c_char) -> *mut RSpace;
}
extern "C" {
    pub fn r_spaces_unset(sp: *mut RSpaces, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_spaces_rename(
        sp: *mut RSpaces,
        oname: *const ::std::os::raw::c_char,
        nname: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_spaces_count(
        sp: *mut RSpaces,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_spaces_push(sp: *mut RSpaces, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_spaces_pop(sp: *mut RSpaces) -> bool;
}
pub type RSpaceIter = RBIter;
extern "C" {
    pub fn ret_ascii_table() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RStrpool {
    pub str_: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RStrpool() {
    assert_eq!(
        ::std::mem::size_of::<RStrpool>(),
        16usize,
        concat!("Size of: ", stringify!(RStrpool))
    );
    assert_eq!(
        ::std::mem::align_of::<RStrpool>(),
        8usize,
        concat!("Alignment of ", stringify!(RStrpool))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RStrpool>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RStrpool),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RStrpool>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RStrpool),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RStrpool>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RStrpool),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn r_strpool_new(sz: ::std::os::raw::c_int) -> *mut RStrpool;
}
extern "C" {
    pub fn r_strpool_alloc(
        p: *mut RStrpool,
        l: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strpool_memcat(
        p: *mut RStrpool,
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_strpool_ansi_chop(p: *mut RStrpool, n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_strpool_append(
        p: *mut RStrpool,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_strpool_free(p: *mut RStrpool);
}
extern "C" {
    pub fn r_strpool_fit(p: *mut RStrpool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_strpool_get(
        p: *mut RStrpool,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strpool_get_i(
        p: *mut RStrpool,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strpool_get_index(
        p: *mut RStrpool,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_strpool_next(
        p: *mut RStrpool,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strpool_slice(
        p: *mut RStrpool,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_strpool_empty(p: *mut RStrpool) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_tree_node_t {
    pub parent: *mut r_tree_node_t,
    pub tree: *mut r_tree_t,
    pub children: *mut RList,
    pub n_children: ::std::os::raw::c_uint,
    pub depth: ::std::os::raw::c_int,
    pub free: RListFree,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_tree_node_t() {
    assert_eq!(
        ::std::mem::size_of::<r_tree_node_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_tree_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_tree_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_tree_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_node_t>())).parent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_node_t),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_node_t>())).tree as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_node_t),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_node_t>())).children as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_node_t),
            "::",
            stringify!(children)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_node_t>())).n_children as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_node_t),
            "::",
            stringify!(n_children)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_node_t>())).depth as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_node_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_node_t>())).free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_node_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_node_t>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_node_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RTreeNode = r_tree_node_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_tree_t {
    pub root: *mut RTreeNode,
}
#[test]
fn bindgen_test_layout_r_tree_t() {
    assert_eq!(
        ::std::mem::size_of::<r_tree_t>(),
        8usize,
        concat!("Size of: ", stringify!(r_tree_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_tree_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_tree_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_t>())).root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_t),
            "::",
            stringify!(root)
        )
    );
}
pub type RTree = r_tree_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_tree_visitor_t {
    pub pre_visit: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut RTreeNode, arg2: *mut r_tree_visitor_t),
    >,
    pub post_visit: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut RTreeNode, arg2: *mut r_tree_visitor_t),
    >,
    pub discover_child: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut RTreeNode, arg2: *mut r_tree_visitor_t),
    >,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_tree_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<r_tree_visitor_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_tree_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_tree_visitor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_tree_visitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_visitor_t>())).pre_visit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_visitor_t),
            "::",
            stringify!(pre_visit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_visitor_t>())).post_visit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_visitor_t),
            "::",
            stringify!(post_visit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_visitor_t>())).discover_child as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_visitor_t),
            "::",
            stringify!(discover_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_tree_visitor_t>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_tree_visitor_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RTreeVisitor = r_tree_visitor_t;
pub type RTreeNodeVisitCb =
    ::std::option::Option<unsafe extern "C" fn(n: *mut RTreeNode, vis: *mut RTreeVisitor)>;
extern "C" {
    pub fn r_tree_new() -> *mut RTree;
}
extern "C" {
    pub fn r_tree_add_node(
        t: *mut RTree,
        node: *mut RTreeNode,
        child_data: *mut ::std::os::raw::c_void,
    ) -> *mut RTreeNode;
}
extern "C" {
    pub fn r_tree_reset(t: *mut RTree);
}
extern "C" {
    pub fn r_tree_free(t: *mut RTree);
}
extern "C" {
    pub fn r_tree_dfs(t: *mut RTree, vis: *mut RTreeVisitor);
}
extern "C" {
    pub fn r_tree_bfs(t: *mut RTree, vis: *mut RTreeVisitor);
}
extern "C" {
    pub fn r_uleb128(
        data: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_ulonglong,
        error: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_uleb128_decode(
        data: *const ::std::os::raw::c_uchar,
        datalen: *mut ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_uleb128_len(
        data: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_uleb128_encode(
        s: ::std::os::raw::c_ulonglong,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_leb128(
        data: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_longlong,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_sleb128(
        data: *mut *const ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn read_u32_leb128(
        p: *const ::std::os::raw::c_uchar,
        max: *const ::std::os::raw::c_uchar,
        out_val: *mut ::std::os::raw::c_uint,
    ) -> size_t;
}
extern "C" {
    pub fn read_i32_leb128(
        p: *const ::std::os::raw::c_uchar,
        max: *const ::std::os::raw::c_uchar,
        out_val: *mut ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn read_u64_leb128(
        p: *const ::std::os::raw::c_uchar,
        max: *const ::std::os::raw::c_uchar,
        out_val: *mut ::std::os::raw::c_ulonglong,
    ) -> size_t;
}
extern "C" {
    pub fn read_i64_leb128(
        p: *const ::std::os::raw::c_uchar,
        max: *const ::std::os::raw::c_uchar,
        out_val: *mut ::std::os::raw::c_longlong,
    ) -> size_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RUtfBlock {
    pub from: ::std::os::raw::c_uint,
    pub to: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RUtfBlock() {
    assert_eq!(
        ::std::mem::size_of::<RUtfBlock>(),
        16usize,
        concat!("Size of: ", stringify!(RUtfBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<RUtfBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(RUtfBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RUtfBlock>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RUtfBlock),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RUtfBlock>())).to as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RUtfBlock),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RUtfBlock>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RUtfBlock),
            "::",
            stringify!(name)
        )
    );
}
pub type RRune = ::std::os::raw::c_uint;
extern "C" {
    pub fn r_utf8_encode(ptr: *mut ::std::os::raw::c_uchar, ch: RRune) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf8_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RRune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf8_encode_str(
        str_: *const RRune,
        dst: *mut ::std::os::raw::c_uchar,
        dst_length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf8_size(ptr: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf8_strlen(str_: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_isprint(c: RRune) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf16_to_utf8_l(
        wc: *const wchar_t,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_utf_block_name(idx: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_utf8_to_utf16_l(
        cstring: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn r_utf_block_idx(ch: RRune) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf_block_list(
        str_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        freq_list: *mut *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf_bom_encoding(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
    ) -> RStrEnc;
}
extern "C" {
    pub fn r_utf16_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RRune,
        bigendian: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf16le_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RRune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf16be_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RRune,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf16le_encode(ptr: *mut ::std::os::raw::c_uchar, ch: RRune) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf32_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RRune,
        bigendian: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_utf32le_decode(
        ptr: *const ::std::os::raw::c_uchar,
        ptrlen: ::std::os::raw::c_int,
        ch: *mut RRune,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_id_pool_t {
    pub start_id: ::std::os::raw::c_uint,
    pub last_id: ::std::os::raw::c_uint,
    pub next_id: ::std::os::raw::c_uint,
    pub freed_ids: *mut RQueue,
}
#[test]
fn bindgen_test_layout_r_id_pool_t() {
    assert_eq!(
        ::std::mem::size_of::<r_id_pool_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_id_pool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_id_pool_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_id_pool_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_id_pool_t>())).start_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_id_pool_t),
            "::",
            stringify!(start_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_id_pool_t>())).last_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_id_pool_t),
            "::",
            stringify!(last_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_id_pool_t>())).next_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_id_pool_t),
            "::",
            stringify!(next_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_id_pool_t>())).freed_ids as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_id_pool_t),
            "::",
            stringify!(freed_ids)
        )
    );
}
pub type RIDPool = r_id_pool_t;
extern "C" {
    pub fn r_id_pool_new(
        start_id: ::std::os::raw::c_uint,
        last_id: ::std::os::raw::c_uint,
    ) -> *mut RIDPool;
}
extern "C" {
    pub fn r_id_pool_grab_id(pool: *mut RIDPool, grabber: *mut ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_id_pool_kick_id(pool: *mut RIDPool, kick: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_id_pool_free(pool: *mut RIDPool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_id_storage_t {
    pub pool: *mut RIDPool,
    pub data: *mut *mut ::std::os::raw::c_void,
    pub top_id: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_id_storage_t() {
    assert_eq!(
        ::std::mem::size_of::<r_id_storage_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_id_storage_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_id_storage_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_id_storage_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_id_storage_t>())).pool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_id_storage_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_id_storage_t>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_id_storage_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_id_storage_t>())).top_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_id_storage_t),
            "::",
            stringify!(top_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_id_storage_t>())).size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_id_storage_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RIDStorage = r_id_storage_t;
pub type RIDStorageForeachCb = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type ROIDStorageCompareCb = ::std::option::Option<
    unsafe extern "C" fn(
        in_: *mut ::std::os::raw::c_void,
        incoming: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
        cmp_res: *mut ::std::os::raw::c_int,
    ) -> bool,
>;
extern "C" {
    pub fn r_id_storage_new(
        start_id: ::std::os::raw::c_uint,
        last_id: ::std::os::raw::c_uint,
    ) -> *mut RIDStorage;
}
extern "C" {
    pub fn r_id_storage_set(
        storage: *mut RIDStorage,
        data: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn r_id_storage_add(
        storage: *mut RIDStorage,
        data: *mut ::std::os::raw::c_void,
        id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn r_id_storage_get(
        storage: *mut RIDStorage,
        id: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_id_storage_get_next(storage: *mut RIDStorage, id: *mut ::std::os::raw::c_uint)
        -> bool;
}
extern "C" {
    pub fn r_id_storage_get_prev(storage: *mut RIDStorage, id: *mut ::std::os::raw::c_uint)
        -> bool;
}
extern "C" {
    pub fn r_id_storage_delete(storage: *mut RIDStorage, id: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn r_id_storage_take(
        storage: *mut RIDStorage,
        id: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_id_storage_foreach(
        storage: *mut RIDStorage,
        cb: RIDStorageForeachCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_id_storage_free(storage: *mut RIDStorage);
}
extern "C" {
    pub fn r_id_storage_list(s: *mut RIDStorage) -> *mut RList;
}
extern "C" {
    pub fn r_id_storage_get_lowest(
        storage: *mut RIDStorage,
        id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn r_id_storage_get_highest(
        storage: *mut RIDStorage,
        id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_ordered_id_storage_t {
    pub permutation: *mut ::std::os::raw::c_uint,
    pub psize: ::std::os::raw::c_uint,
    pub ptop: ::std::os::raw::c_uint,
    pub data: *mut RIDStorage,
    pub cmp: ROIDStorageCompareCb,
}
#[test]
fn bindgen_test_layout_r_ordered_id_storage_t() {
    assert_eq!(
        ::std::mem::size_of::<r_ordered_id_storage_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_ordered_id_storage_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_ordered_id_storage_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_ordered_id_storage_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_ordered_id_storage_t>())).permutation as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ordered_id_storage_t),
            "::",
            stringify!(permutation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ordered_id_storage_t>())).psize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ordered_id_storage_t),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ordered_id_storage_t>())).ptop as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ordered_id_storage_t),
            "::",
            stringify!(ptop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ordered_id_storage_t>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ordered_id_storage_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ordered_id_storage_t>())).cmp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ordered_id_storage_t),
            "::",
            stringify!(cmp)
        )
    );
}
pub type ROIDStorage = r_ordered_id_storage_t;
extern "C" {
    pub fn r_oids_new(
        start_id: ::std::os::raw::c_uint,
        last_id: ::std::os::raw::c_uint,
    ) -> *mut ROIDStorage;
}
extern "C" {
    pub fn r_oids_get(
        storage: *mut ROIDStorage,
        id: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_oids_oget(
        storage: *mut ROIDStorage,
        od: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_oids_get_id(
        storage: *mut ROIDStorage,
        od: ::std::os::raw::c_uint,
        id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn r_oids_get_od(
        storage: *mut ROIDStorage,
        id: ::std::os::raw::c_uint,
        od: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn r_oids_to_front(storage: *mut ROIDStorage, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_oids_to_rear(storage: *mut ROIDStorage, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_oids_delete(storage: *mut ROIDStorage, id: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn r_oids_odelete(st: *mut ROIDStorage, od: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn r_oids_free(storage: *mut ROIDStorage);
}
extern "C" {
    pub fn r_oids_add(
        storage: *mut ROIDStorage,
        data: *mut ::std::os::raw::c_void,
        id: *mut ::std::os::raw::c_uint,
        od: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn r_oids_take(
        storage: *mut ROIDStorage,
        id: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_oids_otake(
        st: *mut ROIDStorage,
        od: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_oids_foreach(
        storage: *mut ROIDStorage,
        cb: RIDStorageForeachCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_oids_foreach_prev(
        storage: *mut ROIDStorage,
        cb: RIDStorageForeachCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_oids_insert(
        storage: *mut ROIDStorage,
        data: *mut ::std::os::raw::c_void,
        id: *mut ::std::os::raw::c_uint,
        od: *mut ::std::os::raw::c_uint,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_oids_sort(storage: *mut ROIDStorage, user: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn r_oids_find(
        storage: *mut ROIDStorage,
        incoming: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn r_oids_last(storage: *mut ROIDStorage) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_oids_first(storage: *mut ROIDStorage) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_asn1_string_t {
    pub length: ::std::os::raw::c_uint,
    pub string: *const ::std::os::raw::c_char,
    pub allocated: bool,
}
#[test]
fn bindgen_test_layout_r_asn1_string_t() {
    assert_eq!(
        ::std::mem::size_of::<r_asn1_string_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_asn1_string_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_asn1_string_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_asn1_string_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_string_t>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_string_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_string_t>())).string as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_string_t),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_string_t>())).allocated as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_string_t),
            "::",
            stringify!(allocated)
        )
    );
}
pub type RASN1String = r_asn1_string_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_asn1_list_t {
    pub length: ::std::os::raw::c_uint,
    pub objects: *mut *mut r_asn1_object_t,
}
#[test]
fn bindgen_test_layout_r_asn1_list_t() {
    assert_eq!(
        ::std::mem::size_of::<r_asn1_list_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_asn1_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_asn1_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_asn1_list_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_list_t>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_list_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_list_t>())).objects as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_list_t),
            "::",
            stringify!(objects)
        )
    );
}
pub type ASN1List = r_asn1_list_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_asn1_bin_t {
    pub length: ::std::os::raw::c_uint,
    pub binary: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_r_asn1_bin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_asn1_bin_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_asn1_bin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_asn1_bin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_asn1_bin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_bin_t>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_bin_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_bin_t>())).binary as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_bin_t),
            "::",
            stringify!(binary)
        )
    );
}
pub type RASN1Binary = r_asn1_bin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_asn1_object_t {
    pub klass: ::std::os::raw::c_uchar,
    pub form: ::std::os::raw::c_uchar,
    pub tag: ::std::os::raw::c_uchar,
    pub sector: *const ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uint,
    pub offset: ::std::os::raw::c_ulonglong,
    pub list: ASN1List,
}
#[test]
fn bindgen_test_layout_r_asn1_object_t() {
    assert_eq!(
        ::std::mem::size_of::<r_asn1_object_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_asn1_object_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_asn1_object_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_asn1_object_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_object_t>())).klass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_object_t),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_object_t>())).form as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_object_t),
            "::",
            stringify!(form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_object_t>())).tag as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_object_t),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_object_t>())).sector as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_object_t),
            "::",
            stringify!(sector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_object_t>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_object_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_object_t>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_object_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asn1_object_t>())).list as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asn1_object_t),
            "::",
            stringify!(list)
        )
    );
}
pub type RASN1Object = r_asn1_object_t;
extern "C" {
    pub fn r_asn1_create_object(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
        start_pointer: *const ::std::os::raw::c_uchar,
    ) -> *mut RASN1Object;
}
extern "C" {
    pub fn r_asn1_create_binary(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RASN1Binary;
}
extern "C" {
    pub fn r_asn1_create_string(
        string: *const ::std::os::raw::c_char,
        allocated: bool,
        length: ::std::os::raw::c_uint,
    ) -> *mut RASN1String;
}
extern "C" {
    pub fn r_asn1_stringify_bits(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RASN1String;
}
extern "C" {
    pub fn r_asn1_stringify_utctime(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RASN1String;
}
extern "C" {
    pub fn r_asn1_stringify_time(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RASN1String;
}
extern "C" {
    pub fn r_asn1_stringify_integer(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RASN1String;
}
extern "C" {
    pub fn r_asn1_stringify_string(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RASN1String;
}
extern "C" {
    pub fn r_asn1_stringify_bytes(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RASN1String;
}
extern "C" {
    pub fn r_asn1_stringify_boolean(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RASN1String;
}
extern "C" {
    pub fn r_asn1_stringify_oid(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RASN1String;
}
extern "C" {
    pub fn r_asn1_free_object(object: *mut RASN1Object);
}
extern "C" {
    pub fn r_asn1_to_string(
        object: *mut RASN1Object,
        depth: ::std::os::raw::c_uint,
        sb: *mut RStrBuf,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_asn1_free_string(string: *mut RASN1String);
}
extern "C" {
    pub fn r_asn1_free_binary(string: *mut RASN1Binary);
}
extern "C" {
    pub fn asn1_setformat(fmt: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_validity_t {
    pub notBefore: *mut RASN1String,
    pub notAfter: *mut RASN1String,
}
#[test]
fn bindgen_test_layout_r_x509_validity_t() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_validity_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_x509_validity_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_validity_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_x509_validity_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_validity_t>())).notBefore as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_validity_t),
            "::",
            stringify!(notBefore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_validity_t>())).notAfter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_validity_t),
            "::",
            stringify!(notAfter)
        )
    );
}
pub type RX509Validity = r_x509_validity_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_name_t {
    pub length: ::std::os::raw::c_uint,
    pub oids: *mut *mut RASN1String,
    pub names: *mut *mut RASN1String,
}
#[test]
fn bindgen_test_layout_r_x509_name_t() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_name_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_x509_name_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_name_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_x509_name_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_name_t>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_name_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_name_t>())).oids as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_name_t),
            "::",
            stringify!(oids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_name_t>())).names as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_name_t),
            "::",
            stringify!(names)
        )
    );
}
pub type RX509Name = r_x509_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_algorithmidentifier_t {
    pub algorithm: *mut RASN1String,
    pub parameters: *mut RASN1String,
}
#[test]
fn bindgen_test_layout_r_x509_algorithmidentifier_t() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_algorithmidentifier_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_x509_algorithmidentifier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_algorithmidentifier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_x509_algorithmidentifier_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_algorithmidentifier_t>())).algorithm as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_algorithmidentifier_t),
            "::",
            stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_algorithmidentifier_t>())).parameters as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_algorithmidentifier_t),
            "::",
            stringify!(parameters)
        )
    );
}
pub type RX509AlgorithmIdentifier = r_x509_algorithmidentifier_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_authoritykeyidentifier_t {
    pub keyIdentifier: *mut RASN1Binary,
    pub authorityCertIssuer: RX509Name,
    pub authorityCertSerialNumber: *mut RASN1Binary,
}
#[test]
fn bindgen_test_layout_r_x509_authoritykeyidentifier_t() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_authoritykeyidentifier_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_x509_authoritykeyidentifier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_authoritykeyidentifier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_x509_authoritykeyidentifier_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_authoritykeyidentifier_t>())).keyIdentifier as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_authoritykeyidentifier_t),
            "::",
            stringify!(keyIdentifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_authoritykeyidentifier_t>())).authorityCertIssuer
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_authoritykeyidentifier_t),
            "::",
            stringify!(authorityCertIssuer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_authoritykeyidentifier_t>())).authorityCertSerialNumber
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_authoritykeyidentifier_t),
            "::",
            stringify!(authorityCertSerialNumber)
        )
    );
}
pub type RX509AuthorityKeyIdentifier = r_x509_authoritykeyidentifier_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_subjectpublickeyinfo_t {
    pub algorithm: RX509AlgorithmIdentifier,
    pub subjectPublicKey: *mut RASN1Binary,
    pub subjectPublicKeyExponent: *mut RASN1Binary,
    pub subjectPublicKeyModule: *mut RASN1Binary,
}
#[test]
fn bindgen_test_layout_r_x509_subjectpublickeyinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_subjectpublickeyinfo_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_x509_subjectpublickeyinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_subjectpublickeyinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_x509_subjectpublickeyinfo_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_subjectpublickeyinfo_t>())).algorithm as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_subjectpublickeyinfo_t),
            "::",
            stringify!(algorithm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_subjectpublickeyinfo_t>())).subjectPublicKey as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_subjectpublickeyinfo_t),
            "::",
            stringify!(subjectPublicKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_subjectpublickeyinfo_t>())).subjectPublicKeyExponent
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_subjectpublickeyinfo_t),
            "::",
            stringify!(subjectPublicKeyExponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_subjectpublickeyinfo_t>())).subjectPublicKeyModule
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_subjectpublickeyinfo_t),
            "::",
            stringify!(subjectPublicKeyModule)
        )
    );
}
pub type RX509SubjectPublicKeyInfo = r_x509_subjectpublickeyinfo_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_extension_t {
    pub extnID: *mut RASN1String,
    pub critical: bool,
    pub extnValue: *mut RASN1Binary,
}
#[test]
fn bindgen_test_layout_r_x509_extension_t() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_extension_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_x509_extension_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_extension_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_x509_extension_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_extension_t>())).extnID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_extension_t),
            "::",
            stringify!(extnID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_extension_t>())).critical as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_extension_t),
            "::",
            stringify!(critical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_extension_t>())).extnValue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_extension_t),
            "::",
            stringify!(extnValue)
        )
    );
}
pub type RX509Extension = r_x509_extension_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_extensions_t {
    pub length: ::std::os::raw::c_uint,
    pub extensions: *mut *mut RX509Extension,
}
#[test]
fn bindgen_test_layout_r_x509_extensions_t() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_extensions_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_x509_extensions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_extensions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_x509_extensions_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_extensions_t>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_extensions_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_extensions_t>())).extensions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_extensions_t),
            "::",
            stringify!(extensions)
        )
    );
}
pub type RX509Extensions = r_x509_extensions_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_tbscertificate_t {
    pub version: ::std::os::raw::c_uint,
    pub serialNumber: *mut RASN1String,
    pub signature: RX509AlgorithmIdentifier,
    pub issuer: RX509Name,
    pub validity: RX509Validity,
    pub subject: RX509Name,
    pub subjectPublicKeyInfo: RX509SubjectPublicKeyInfo,
    pub issuerUniqueID: *mut RASN1Binary,
    pub subjectUniqueID: *mut RASN1Binary,
    pub extensions: RX509Extensions,
}
#[test]
fn bindgen_test_layout_r_x509_tbscertificate_t() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_tbscertificate_t>(),
        168usize,
        concat!("Size of: ", stringify!(r_x509_tbscertificate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_tbscertificate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_x509_tbscertificate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_tbscertificate_t>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_tbscertificate_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_tbscertificate_t>())).serialNumber as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_tbscertificate_t),
            "::",
            stringify!(serialNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_tbscertificate_t>())).signature as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_tbscertificate_t),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_tbscertificate_t>())).issuer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_tbscertificate_t),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_tbscertificate_t>())).validity as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_tbscertificate_t),
            "::",
            stringify!(validity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_tbscertificate_t>())).subject as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_tbscertificate_t),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_tbscertificate_t>())).subjectPublicKeyInfo as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_tbscertificate_t),
            "::",
            stringify!(subjectPublicKeyInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_tbscertificate_t>())).issuerUniqueID as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_tbscertificate_t),
            "::",
            stringify!(issuerUniqueID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_tbscertificate_t>())).subjectUniqueID as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_tbscertificate_t),
            "::",
            stringify!(subjectUniqueID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_tbscertificate_t>())).extensions as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_tbscertificate_t),
            "::",
            stringify!(extensions)
        )
    );
}
pub type RX509TBSCertificate = r_x509_tbscertificate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_certificate_t {
    pub tbsCertificate: RX509TBSCertificate,
    pub algorithmIdentifier: RX509AlgorithmIdentifier,
    pub signature: *mut RASN1Binary,
}
#[test]
fn bindgen_test_layout_r_x509_certificate_t() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_certificate_t>(),
        192usize,
        concat!("Size of: ", stringify!(r_x509_certificate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_certificate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_x509_certificate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_certificate_t>())).tbsCertificate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_certificate_t),
            "::",
            stringify!(tbsCertificate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_certificate_t>())).algorithmIdentifier as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_certificate_t),
            "::",
            stringify!(algorithmIdentifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_certificate_t>())).signature as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_certificate_t),
            "::",
            stringify!(signature)
        )
    );
}
pub type RX509Certificate = r_x509_certificate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_crlentry {
    pub userCertificate: *mut RASN1Binary,
    pub revocationDate: *mut RASN1String,
}
#[test]
fn bindgen_test_layout_r_x509_crlentry() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_crlentry>(),
        16usize,
        concat!("Size of: ", stringify!(r_x509_crlentry))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_crlentry>(),
        8usize,
        concat!("Alignment of ", stringify!(r_x509_crlentry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_crlentry>())).userCertificate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_crlentry),
            "::",
            stringify!(userCertificate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_x509_crlentry>())).revocationDate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_crlentry),
            "::",
            stringify!(revocationDate)
        )
    );
}
pub type RX509CRLEntry = r_x509_crlentry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_x509_certificaterevocationlist {
    pub signature: RX509AlgorithmIdentifier,
    pub issuer: RX509Name,
    pub lastUpdate: *mut RASN1String,
    pub nextUpdate: *mut RASN1String,
    pub length: ::std::os::raw::c_uint,
    pub revokedCertificates: *mut *mut RX509CRLEntry,
}
#[test]
fn bindgen_test_layout_r_x509_certificaterevocationlist() {
    assert_eq!(
        ::std::mem::size_of::<r_x509_certificaterevocationlist>(),
        72usize,
        concat!("Size of: ", stringify!(r_x509_certificaterevocationlist))
    );
    assert_eq!(
        ::std::mem::align_of::<r_x509_certificaterevocationlist>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_x509_certificaterevocationlist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_certificaterevocationlist>())).signature as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_certificaterevocationlist),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_certificaterevocationlist>())).issuer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_certificaterevocationlist),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_certificaterevocationlist>())).lastUpdate as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_certificaterevocationlist),
            "::",
            stringify!(lastUpdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_certificaterevocationlist>())).nextUpdate as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_certificaterevocationlist),
            "::",
            stringify!(nextUpdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_certificaterevocationlist>())).length as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_certificaterevocationlist),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_x509_certificaterevocationlist>())).revokedCertificates
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_x509_certificaterevocationlist),
            "::",
            stringify!(revokedCertificates)
        )
    );
}
pub type RX509CertificateRevocationList = r_x509_certificaterevocationlist;
extern "C" {
    pub fn r_x509_parse_crl(object: *mut RASN1Object) -> *mut RX509CertificateRevocationList;
}
extern "C" {
    pub fn r_x509_crl_to_string(
        crl: *mut RX509CertificateRevocationList,
        pad: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_x509_crl_json(pj: *mut PJ, crl: *mut RX509CertificateRevocationList);
}
extern "C" {
    pub fn r_x509_parse_certificate(object: *mut RASN1Object) -> *mut RX509Certificate;
}
extern "C" {
    pub fn r_x509_parse_certificate2(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RX509Certificate;
}
extern "C" {
    pub fn r_x509_free_certificate(certificate: *mut RX509Certificate);
}
extern "C" {
    pub fn r_x509_certificate_to_string(
        certificate: *mut RX509Certificate,
        pad: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_x509_certificate_json(pj: *mut PJ, certificate: *mut RX509Certificate);
}
extern "C" {
    pub fn r_x509_certificate_dump(
        cert: *mut RX509Certificate,
        pad: *const ::std::os::raw::c_char,
        sb: *mut RStrBuf,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_certificaterevocationlists_t {
    pub length: ::std::os::raw::c_uint,
    pub elements: *mut *mut RX509CertificateRevocationList,
}
#[test]
fn bindgen_test_layout_r_pkcs7_certificaterevocationlists_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_certificaterevocationlists_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(r_pkcs7_certificaterevocationlists_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_certificaterevocationlists_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_pkcs7_certificaterevocationlists_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_certificaterevocationlists_t>())).length as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_certificaterevocationlists_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_certificaterevocationlists_t>())).elements as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_certificaterevocationlists_t),
            "::",
            stringify!(elements)
        )
    );
}
pub type RPKCS7CertificateRevocationLists = r_pkcs7_certificaterevocationlists_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_extendedcertificatesandcertificates_t {
    pub length: ::std::os::raw::c_uint,
    pub elements: *mut *mut RX509Certificate,
}
#[test]
fn bindgen_test_layout_r_pkcs7_extendedcertificatesandcertificates_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_extendedcertificatesandcertificates_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(r_pkcs7_extendedcertificatesandcertificates_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_extendedcertificatesandcertificates_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_pkcs7_extendedcertificatesandcertificates_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_extendedcertificatesandcertificates_t>())).length
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_extendedcertificatesandcertificates_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_extendedcertificatesandcertificates_t>())).elements
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_extendedcertificatesandcertificates_t),
            "::",
            stringify!(elements)
        )
    );
}
pub type RPKCS7ExtendedCertificatesAndCertificates = r_pkcs7_extendedcertificatesandcertificates_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_digestalgorithmidentifiers_t {
    pub length: ::std::os::raw::c_uint,
    pub elements: *mut *mut RX509AlgorithmIdentifier,
}
#[test]
fn bindgen_test_layout_r_pkcs7_digestalgorithmidentifiers_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_digestalgorithmidentifiers_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(r_pkcs7_digestalgorithmidentifiers_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_digestalgorithmidentifiers_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_pkcs7_digestalgorithmidentifiers_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_digestalgorithmidentifiers_t>())).length as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_digestalgorithmidentifiers_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_digestalgorithmidentifiers_t>())).elements as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_digestalgorithmidentifiers_t),
            "::",
            stringify!(elements)
        )
    );
}
pub type RPKCS7DigestAlgorithmIdentifiers = r_pkcs7_digestalgorithmidentifiers_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_contentinfo_t {
    pub contentType: *mut RASN1String,
    pub content: *mut RASN1Binary,
}
#[test]
fn bindgen_test_layout_r_pkcs7_contentinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_contentinfo_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_pkcs7_contentinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_contentinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_pkcs7_contentinfo_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_contentinfo_t>())).contentType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_contentinfo_t),
            "::",
            stringify!(contentType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_contentinfo_t>())).content as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_contentinfo_t),
            "::",
            stringify!(content)
        )
    );
}
pub type RPKCS7ContentInfo = r_pkcs7_contentinfo_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_issuerandserialnumber_t {
    pub issuer: RX509Name,
    pub serialNumber: *mut RASN1Binary,
}
#[test]
fn bindgen_test_layout_r_pkcs7_issuerandserialnumber_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_issuerandserialnumber_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_pkcs7_issuerandserialnumber_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_issuerandserialnumber_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_pkcs7_issuerandserialnumber_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_issuerandserialnumber_t>())).issuer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_issuerandserialnumber_t),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_issuerandserialnumber_t>())).serialNumber as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_issuerandserialnumber_t),
            "::",
            stringify!(serialNumber)
        )
    );
}
pub type RPKCS7IssuerAndSerialNumber = r_pkcs7_issuerandserialnumber_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_attribute_t {
    pub oid: *mut RASN1String,
    pub data: *mut RASN1Binary,
}
#[test]
fn bindgen_test_layout_r_pkcs7_attribute_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_attribute_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_pkcs7_attribute_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_attribute_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_pkcs7_attribute_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_attribute_t>())).oid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_attribute_t),
            "::",
            stringify!(oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_attribute_t>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_attribute_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RPKCS7Attribute = r_pkcs7_attribute_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_attributes_t {
    pub length: ::std::os::raw::c_uint,
    pub elements: *mut *mut RPKCS7Attribute,
}
#[test]
fn bindgen_test_layout_r_pkcs7_attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_attributes_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_pkcs7_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_attributes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_pkcs7_attributes_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_attributes_t>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_attributes_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_attributes_t>())).elements as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_attributes_t),
            "::",
            stringify!(elements)
        )
    );
}
pub type RPKCS7Attributes = r_pkcs7_attributes_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_signerinfo_t {
    pub version: ::std::os::raw::c_uint,
    pub issuerAndSerialNumber: RPKCS7IssuerAndSerialNumber,
    pub digestAlgorithm: RX509AlgorithmIdentifier,
    pub authenticatedAttributes: RPKCS7Attributes,
    pub digestEncryptionAlgorithm: RX509AlgorithmIdentifier,
    pub encryptedDigest: *mut RASN1Binary,
    pub unauthenticatedAttributes: RPKCS7Attributes,
}
#[test]
fn bindgen_test_layout_r_pkcs7_signerinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_signerinfo_t>(),
        112usize,
        concat!("Size of: ", stringify!(r_pkcs7_signerinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_signerinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_pkcs7_signerinfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_signerinfo_t>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signerinfo_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_signerinfo_t>())).issuerAndSerialNumber as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signerinfo_t),
            "::",
            stringify!(issuerAndSerialNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_signerinfo_t>())).digestAlgorithm as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signerinfo_t),
            "::",
            stringify!(digestAlgorithm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_signerinfo_t>())).authenticatedAttributes as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signerinfo_t),
            "::",
            stringify!(authenticatedAttributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_signerinfo_t>())).digestEncryptionAlgorithm as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signerinfo_t),
            "::",
            stringify!(digestEncryptionAlgorithm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_signerinfo_t>())).encryptedDigest as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signerinfo_t),
            "::",
            stringify!(encryptedDigest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_signerinfo_t>())).unauthenticatedAttributes as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signerinfo_t),
            "::",
            stringify!(unauthenticatedAttributes)
        )
    );
}
pub type RPKCS7SignerInfo = r_pkcs7_signerinfo_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_signerinfos_t {
    pub length: ::std::os::raw::c_uint,
    pub elements: *mut *mut RPKCS7SignerInfo,
}
#[test]
fn bindgen_test_layout_r_pkcs7_signerinfos_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_signerinfos_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_pkcs7_signerinfos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_signerinfos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_pkcs7_signerinfos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_signerinfos_t>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signerinfos_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_signerinfos_t>())).elements as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signerinfos_t),
            "::",
            stringify!(elements)
        )
    );
}
pub type RPKCS7SignerInfos = r_pkcs7_signerinfos_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_signeddata_t {
    pub version: ::std::os::raw::c_uint,
    pub digestAlgorithms: RPKCS7DigestAlgorithmIdentifiers,
    pub contentInfo: RPKCS7ContentInfo,
    pub certificates: RPKCS7ExtendedCertificatesAndCertificates,
    pub crls: RPKCS7CertificateRevocationLists,
    pub signerinfos: RPKCS7SignerInfos,
}
#[test]
fn bindgen_test_layout_r_pkcs7_signeddata_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_signeddata_t>(),
        88usize,
        concat!("Size of: ", stringify!(r_pkcs7_signeddata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_signeddata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_pkcs7_signeddata_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_signeddata_t>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signeddata_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_signeddata_t>())).digestAlgorithms as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signeddata_t),
            "::",
            stringify!(digestAlgorithms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_signeddata_t>())).contentInfo as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signeddata_t),
            "::",
            stringify!(contentInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_signeddata_t>())).certificates as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signeddata_t),
            "::",
            stringify!(certificates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_signeddata_t>())).crls as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signeddata_t),
            "::",
            stringify!(crls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_pkcs7_signeddata_t>())).signerinfos as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_signeddata_t),
            "::",
            stringify!(signerinfos)
        )
    );
}
pub type RPKCS7SignedData = r_pkcs7_signeddata_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pkcs7_container_t {
    pub contentType: *mut RASN1String,
    pub signedData: RPKCS7SignedData,
}
#[test]
fn bindgen_test_layout_r_pkcs7_container_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pkcs7_container_t>(),
        96usize,
        concat!("Size of: ", stringify!(r_pkcs7_container_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_pkcs7_container_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_pkcs7_container_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_container_t>())).contentType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_container_t),
            "::",
            stringify!(contentType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pkcs7_container_t>())).signedData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pkcs7_container_t),
            "::",
            stringify!(signedData)
        )
    );
}
pub type RCMS = r_pkcs7_container_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpcAttributeTypeAndOptionalValue {
    pub type_: *mut RASN1String,
    pub data: *mut RASN1Binary,
}
#[test]
fn bindgen_test_layout_SpcAttributeTypeAndOptionalValue() {
    assert_eq!(
        ::std::mem::size_of::<SpcAttributeTypeAndOptionalValue>(),
        16usize,
        concat!("Size of: ", stringify!(SpcAttributeTypeAndOptionalValue))
    );
    assert_eq!(
        ::std::mem::align_of::<SpcAttributeTypeAndOptionalValue>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SpcAttributeTypeAndOptionalValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SpcAttributeTypeAndOptionalValue>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpcAttributeTypeAndOptionalValue),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SpcAttributeTypeAndOptionalValue>())).data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SpcAttributeTypeAndOptionalValue),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpcDigestInfo {
    pub digestAlgorithm: RX509AlgorithmIdentifier,
    pub digest: *mut RASN1Binary,
}
#[test]
fn bindgen_test_layout_SpcDigestInfo() {
    assert_eq!(
        ::std::mem::size_of::<SpcDigestInfo>(),
        24usize,
        concat!("Size of: ", stringify!(SpcDigestInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SpcDigestInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SpcDigestInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpcDigestInfo>())).digestAlgorithm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpcDigestInfo),
            "::",
            stringify!(digestAlgorithm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpcDigestInfo>())).digest as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SpcDigestInfo),
            "::",
            stringify!(digest)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpcIndirectDataContent {
    pub data: SpcAttributeTypeAndOptionalValue,
    pub messageDigest: SpcDigestInfo,
}
#[test]
fn bindgen_test_layout_SpcIndirectDataContent() {
    assert_eq!(
        ::std::mem::size_of::<SpcIndirectDataContent>(),
        40usize,
        concat!("Size of: ", stringify!(SpcIndirectDataContent))
    );
    assert_eq!(
        ::std::mem::align_of::<SpcIndirectDataContent>(),
        8usize,
        concat!("Alignment of ", stringify!(SpcIndirectDataContent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpcIndirectDataContent>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpcIndirectDataContent),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SpcIndirectDataContent>())).messageDigest as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SpcIndirectDataContent),
            "::",
            stringify!(messageDigest)
        )
    );
}
extern "C" {
    pub fn r_pkcs7_parse_cms(
        buffer: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_uint,
    ) -> *mut RCMS;
}
extern "C" {
    pub fn r_pkcs7_free_cms(container: *mut RCMS);
}
extern "C" {
    pub fn r_pkcs7_cms_to_string(container: *mut RCMS) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_pkcs7_cms_json(container: *mut RCMS) -> *mut PJ;
}
extern "C" {
    pub fn r_pkcs7_parse_spcinfo(cms: *mut RCMS) -> *mut SpcIndirectDataContent;
}
extern "C" {
    pub fn r_pkcs7_free_spcinfo(spcinfo: *mut SpcIndirectDataContent);
}
extern "C" {
    pub fn r_protobuf_decode(
        buffer: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_ulonglong,
        debug: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_axml_decode(
        buffer: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_util_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_getopt_t {
    pub err: ::std::os::raw::c_int,
    pub ind: ::std::os::raw::c_int,
    pub opt: ::std::os::raw::c_int,
    pub reset: ::std::os::raw::c_int,
    pub arg: *const ::std::os::raw::c_char,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *const ::std::os::raw::c_char,
    pub ostr: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_getopt_t() {
    assert_eq!(
        ::std::mem::size_of::<r_getopt_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_getopt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_getopt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_getopt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_getopt_t>())).err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_getopt_t),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_getopt_t>())).ind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_getopt_t),
            "::",
            stringify!(ind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_getopt_t>())).opt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_getopt_t),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_getopt_t>())).reset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_getopt_t),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_getopt_t>())).arg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_getopt_t),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_getopt_t>())).argc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_getopt_t),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_getopt_t>())).argv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_getopt_t),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_getopt_t>())).ostr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_getopt_t),
            "::",
            stringify!(ostr)
        )
    );
}
pub type RGetopt = r_getopt_t;
extern "C" {
    pub fn r_getopt_init(
        go: *mut RGetopt,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
        ostr: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_getopt_next(opt: *mut RGetopt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_main_t {
    pub name: *const ::std::os::raw::c_char,
    pub main: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_r_main_t() {
    assert_eq!(
        ::std::mem::size_of::<r_main_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_main_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_main_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_main_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_main_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_main_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_main_t>())).main as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_main_t),
            "::",
            stringify!(main)
        )
    );
}
pub type RMain = r_main_t;
pub type RMainCallback = ::std::option::Option<
    unsafe extern "C" fn(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn r_main_new(name: *const ::std::os::raw::c_char) -> *mut RMain;
}
extern "C" {
    pub fn r_main_free(m: *mut RMain);
}
extern "C" {
    pub fn r_main_run(
        m: *mut RMain,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_version_print(program: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_ravc2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_rax2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_rarun2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_rahash2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_rabin2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_radare2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_rasm2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_r2agent(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_rafind2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_radiff2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_ragg2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_main_rasign2(
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type RCoreCmd = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        cmd: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type RCoreCmdF = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int,
>;
pub type RCoreDebugBpHit = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        bp: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RCoreDebugSyscallHit =
    ::std::option::Option<unsafe extern "C" fn(core: *mut ::std::os::raw::c_void)>;
pub type RCoreCmdStr = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RCoreCmdStrF = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        cmd: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RCorePuts =
    ::std::option::Option<unsafe extern "C" fn(cmd: *const ::std::os::raw::c_char)>;
pub type RCoreSetArchBits = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
    ),
>;
pub type RCoreIsMapped = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
        perm: ::std::os::raw::c_int,
    ) -> bool,
>;
pub type RCoreDebugMapsSync =
    ::std::option::Option<unsafe extern "C" fn(core: *mut ::std::os::raw::c_void) -> bool>;
pub type RCoreGetName = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        off: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RCoreGetNameDelta = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        off: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RCoreSeekArchBits = ::std::option::Option<
    unsafe extern "C" fn(core: *mut ::std::os::raw::c_void, addr: ::std::os::raw::c_ulonglong),
>;
pub type RCoreConfigGetI = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type RCoreConfigGet = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RCoreNumGet = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RCorePJWithEncoding = ::std::option::Option<
    unsafe extern "C" fn(core: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_bind_t {
    pub core: *mut ::std::os::raw::c_void,
    pub cmd: RCoreCmd,
    pub cmdf: RCoreCmdF,
    pub cmdstr: RCoreCmdStr,
    pub cmdstrf: RCoreCmdStrF,
    pub puts: RCorePuts,
    pub bphit: RCoreDebugBpHit,
    pub syshit: RCoreDebugSyscallHit,
    pub setab: RCoreSetArchBits,
    pub getName: RCoreGetName,
    pub getNameDelta: RCoreGetNameDelta,
    pub archbits: RCoreSeekArchBits,
    pub cfggeti: RCoreConfigGetI,
    pub cfgGet: RCoreConfigGet,
    pub numGet: RCoreNumGet,
    pub isMapped: RCoreIsMapped,
    pub syncDebugMaps: RCoreDebugMapsSync,
    pub pjWithEncoding: RCorePJWithEncoding,
}
#[test]
fn bindgen_test_layout_r_core_bind_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_bind_t>(),
        144usize,
        concat!("Size of: ", stringify!(r_core_bind_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_bind_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_bind_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).core as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(core)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).cmd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).cmdf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(cmdf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).cmdstr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(cmdstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).cmdstrf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(cmdstrf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).puts as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(puts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).bphit as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(bphit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).syshit as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(syshit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).setab as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(setab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).getName as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(getName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).getNameDelta as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(getNameDelta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).archbits as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(archbits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).cfggeti as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(cfggeti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).cfgGet as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(cfgGet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).numGet as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(numGet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).isMapped as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(isMapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).syncDebugMaps as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(syncDebugMaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bind_t>())).pjWithEncoding as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bind_t),
            "::",
            stringify!(pjWithEncoding)
        )
    );
}
pub type RCoreBind = r_core_bind_t;
extern "C" {
    pub fn r_socket_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_len: __uint8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_sourceaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        132usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        4usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        260usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        4usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msfilterreq {
    pub msfr_ifindex: u32,
    pub msfr_fmode: u32,
    pub msfr_nsrcs: u32,
    pub __msfr_align: u32,
    pub msfr_group: sockaddr_storage,
    pub msfr_srcs: *mut sockaddr_storage,
}
#[test]
fn bindgen_test_layout___msfilterreq() {
    assert_eq!(
        ::std::mem::size_of::<__msfilterreq>(),
        152usize,
        concat!("Size of: ", stringify!(__msfilterreq))
    );
    assert_eq!(
        ::std::mem::align_of::<__msfilterreq>(),
        4usize,
        concat!("Alignment of ", stringify!(__msfilterreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__msfilterreq>())).msfr_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(msfr_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__msfilterreq>())).msfr_fmode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(msfr_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__msfilterreq>())).msfr_nsrcs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(msfr_nsrcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__msfilterreq>())).__msfr_align as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(__msfr_align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__msfilterreq>())).msfr_group as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(msfr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__msfilterreq>())).msfr_srcs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__msfilterreq),
            "::",
            stringify!(msfr_srcs)
        )
    );
}
extern "C" {
    pub fn setipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: u32,
        arg5: u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: *mut u32,
        arg5: *mut u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: u32,
        arg6: u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: *mut u32,
        arg6: *mut u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_uint,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [__uint8_t; 16usize],
    pub __u6_addr16: [__uint16_t; 8usize],
    pub __u6_addr32: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__u6_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__u6_addr)
        )
    );
}
pub type in6_addr_t = in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_len: __uint8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: __uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: __uint32_t,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
extern "C" {
    pub static in6addr_nodelocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allrouters: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allv2routers: in6_addr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_in6_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in6_pktinfo>(),
        20usize,
        concat!("Size of: ", stringify!(in6_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_pktinfo>())).ipi6_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_pktinfo),
            "::",
            stringify!(ipi6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_pktinfo>())).ipi6_ifindex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_pktinfo),
            "::",
            stringify!(ipi6_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}
#[test]
fn bindgen_test_layout_ip6_mtuinfo() {
    assert_eq!(
        ::std::mem::size_of::<ip6_mtuinfo>(),
        32usize,
        concat!("Size of: ", stringify!(ip6_mtuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ip6_mtuinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ip6_mtuinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip6_mtuinfo>())).ip6m_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip6_mtuinfo),
            "::",
            stringify!(ip6m_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip6_mtuinfo>())).ip6m_mtu as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ip6_mtuinfo),
            "::",
            stringify!(ip6m_mtu)
        )
    );
}
extern "C" {
    pub fn inet6_option_space(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut cmsghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_append(
        arg1: *mut cmsghdr,
        arg2: *const __uint8_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_alloc(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut __uint8_t;
}
extern "C" {
    pub fn inet6_option_next(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_find(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn inet6_rthdr_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut cmsghdr;
}
extern "C" {
    pub fn inet6_rthdr_add(
        arg1: *mut cmsghdr,
        arg2: *const in6_addr,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_lasthop(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_segments(arg1: *const cmsghdr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_getaddr(arg1: *mut cmsghdr, arg2: ::std::os::raw::c_int) -> *mut in6_addr;
}
extern "C" {
    pub fn inet6_rthdr_getflags(
        arg1: *const cmsghdr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_append(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: socklen_t,
        arg6: __uint8_t,
        arg7: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_finish(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_set_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_next(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_find(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_get_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> socklen_t;
}
extern "C" {
    pub fn inet6_rth_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inet6_rth_add(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const in6_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_reverse(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_segments(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_getaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut in6_addr;
}
extern "C" {
    pub fn bindresvport(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport_sa(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_un {
    pub sun_len: ::std::os::raw::c_uchar,
    pub sun_family: sa_family_t,
    pub sun_path: [::std::os::raw::c_char; 104usize],
}
#[test]
fn bindgen_test_layout_sockaddr_un() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_un>(),
        106usize,
        concat!("Size of: ", stringify!(sockaddr_un))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_un>(),
        1usize,
        concat!("Alignment of ", stringify!(sockaddr_un))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_un>())).sun_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_un),
            "::",
            stringify!(sun_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_un>())).sun_family as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_un),
            "::",
            stringify!(sun_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_un>())).sun_path as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_un),
            "::",
            stringify!(sun_path)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_pollfd() {
    assert_eq!(
        ::std::mem::size_of::<pollfd>(),
        8usize,
        concat!("Size of: ", stringify!(pollfd))
    );
    assert_eq!(
        ::std::mem::align_of::<pollfd>(),
        4usize,
        concat!("Alignment of ", stringify!(pollfd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pollfd>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pollfd),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pollfd>())).events as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pollfd),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pollfd>())).revents as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pollfd),
            "::",
            stringify!(revents)
        )
    );
}
pub type nfds_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn poll(
        arg1: *mut pollfd,
        arg2: nfds_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_addr(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(arg1: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ascii2addr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addr2ascii(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_lnaof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(arg1: in_addr_t, arg2: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_net_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: __darwin_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        arg1: in_addr_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_nsap_addr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut h_errno: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hostent() {
    assert_eq!(
        ::std::mem::size_of::<hostent>(),
        32usize,
        concat!("Size of: ", stringify!(hostent))
    );
    assert_eq!(
        ::std::mem::align_of::<hostent>(),
        8usize,
        concat!("Alignment of ", stringify!(hostent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addr_list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addr_list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[test]
fn bindgen_test_layout_netent() {
    assert_eq!(
        ::std::mem::size_of::<netent>(),
        24usize,
        concat!("Size of: ", stringify!(netent))
    );
    assert_eq!(
        ::std::mem::align_of::<netent>(),
        8usize,
        concat!("Alignment of ", stringify!(netent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_net as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_net)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_servent() {
    assert_eq!(
        ::std::mem::size_of::<servent>(),
        32usize,
        concat!("Size of: ", stringify!(servent))
    );
    assert_eq!(
        ::std::mem::align_of::<servent>(),
        8usize,
        concat!("Alignment of ", stringify!(servent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_proto as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_proto)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_protoent() {
    assert_eq!(
        ::std::mem::size_of::<protoent>(),
        24usize,
        concat!("Size of: ", stringify!(protoent))
    );
    assert_eq!(
        ::std::mem::align_of::<protoent>(),
        8usize,
        concat!("Alignment of ", stringify!(protoent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_proto as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_proto)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfo,
}
#[test]
fn bindgen_test_layout_addrinfo() {
    assert_eq!(
        ::std::mem::size_of::<addrinfo>(),
        48usize,
        concat!("Size of: ", stringify!(addrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<addrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(addrinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_family as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_socktype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_socktype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_protocol as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addrlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_canonname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_canonname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rpcent() {
    assert_eq!(
        ::std::mem::size_of::<rpcent>(),
        24usize,
        concat!("Size of: ", stringify!(rpcent))
    );
    assert_eq!(
        ::std::mem::align_of::<rpcent>(),
        8usize,
        concat!("Alignment of ", stringify!(rpcent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_number as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_number)
        )
    );
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn freeaddrinfo(arg1: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getaddrinfo(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const addrinfo,
        arg4: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(arg1: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn getnameinfo(
        arg1: *const sockaddr,
        arg2: socklen_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
        arg5: *mut ::std::os::raw::c_char,
        arg6: socklen_t,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr(arg1: u32, arg2: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(arg1: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getprotobyname(arg1: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(arg1: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getservbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn sethostent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setnetent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setprotoent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setservent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn freehostent(arg1: *mut hostent);
}
extern "C" {
    pub fn gethostbyname2(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getipnodebyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getipnodebyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getrpcbyname(name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn setrpcent(stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn herror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn innetgr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn setnetgrent(arg1: *const ::std::os::raw::c_char);
}
pub type tcp_seq = __uint32_t;
pub type tcp_cc = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr {
    pub th_sport: ::std::os::raw::c_ushort,
    pub th_dport: ::std::os::raw::c_ushort,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub th_flags: ::std::os::raw::c_uchar,
    pub th_win: ::std::os::raw::c_ushort,
    pub th_sum: ::std::os::raw::c_ushort,
    pub th_urp: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_tcphdr() {
    assert_eq!(
        ::std::mem::size_of::<tcphdr>(),
        20usize,
        concat!("Size of: ", stringify!(tcphdr))
    );
    assert_eq!(
        ::std::mem::align_of::<tcphdr>(),
        4usize,
        concat!("Alignment of ", stringify!(tcphdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcphdr>())).th_sport as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr),
            "::",
            stringify!(th_sport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcphdr>())).th_dport as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr),
            "::",
            stringify!(th_dport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcphdr>())).th_seq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr),
            "::",
            stringify!(th_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcphdr>())).th_ack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr),
            "::",
            stringify!(th_ack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcphdr>())).th_flags as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr),
            "::",
            stringify!(th_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcphdr>())).th_win as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr),
            "::",
            stringify!(th_win)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcphdr>())).th_sum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr),
            "::",
            stringify!(th_sum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcphdr>())).th_urp as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr),
            "::",
            stringify!(th_urp)
        )
    );
}
impl tcphdr {
    #[inline]
    pub fn th_x2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_x2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn th_off(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_off(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        th_x2: ::std::os::raw::c_uint,
        th_off: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let th_x2: u32 = unsafe { ::std::mem::transmute(th_x2) };
            th_x2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let th_off: u32 = unsafe { ::std::mem::transmute(th_off) };
            th_off as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_connection_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_snd_wscale: u_int8_t,
    pub tcpi_rcv_wscale: u_int8_t,
    pub __pad1: u_int8_t,
    pub tcpi_options: u_int32_t,
    pub tcpi_flags: u_int32_t,
    pub tcpi_rto: u_int32_t,
    pub tcpi_maxseg: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_snd_wnd: u_int32_t,
    pub tcpi_snd_sbbytes: u_int32_t,
    pub tcpi_rcv_wnd: u_int32_t,
    pub tcpi_rttcur: u_int32_t,
    pub tcpi_srtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub tcpi_txpackets: u_int64_t,
    pub tcpi_txbytes: u_int64_t,
    pub tcpi_txretransmitbytes: u_int64_t,
    pub tcpi_rxpackets: u_int64_t,
    pub tcpi_rxbytes: u_int64_t,
    pub tcpi_rxoutoforderbytes: u_int64_t,
    pub tcpi_txretransmitpackets: u_int64_t,
}
#[test]
fn bindgen_test_layout_tcp_connection_info() {
    assert_eq!(
        ::std::mem::size_of::<tcp_connection_info>(),
        112usize,
        concat!("Size of: ", stringify!(tcp_connection_info))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_connection_info>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_connection_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_snd_wscale as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_snd_wscale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_rcv_wscale as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_rcv_wscale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_connection_info>())).__pad1 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_options as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_rto as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_rto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_maxseg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_maxseg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_snd_ssthresh as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_snd_ssthresh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_snd_cwnd as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_snd_cwnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_snd_wnd as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_snd_wnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_snd_sbbytes as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_snd_sbbytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_rcv_wnd as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_rcv_wnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_rttcur as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_rttcur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_srtt as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_srtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_rttvar as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_rttvar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_txpackets as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_txpackets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_txbytes as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_txbytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_txretransmitbytes as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_txretransmitbytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_rxpackets as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_rxpackets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_rxbytes as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_rxbytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_rxoutoforderbytes as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_rxoutoforderbytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_connection_info>())).tcpi_txretransmitpackets as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_connection_info),
            "::",
            stringify!(tcpi_txretransmitpackets)
        )
    );
}
impl tcp_connection_info {
    #[inline]
    pub fn tcpi_tfo_cookie_req(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_loss(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_loss(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_acked(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_acked(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_req_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_invalid(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_invalid(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_wrong(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_wrong(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_no_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_no_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_heuristics_disable(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_heuristics_disable(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_send_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_send_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_recv_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_recv_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_onebyte_proxy(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_onebyte_proxy(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pad2(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set___pad2(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tcpi_tfo_cookie_req: u_int32_t,
        tcpi_tfo_cookie_rcv: u_int32_t,
        tcpi_tfo_syn_loss: u_int32_t,
        tcpi_tfo_syn_data_sent: u_int32_t,
        tcpi_tfo_syn_data_acked: u_int32_t,
        tcpi_tfo_syn_data_rcv: u_int32_t,
        tcpi_tfo_cookie_req_rcv: u_int32_t,
        tcpi_tfo_cookie_sent: u_int32_t,
        tcpi_tfo_cookie_invalid: u_int32_t,
        tcpi_tfo_cookie_wrong: u_int32_t,
        tcpi_tfo_no_cookie_rcv: u_int32_t,
        tcpi_tfo_heuristics_disable: u_int32_t,
        tcpi_tfo_send_blackhole: u_int32_t,
        tcpi_tfo_recv_blackhole: u_int32_t,
        tcpi_tfo_onebyte_proxy: u_int32_t,
        __pad2: u_int32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tcpi_tfo_cookie_req: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req) };
            tcpi_tfo_cookie_req as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tcpi_tfo_cookie_rcv: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_rcv) };
            tcpi_tfo_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tcpi_tfo_syn_loss: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_syn_loss) };
            tcpi_tfo_syn_loss as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tcpi_tfo_syn_data_sent: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_sent) };
            tcpi_tfo_syn_data_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tcpi_tfo_syn_data_acked: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_acked) };
            tcpi_tfo_syn_data_acked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tcpi_tfo_syn_data_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_rcv) };
            tcpi_tfo_syn_data_rcv as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tcpi_tfo_cookie_req_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req_rcv) };
            tcpi_tfo_cookie_req_rcv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tcpi_tfo_cookie_sent: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_sent) };
            tcpi_tfo_cookie_sent as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let tcpi_tfo_cookie_invalid: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_invalid) };
            tcpi_tfo_cookie_invalid as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let tcpi_tfo_cookie_wrong: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_wrong) };
            tcpi_tfo_cookie_wrong as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let tcpi_tfo_no_cookie_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_no_cookie_rcv) };
            tcpi_tfo_no_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tcpi_tfo_heuristics_disable: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_heuristics_disable) };
            tcpi_tfo_heuristics_disable as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let tcpi_tfo_send_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_send_blackhole) };
            tcpi_tfo_send_blackhole as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tcpi_tfo_recv_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_recv_blackhole) };
            tcpi_tfo_recv_blackhole as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let tcpi_tfo_onebyte_proxy: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_onebyte_proxy) };
            tcpi_tfo_onebyte_proxy as u64
        });
        __bindgen_bitfield_unit.set(15usize, 17u8, {
            let __pad2: u32 = unsafe { ::std::mem::transmute(__pad2) };
            __pad2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R2Pipe {
    pub child: ::std::os::raw::c_int,
    pub input: [::std::os::raw::c_int; 2usize],
    pub output: [::std::os::raw::c_int; 2usize],
    pub coreb: RCoreBind,
}
#[test]
fn bindgen_test_layout_R2Pipe() {
    assert_eq!(
        ::std::mem::size_of::<R2Pipe>(),
        168usize,
        concat!("Size of: ", stringify!(R2Pipe))
    );
    assert_eq!(
        ::std::mem::align_of::<R2Pipe>(),
        8usize,
        concat!("Alignment of ", stringify!(R2Pipe))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R2Pipe>())).child as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(R2Pipe),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R2Pipe>())).input as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(R2Pipe),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R2Pipe>())).output as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(R2Pipe),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R2Pipe>())).coreb as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(R2Pipe),
            "::",
            stringify!(coreb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_socket_t {
    pub fd: ::std::os::raw::c_int,
    pub is_ssl: bool,
    pub proto: ::std::os::raw::c_int,
    pub local: ::std::os::raw::c_int,
    pub port: ::std::os::raw::c_int,
    pub sa: sockaddr_in,
}
#[test]
fn bindgen_test_layout_r_socket_t() {
    assert_eq!(
        ::std::mem::size_of::<r_socket_t>(),
        36usize,
        concat!("Size of: ", stringify!(r_socket_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_socket_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_socket_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_t>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_t>())).is_ssl as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_t),
            "::",
            stringify!(is_ssl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_t>())).proto as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_t),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_t>())).local as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_t),
            "::",
            stringify!(local)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_t>())).port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_t>())).sa as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_t),
            "::",
            stringify!(sa)
        )
    );
}
pub type RSocket = r_socket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_socket_http_options {
    pub authtokens: *mut RList,
    pub accept_timeout: bool,
    pub timeout: ::std::os::raw::c_int,
    pub httpauth: bool,
}
#[test]
fn bindgen_test_layout_r_socket_http_options() {
    assert_eq!(
        ::std::mem::size_of::<r_socket_http_options>(),
        24usize,
        concat!("Size of: ", stringify!(r_socket_http_options))
    );
    assert_eq!(
        ::std::mem::align_of::<r_socket_http_options>(),
        8usize,
        concat!("Alignment of ", stringify!(r_socket_http_options))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_socket_http_options>())).authtokens as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_options),
            "::",
            stringify!(authtokens)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_socket_http_options>())).accept_timeout as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_options),
            "::",
            stringify!(accept_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_http_options>())).timeout as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_options),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_http_options>())).httpauth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_options),
            "::",
            stringify!(httpauth)
        )
    );
}
pub type RSocketHTTPOptions = r_socket_http_options;
extern "C" {
    pub fn r_socket_new_from_fd(fd: ::std::os::raw::c_int) -> *mut RSocket;
}
extern "C" {
    pub fn r_socket_new(is_ssl: bool) -> *mut RSocket;
}
extern "C" {
    pub fn r_socket_spawn(
        s: *mut RSocket,
        cmd: *const ::std::os::raw::c_char,
        timeout: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn r_socket_connect(
        s: *mut RSocket,
        host: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        proto: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn r_socket_connect_serial(
        sock: *mut RSocket,
        path: *const ::std::os::raw::c_char,
        speed: ::std::os::raw::c_int,
        parity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_listen(
        s: *mut RSocket,
        port: *const ::std::os::raw::c_char,
        certfile: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_socket_port_by_name(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_close_fd(s: *mut RSocket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_close(s: *mut RSocket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_free(s: *mut RSocket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_accept(s: *mut RSocket) -> *mut RSocket;
}
extern "C" {
    pub fn r_socket_accept_timeout(
        s: *mut RSocket,
        timeout: ::std::os::raw::c_uint,
    ) -> *mut RSocket;
}
extern "C" {
    pub fn r_socket_block_time(
        s: *mut RSocket,
        block: bool,
        sec: ::std::os::raw::c_int,
        usec: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_socket_flush(s: *mut RSocket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_ready(
        s: *mut RSocket,
        secs: ::std::os::raw::c_int,
        usecs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_to_string(s: *mut RSocket) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_socket_write(
        s: *mut RSocket,
        buf: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_puts(
        s: *mut RSocket,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_printf(s: *mut RSocket, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn r_socket_read(
        s: *mut RSocket,
        read: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_read_block(
        s: *mut RSocket,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_gets(
        s: *mut RSocket,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_slurp(
        s: *mut RSocket,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_socket_is_connected(arg1: *mut RSocket) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_socket_proc_t {
    pub fd0: [::std::os::raw::c_int; 2usize],
    pub fd1: [::std::os::raw::c_int; 2usize],
    pub pid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_socket_proc_t() {
    assert_eq!(
        ::std::mem::size_of::<r_socket_proc_t>(),
        20usize,
        concat!("Size of: ", stringify!(r_socket_proc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_socket_proc_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_socket_proc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_proc_t>())).fd0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_proc_t),
            "::",
            stringify!(fd0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_proc_t>())).fd1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_proc_t),
            "::",
            stringify!(fd1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_proc_t>())).pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_proc_t),
            "::",
            stringify!(pid)
        )
    );
}
pub type RSocketProc = r_socket_proc_t;
extern "C" {
    pub fn r_socket_proc_open(argv: *const *mut ::std::os::raw::c_char) -> *mut RSocketProc;
}
extern "C" {
    pub fn r_socket_proc_close(sp: *mut RSocketProc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_proc_read(
        sp: *mut RSocketProc,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_proc_gets(
        sp: *mut RSocketProc,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_proc_write(
        sp: *mut RSocketProc,
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_proc_printf(sp: *mut RSocketProc, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn r_socket_proc_ready(
        sp: *mut RSocketProc,
        secs: ::std::os::raw::c_int,
        usecs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_http_get(
        url: *const ::std::os::raw::c_char,
        code: *mut ::std::os::raw::c_int,
        rlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_socket_http_post(
        url: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        code: *mut ::std::os::raw::c_int,
        rlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_socket_http_server_set_breaked(b: *mut bool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_socket_http_request {
    pub s: *mut RSocket,
    pub path: *mut ::std::os::raw::c_char,
    pub host: *mut ::std::os::raw::c_char,
    pub agent: *mut ::std::os::raw::c_char,
    pub method: *mut ::std::os::raw::c_char,
    pub referer: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_uchar,
    pub data_length: ::std::os::raw::c_int,
    pub auth: bool,
}
#[test]
fn bindgen_test_layout_r_socket_http_request() {
    assert_eq!(
        ::std::mem::size_of::<r_socket_http_request>(),
        64usize,
        concat!("Size of: ", stringify!(r_socket_http_request))
    );
    assert_eq!(
        ::std::mem::align_of::<r_socket_http_request>(),
        8usize,
        concat!("Alignment of ", stringify!(r_socket_http_request))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_http_request>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_request),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_http_request>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_request),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_http_request>())).host as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_request),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_http_request>())).agent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_request),
            "::",
            stringify!(agent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_http_request>())).method as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_request),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_http_request>())).referer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_request),
            "::",
            stringify!(referer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_http_request>())).data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_request),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_socket_http_request>())).data_length as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_request),
            "::",
            stringify!(data_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_http_request>())).auth as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_http_request),
            "::",
            stringify!(auth)
        )
    );
}
pub type RSocketHTTPRequest = r_socket_http_request;
extern "C" {
    pub fn r_socket_http_accept(
        s: *mut RSocket,
        so: *mut RSocketHTTPOptions,
    ) -> *mut RSocketHTTPRequest;
}
extern "C" {
    pub fn r_socket_http_response(
        rs: *mut RSocketHTTPRequest,
        code: ::std::os::raw::c_int,
        out: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        headers: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_socket_http_close(rs: *mut RSocketHTTPRequest);
}
extern "C" {
    pub fn r_socket_http_handle_upload(
        str_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        olen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_socket_http_free(rs: *mut RSocketHTTPRequest);
}
pub type rap_server_open = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        flg: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type rap_server_seek = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        offset: ::std::os::raw::c_ulonglong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type rap_server_read = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type rap_server_write = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type rap_server_cmd = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        command: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type rap_server_close = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub const RAP_PACKET_OPEN: ::std::os::raw::c_uint = 1;
pub const RAP_PACKET_READ: ::std::os::raw::c_uint = 2;
pub const RAP_PACKET_WRITE: ::std::os::raw::c_uint = 3;
pub const RAP_PACKET_SEEK: ::std::os::raw::c_uint = 4;
pub const RAP_PACKET_CLOSE: ::std::os::raw::c_uint = 5;
pub const RAP_PACKET_CMD: ::std::os::raw::c_uint = 7;
pub const RAP_PACKET_REPLY: ::std::os::raw::c_uint = 128;
pub const RAP_PACKET_MAX: ::std::os::raw::c_uint = 4096;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_socket_rap_server_t {
    pub fd: *mut RSocket,
    pub port: *mut ::std::os::raw::c_char,
    pub buf: [::std::os::raw::c_uchar; 4128usize],
    pub open: rap_server_open,
    pub seek: rap_server_seek,
    pub read: rap_server_read,
    pub write: rap_server_write,
    pub system: rap_server_cmd,
    pub cmd: rap_server_cmd,
    pub close: rap_server_close,
    pub user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_socket_rap_server_t() {
    assert_eq!(
        ::std::mem::size_of::<r_socket_rap_server_t>(),
        4208usize,
        concat!("Size of: ", stringify!(r_socket_rap_server_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_socket_rap_server_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_socket_rap_server_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).port as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).open as *const _ as usize },
        4144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).seek as *const _ as usize },
        4152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).read as *const _ as usize },
        4160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).write as *const _ as usize },
        4168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).system as *const _ as usize },
        4176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).cmd as *const _ as usize },
        4184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).close as *const _ as usize },
        4192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_socket_rap_server_t>())).user as *const _ as usize },
        4200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_socket_rap_server_t),
            "::",
            stringify!(user)
        )
    );
}
pub type RSocketRapServer = r_socket_rap_server_t;
extern "C" {
    pub fn r_socket_rap_server_new(
        is_ssl: bool,
        port: *const ::std::os::raw::c_char,
    ) -> *mut RSocketRapServer;
}
extern "C" {
    pub fn r_socket_rap_server_create(
        pathname: *const ::std::os::raw::c_char,
    ) -> *mut RSocketRapServer;
}
extern "C" {
    pub fn r_socket_rap_server_free(rap_s: *mut RSocketRapServer);
}
extern "C" {
    pub fn r_socket_rap_server_listen(
        rap_s: *mut RSocketRapServer,
        certfile: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_socket_rap_server_accept(rap_s: *mut RSocketRapServer) -> *mut RSocket;
}
extern "C" {
    pub fn r_socket_rap_server_continue(rap_s: *mut RSocketRapServer) -> bool;
}
extern "C" {
    pub fn r_socket_rap_client_open(
        s: *mut RSocket,
        file: *const ::std::os::raw::c_char,
        rw: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_rap_client_command(
        s: *mut RSocket,
        cmd: *const ::std::os::raw::c_char,
        c: *mut RCoreBind,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_socket_rap_client_write(
        s: *mut RSocket,
        buf: *const ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_rap_client_read(
        s: *mut RSocket,
        buf: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_socket_rap_client_seek(
        s: *mut RSocket,
        offset: ::std::os::raw::c_ulonglong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_run_profile_t {
    pub _args: [*mut ::std::os::raw::c_char; 512usize],
    pub _argc: ::std::os::raw::c_int,
    pub _daemon: bool,
    pub _system: *mut ::std::os::raw::c_char,
    pub _program: *mut ::std::os::raw::c_char,
    pub _runlib: *mut ::std::os::raw::c_char,
    pub _runlib_fcn: *mut ::std::os::raw::c_char,
    pub _stdio: *mut ::std::os::raw::c_char,
    pub _stdin: *mut ::std::os::raw::c_char,
    pub _stdout: *mut ::std::os::raw::c_char,
    pub _stderr: *mut ::std::os::raw::c_char,
    pub _chgdir: *mut ::std::os::raw::c_char,
    pub _chroot: *mut ::std::os::raw::c_char,
    pub _libpath: *mut ::std::os::raw::c_char,
    pub _preload: *mut ::std::os::raw::c_char,
    pub _bits: ::std::os::raw::c_int,
    pub _pid: ::std::os::raw::c_int,
    pub _pidfile: *mut ::std::os::raw::c_char,
    pub _r2preload: ::std::os::raw::c_int,
    pub _docore: ::std::os::raw::c_int,
    pub _dofork: ::std::os::raw::c_int,
    pub _dodebug: ::std::os::raw::c_int,
    pub _aslr: ::std::os::raw::c_int,
    pub _maxstack: ::std::os::raw::c_int,
    pub _maxproc: ::std::os::raw::c_int,
    pub _maxfd: ::std::os::raw::c_int,
    pub _r2sleep: ::std::os::raw::c_int,
    pub _execve: ::std::os::raw::c_int,
    pub _setuid: *mut ::std::os::raw::c_char,
    pub _seteuid: *mut ::std::os::raw::c_char,
    pub _setgid: *mut ::std::os::raw::c_char,
    pub _setegid: *mut ::std::os::raw::c_char,
    pub _input: *mut ::std::os::raw::c_char,
    pub _connect: *mut ::std::os::raw::c_char,
    pub _listen: *mut ::std::os::raw::c_char,
    pub _pty: ::std::os::raw::c_int,
    pub _timeout: ::std::os::raw::c_int,
    pub _timeout_sig: ::std::os::raw::c_int,
    pub _nice: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_run_profile_t() {
    assert_eq!(
        ::std::mem::size_of::<r_run_profile_t>(),
        4328usize,
        concat!("Size of: ", stringify!(r_run_profile_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_run_profile_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_run_profile_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._args as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._argc as *const _ as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._daemon as *const _ as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_daemon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._system as *const _ as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_system)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._program as *const _ as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_program)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._runlib as *const _ as usize },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_runlib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._runlib_fcn as *const _ as usize },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_runlib_fcn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._stdio as *const _ as usize },
        4136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_stdio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._stdin as *const _ as usize },
        4144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_stdin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._stdout as *const _ as usize },
        4152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_stdout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._stderr as *const _ as usize },
        4160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_stderr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._chgdir as *const _ as usize },
        4168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_chgdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._chroot as *const _ as usize },
        4176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_chroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._libpath as *const _ as usize },
        4184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_libpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._preload as *const _ as usize },
        4192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_preload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._bits as *const _ as usize },
        4200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._pid as *const _ as usize },
        4204usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._pidfile as *const _ as usize },
        4208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_pidfile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._r2preload as *const _ as usize },
        4216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_r2preload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._docore as *const _ as usize },
        4220usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_docore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._dofork as *const _ as usize },
        4224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_dofork)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._dodebug as *const _ as usize },
        4228usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_dodebug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._aslr as *const _ as usize },
        4232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_aslr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._maxstack as *const _ as usize },
        4236usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_maxstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._maxproc as *const _ as usize },
        4240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_maxproc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._maxfd as *const _ as usize },
        4244usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_maxfd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._r2sleep as *const _ as usize },
        4248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_r2sleep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._execve as *const _ as usize },
        4252usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_execve)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._setuid as *const _ as usize },
        4256usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_setuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._seteuid as *const _ as usize },
        4264usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_seteuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._setgid as *const _ as usize },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_setgid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._setegid as *const _ as usize },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_setegid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._input as *const _ as usize },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._connect as *const _ as usize },
        4296usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_connect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._listen as *const _ as usize },
        4304usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_listen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._pty as *const _ as usize },
        4312usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_pty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._timeout as *const _ as usize },
        4316usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._timeout_sig as *const _ as usize },
        4320usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_timeout_sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_run_profile_t>()))._nice as *const _ as usize },
        4324usize,
        concat!(
            "Offset of field: ",
            stringify!(r_run_profile_t),
            "::",
            stringify!(_nice)
        )
    );
}
pub type RRunProfile = r_run_profile_t;
extern "C" {
    pub fn r_run_new(str_: *const ::std::os::raw::c_char) -> *mut RRunProfile;
}
extern "C" {
    pub fn r_run_parse(pf: *mut RRunProfile, profile: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_run_free(r: *mut RRunProfile);
}
extern "C" {
    pub fn r_run_parseline(p: *mut RRunProfile, b: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_run_help() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_run_config_env(p: *mut RRunProfile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_run_start(p: *mut RRunProfile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_run_reset(p: *mut RRunProfile);
}
extern "C" {
    pub fn r_run_parsefile(p: *mut RRunProfile, b: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_run_get_environ_profile(
        env: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rap_open(cmd: *const ::std::os::raw::c_char) -> *mut R2Pipe;
}
extern "C" {
    pub fn rap_open_corebind(coreb: *mut RCoreBind) -> *mut R2Pipe;
}
extern "C" {
    pub fn rap_close(rap: *mut R2Pipe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rap_cmd(
        rap: *mut R2Pipe,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rap_cmdf(
        rap: *mut R2Pipe,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rap_write(
        rap: *mut R2Pipe,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rap_read(rap: *mut R2Pipe) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r2pipe_write(
        r2pipe: *mut R2Pipe,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r2pipe_read(r2pipe: *mut R2Pipe) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r2pipe_close(r2pipe: *mut R2Pipe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r2pipe_open_corebind(coreb: *mut RCoreBind) -> *mut R2Pipe;
}
extern "C" {
    pub fn r2pipe_open(cmd: *const ::std::os::raw::c_char) -> *mut R2Pipe;
}
extern "C" {
    pub fn r2pipe_open_dl(file: *const ::std::os::raw::c_char) -> *mut R2Pipe;
}
extern "C" {
    pub fn r2pipe_cmd(
        r2pipe: *mut R2Pipe,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r2pipe_cmdf(
        r2pipe: *mut R2Pipe,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_magic_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VALUETYPE {
    pub b: ::std::os::raw::c_uchar,
    pub h: ::std::os::raw::c_ushort,
    pub l: ::std::os::raw::c_uint,
    pub q: ::std::os::raw::c_ulonglong,
    pub hs: [::std::os::raw::c_uchar; 2usize],
    pub hl: [::std::os::raw::c_uchar; 4usize],
    pub hq: [::std::os::raw::c_uchar; 8usize],
    pub s: [::std::os::raw::c_char; 32usize],
    pub f: f32,
    pub d: f64,
}
#[test]
fn bindgen_test_layout_VALUETYPE() {
    assert_eq!(
        ::std::mem::size_of::<VALUETYPE>(),
        32usize,
        concat!("Size of: ", stringify!(VALUETYPE))
    );
    assert_eq!(
        ::std::mem::align_of::<VALUETYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(VALUETYPE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VALUETYPE>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VALUETYPE),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VALUETYPE>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VALUETYPE),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VALUETYPE>())).l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VALUETYPE),
            "::",
            stringify!(l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VALUETYPE>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VALUETYPE),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VALUETYPE>())).hs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VALUETYPE),
            "::",
            stringify!(hs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VALUETYPE>())).hl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VALUETYPE),
            "::",
            stringify!(hl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VALUETYPE>())).hq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VALUETYPE),
            "::",
            stringify!(hq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VALUETYPE>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VALUETYPE),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VALUETYPE>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VALUETYPE),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VALUETYPE>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VALUETYPE),
            "::",
            stringify!(d)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_magic {
    pub cont_level: ::std::os::raw::c_ushort,
    pub flag: ::std::os::raw::c_uchar,
    pub dummy1: ::std::os::raw::c_uchar,
    pub reln: ::std::os::raw::c_uchar,
    pub vallen: ::std::os::raw::c_uchar,
    pub type_: ::std::os::raw::c_uchar,
    pub in_type: ::std::os::raw::c_uchar,
    pub in_op: ::std::os::raw::c_uchar,
    pub mask_op: ::std::os::raw::c_uchar,
    pub cond: ::std::os::raw::c_uchar,
    pub dummy2: ::std::os::raw::c_uchar,
    pub offset: ::std::os::raw::c_uint,
    pub in_offset: ::std::os::raw::c_uint,
    pub lineno: ::std::os::raw::c_uint,
    pub _u: r_magic__bindgen_ty_1,
    pub value: VALUETYPE,
    pub desc: [::std::os::raw::c_char; 64usize],
    pub mimetype: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union r_magic__bindgen_ty_1 {
    pub _mask: ::std::os::raw::c_ulonglong,
    pub _s: r_magic__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_magic__bindgen_ty_1__bindgen_ty_1 {
    pub _count: ::std::os::raw::c_uint,
    pub _flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_magic__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_magic__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(r_magic__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_magic__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(r_magic__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_magic__bindgen_ty_1__bindgen_ty_1>()))._count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_magic__bindgen_ty_1__bindgen_ty_1>()))._flags as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_flags)
        )
    );
}
#[test]
fn bindgen_test_layout_r_magic__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_magic__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(r_magic__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_magic__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(r_magic__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic__bindgen_ty_1>()))._mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic__bindgen_ty_1),
            "::",
            stringify!(_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic__bindgen_ty_1>()))._s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic__bindgen_ty_1),
            "::",
            stringify!(_s)
        )
    );
}
#[test]
fn bindgen_test_layout_r_magic() {
    assert_eq!(
        ::std::mem::size_of::<r_magic>(),
        192usize,
        concat!("Size of: ", stringify!(r_magic))
    );
    assert_eq!(
        ::std::mem::align_of::<r_magic>(),
        8usize,
        concat!("Alignment of ", stringify!(r_magic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).cont_level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(cont_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).flag as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).dummy1 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).reln as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(reln)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).vallen as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(vallen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).type_ as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).in_type as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(in_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).in_op as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(in_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).mask_op as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(mask_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).cond as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).dummy2 as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).in_offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(in_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).lineno as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>()))._u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).desc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic>())).mimetype as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic),
            "::",
            stringify!(mimetype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mlist {
    pub magic: *mut r_magic,
    pub nmagic: ::std::os::raw::c_uint,
    pub mapped: ::std::os::raw::c_int,
    pub next: *mut mlist,
    pub prev: *mut mlist,
}
#[test]
fn bindgen_test_layout_mlist() {
    assert_eq!(
        ::std::mem::size_of::<mlist>(),
        32usize,
        concat!("Size of: ", stringify!(mlist))
    );
    assert_eq!(
        ::std::mem::align_of::<mlist>(),
        8usize,
        concat!("Alignment of ", stringify!(mlist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mlist>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mlist),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mlist>())).nmagic as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mlist),
            "::",
            stringify!(nmagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mlist>())).mapped as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mlist),
            "::",
            stringify!(mapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mlist>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mlist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mlist>())).prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mlist),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_magic_set {
    pub mlist: *mut mlist,
    pub c: r_magic_set_cont,
    pub o: r_magic_set_out,
    pub offset: ::std::os::raw::c_uint,
    pub error: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub haderr: ::std::os::raw::c_int,
    pub file: *const ::std::os::raw::c_char,
    pub line: size_t,
    pub search: r_magic_set__bindgen_ty_1,
    pub ms_value: VALUETYPE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_magic_set_cont {
    pub len: size_t,
    pub li: *mut r_magic_set_cont_level_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_magic_set_cont_level_info {
    pub off: ::std::os::raw::c_int,
    pub got_match: ::std::os::raw::c_int,
    pub last_match: ::std::os::raw::c_int,
    pub last_cond: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_magic_set_cont_level_info() {
    assert_eq!(
        ::std::mem::size_of::<r_magic_set_cont_level_info>(),
        16usize,
        concat!("Size of: ", stringify!(r_magic_set_cont_level_info))
    );
    assert_eq!(
        ::std::mem::align_of::<r_magic_set_cont_level_info>(),
        4usize,
        concat!("Alignment of ", stringify!(r_magic_set_cont_level_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set_cont_level_info>())).off as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set_cont_level_info),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_magic_set_cont_level_info>())).got_match as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set_cont_level_info),
            "::",
            stringify!(got_match)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_magic_set_cont_level_info>())).last_match as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set_cont_level_info),
            "::",
            stringify!(last_match)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_magic_set_cont_level_info>())).last_cond as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set_cont_level_info),
            "::",
            stringify!(last_cond)
        )
    );
}
#[test]
fn bindgen_test_layout_r_magic_set_cont() {
    assert_eq!(
        ::std::mem::size_of::<r_magic_set_cont>(),
        16usize,
        concat!("Size of: ", stringify!(r_magic_set_cont))
    );
    assert_eq!(
        ::std::mem::align_of::<r_magic_set_cont>(),
        8usize,
        concat!("Alignment of ", stringify!(r_magic_set_cont))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set_cont>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set_cont),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set_cont>())).li as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set_cont),
            "::",
            stringify!(li)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_magic_set_out {
    pub buf: *mut ::std::os::raw::c_char,
    pub pbuf: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_magic_set_out() {
    assert_eq!(
        ::std::mem::size_of::<r_magic_set_out>(),
        16usize,
        concat!("Size of: ", stringify!(r_magic_set_out))
    );
    assert_eq!(
        ::std::mem::align_of::<r_magic_set_out>(),
        8usize,
        concat!("Alignment of ", stringify!(r_magic_set_out))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set_out>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set_out),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set_out>())).pbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set_out),
            "::",
            stringify!(pbuf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_magic_set__bindgen_ty_1 {
    pub s: *const ::std::os::raw::c_char,
    pub s_len: size_t,
    pub offset: size_t,
    pub rm_len: size_t,
}
#[test]
fn bindgen_test_layout_r_magic_set__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_magic_set__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(r_magic_set__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_magic_set__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(r_magic_set__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set__bindgen_ty_1>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set__bindgen_ty_1>())).s_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set__bindgen_ty_1),
            "::",
            stringify!(s_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_magic_set__bindgen_ty_1>())).offset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set__bindgen_ty_1),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_magic_set__bindgen_ty_1>())).rm_len as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set__bindgen_ty_1),
            "::",
            stringify!(rm_len)
        )
    );
}
#[test]
fn bindgen_test_layout_r_magic_set() {
    assert_eq!(
        ::std::mem::size_of::<r_magic_set>(),
        136usize,
        concat!("Size of: ", stringify!(r_magic_set))
    );
    assert_eq!(
        ::std::mem::align_of::<r_magic_set>(),
        8usize,
        concat!("Alignment of ", stringify!(r_magic_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).mlist as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(mlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).o as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).offset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).error as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).haderr as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(haderr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).file as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).line as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).search as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(search)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_magic_set>())).ms_value as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_magic_set),
            "::",
            stringify!(ms_value)
        )
    );
}
pub type RMagic = r_magic_set;
extern "C" {
    pub fn r_magic_new(flags: ::std::os::raw::c_int) -> *mut RMagic;
}
extern "C" {
    pub fn r_magic_free(arg1: *mut RMagic);
}
extern "C" {
    pub fn r_magic_file(
        arg1: *mut RMagic,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_magic_descriptor(
        arg1: *mut RMagic,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_magic_buffer(
        arg1: *mut RMagic,
        arg2: *const ::std::os::raw::c_void,
        arg3: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_magic_error(arg1: *mut RMagic) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_magic_setflags(arg1: *mut RMagic, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_magic_load(arg1: *mut RMagic, arg2: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_magic_load_buffer(
        arg1: *mut RMagic,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: size_t,
    ) -> bool;
}
extern "C" {
    pub fn r_magic_compile(arg1: *mut RMagic, arg2: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_magic_check(arg1: *mut RMagic, arg2: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_magic_errno(arg1: *mut RMagic) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_ascii_node_t {
    pub gnode: *mut RGraphNode,
    pub title: *mut ::std::os::raw::c_char,
    pub body: *mut ::std::os::raw::c_char,
    pub color: *mut ::std::os::raw::c_char,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub layer: ::std::os::raw::c_int,
    pub layer_height: ::std::os::raw::c_int,
    pub layer_width: ::std::os::raw::c_int,
    pub pos_in_layer: ::std::os::raw::c_int,
    pub is_dummy: ::std::os::raw::c_int,
    pub is_reversed: ::std::os::raw::c_int,
    pub klass: ::std::os::raw::c_int,
    pub difftype: ::std::os::raw::c_int,
    pub is_mini: bool,
}
#[test]
fn bindgen_test_layout_r_ascii_node_t() {
    assert_eq!(
        ::std::mem::size_of::<r_ascii_node_t>(),
        88usize,
        concat!("Size of: ", stringify!(r_ascii_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_ascii_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_ascii_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).gnode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(gnode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).title as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).body as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).color as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).x as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).y as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).w as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).h as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).layer as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).layer_height as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(layer_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).layer_width as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(layer_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).pos_in_layer as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(pos_in_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).is_dummy as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(is_dummy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).is_reversed as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(is_reversed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).klass as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).difftype as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(difftype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_node_t>())).is_mini as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_node_t),
            "::",
            stringify!(is_mini)
        )
    );
}
pub type RANode = r_ascii_node_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_graph_hits_t {
    pub old_word: *mut ::std::os::raw::c_char,
    pub word_list: RVector,
    pub word_nth: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_core_graph_hits_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_graph_hits_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_core_graph_hits_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_graph_hits_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_graph_hits_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_graph_hits_t>())).old_word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_graph_hits_t),
            "::",
            stringify!(old_word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_graph_hits_t>())).word_list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_graph_hits_t),
            "::",
            stringify!(word_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_graph_hits_t>())).word_nth as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_graph_hits_t),
            "::",
            stringify!(word_nth)
        )
    );
}
pub type RAGraphHits = r_core_graph_hits_t;
pub type RANodeCallback =
    ::std::option::Option<unsafe extern "C" fn(n: *mut RANode, user: *mut ::std::os::raw::c_void)>;
pub type RAEdgeCallback = ::std::option::Option<
    unsafe extern "C" fn(from: *mut RANode, to: *mut RANode, user: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_ascii_graph_t {
    pub can: *mut RConsCanvas,
    pub graph: *mut RGraph,
    pub curnode: *const RGraphNode,
    pub title: *mut ::std::os::raw::c_char,
    pub db: *mut Sdb,
    pub nodes: *mut Sdb,
    pub layout: ::std::os::raw::c_int,
    pub is_instep: ::std::os::raw::c_int,
    pub is_tiny: bool,
    pub is_dis: bool,
    pub edgemode: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub is_callgraph: bool,
    pub is_interactive: bool,
    pub zoom: ::std::os::raw::c_int,
    pub movspeed: ::std::os::raw::c_int,
    pub hints: bool,
    pub update_seek_on: *mut RANode,
    pub need_reload_nodes: bool,
    pub need_set_layout: bool,
    pub need_update_dim: ::std::os::raw::c_int,
    pub force_update_seek: ::std::os::raw::c_int,
    pub on_curnode_change: RANodeCallback,
    pub on_curnode_change_data: *mut ::std::os::raw::c_void,
    pub dummy: bool,
    pub show_node_titles: bool,
    pub show_node_body: bool,
    pub show_node_bubble: bool,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub back_edges: *mut RList,
    pub long_edges: *mut RList,
    pub layers: *mut layer_t,
    pub n_layers: ::std::os::raw::c_uint,
    pub dists: *mut RList,
    pub edges: *mut RList,
    pub ghits: RAGraphHits,
}
#[test]
fn bindgen_test_layout_r_ascii_graph_t() {
    assert_eq!(
        ::std::mem::size_of::<r_ascii_graph_t>(),
        264usize,
        concat!("Size of: ", stringify!(r_ascii_graph_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_ascii_graph_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_ascii_graph_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).can as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(can)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).graph as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).curnode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(curnode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).title as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).db as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).nodes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).layout as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).is_instep as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(is_instep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).is_tiny as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(is_tiny)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).is_dis as *const _ as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(is_dis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).edgemode as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(edgemode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).mode as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).is_callgraph as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(is_callgraph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).is_interactive as *const _ as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(is_interactive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).zoom as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(zoom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).movspeed as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(movspeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).hints as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(hints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).update_seek_on as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(update_seek_on)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_ascii_graph_t>())).need_reload_nodes as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(need_reload_nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).need_set_layout as *const _ as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(need_set_layout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).need_update_dim as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(need_update_dim)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_ascii_graph_t>())).force_update_seek as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(force_update_seek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_ascii_graph_t>())).on_curnode_change as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(on_curnode_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_ascii_graph_t>())).on_curnode_change_data as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(on_curnode_change_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).dummy as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_ascii_graph_t>())).show_node_titles as *const _ as usize
        },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(show_node_titles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).show_node_body as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(show_node_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_ascii_graph_t>())).show_node_bubble as *const _ as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(show_node_bubble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).x as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).y as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).w as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).h as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).back_edges as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(back_edges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).long_edges as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(long_edges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).layers as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).n_layers as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(n_layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).dists as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(dists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).edges as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(edges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_ascii_graph_t>())).ghits as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_ascii_graph_t),
            "::",
            stringify!(ghits)
        )
    );
}
pub type RAGraph = r_ascii_graph_t;
extern "C" {
    pub fn r_agraph_new(can: *mut RConsCanvas) -> *mut RAGraph;
}
extern "C" {
    pub fn r_agraph_free(g: *mut RAGraph);
}
extern "C" {
    pub fn r_agraph_reset(g: *mut RAGraph);
}
extern "C" {
    pub fn r_agraph_set_title(g: *mut RAGraph, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_agraph_get_first_node(g: *const RAGraph) -> *mut RANode;
}
extern "C" {
    pub fn r_agraph_get_node(
        g: *const RAGraph,
        title: *const ::std::os::raw::c_char,
    ) -> *mut RANode;
}
extern "C" {
    pub fn r_agraph_add_node(
        g: *const RAGraph,
        title: *const ::std::os::raw::c_char,
        body: *const ::std::os::raw::c_char,
        color: *const ::std::os::raw::c_char,
    ) -> *mut RANode;
}
extern "C" {
    pub fn r_agraph_del_node(g: *const RAGraph, title: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_agraph_add_edge(g: *const RAGraph, a: *mut RANode, b: *mut RANode, highlight: bool);
}
extern "C" {
    pub fn r_agraph_add_edge_at(
        g: *const RAGraph,
        a: *mut RANode,
        b: *mut RANode,
        nth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_agraph_del_edge(g: *const RAGraph, a: *mut RANode, b: *mut RANode);
}
extern "C" {
    pub fn r_agraph_print(g: *mut RAGraph);
}
extern "C" {
    pub fn r_agraph_print_json(g: *mut RAGraph, pj: *mut PJ);
}
extern "C" {
    pub fn r_agraph_get_sdb(g: *mut RAGraph) -> *mut Sdb;
}
extern "C" {
    pub fn r_agraph_foreach(g: *mut RAGraph, cb: RANodeCallback, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_agraph_foreach_edge(
        g: *mut RAGraph,
        cb: RAEdgeCallback,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_agraph_set_curnode(g: *mut RAGraph, node: *mut RANode);
}
extern "C" {
    pub fn create_agraph_from_graph(graph: *const RGraph) -> *mut RAGraph;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_skyline_item_t {
    pub itv: RInterval,
    pub user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_skyline_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_skyline_item_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_skyline_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_skyline_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_skyline_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_skyline_item_t>())).itv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_skyline_item_t),
            "::",
            stringify!(itv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_skyline_item_t>())).user as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_skyline_item_t),
            "::",
            stringify!(user)
        )
    );
}
pub type RSkylineItem = r_skyline_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_skyline_t {
    pub v: RVector,
}
#[test]
fn bindgen_test_layout_r_skyline_t() {
    assert_eq!(
        ::std::mem::size_of::<r_skyline_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_skyline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_skyline_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_skyline_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_skyline_t>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_skyline_t),
            "::",
            stringify!(v)
        )
    );
}
pub type RSkyline = r_skyline_t;
extern "C" {
    pub fn r_skyline_add(
        skyline: *mut RSkyline,
        itv: RInterval,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_skyline_get_item_intersect(
        skyline: *mut RSkyline,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_ulonglong,
    ) -> *const RSkylineItem;
}
pub const ePtAttachDeprecated: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
extern "C" {
    pub fn ptrace(
        _request: ::std::os::raw::c_int,
        _pid: pid_t,
        _addr: caddr_t,
        _data: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type r_ptrace_request_t = ::std::os::raw::c_int;
pub type r_ptrace_data_t = ::std::os::raw::c_int;
extern "C" {
    pub fn r_io_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_io_undos_t {
    pub off: ::std::os::raw::c_ulonglong,
    pub cursor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_io_undos_t() {
    assert_eq!(
        ::std::mem::size_of::<r_io_undos_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_io_undos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_io_undos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_io_undos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undos_t>())).off as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undos_t),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undos_t>())).cursor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undos_t),
            "::",
            stringify!(cursor)
        )
    );
}
pub type RIOUndos = r_io_undos_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_io_undo_t {
    pub s_enable: ::std::os::raw::c_int,
    pub w_enable: ::std::os::raw::c_int,
    pub w_list: *mut RList,
    pub w_init: ::std::os::raw::c_int,
    pub idx: ::std::os::raw::c_int,
    pub undos: ::std::os::raw::c_int,
    pub redos: ::std::os::raw::c_int,
    pub seek: [RIOUndos; 64usize],
}
#[test]
fn bindgen_test_layout_r_io_undo_t() {
    assert_eq!(
        ::std::mem::size_of::<r_io_undo_t>(),
        1056usize,
        concat!("Size of: ", stringify!(r_io_undo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_io_undo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_io_undo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_t>())).s_enable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_t),
            "::",
            stringify!(s_enable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_t>())).w_enable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_t),
            "::",
            stringify!(w_enable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_t>())).w_list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_t),
            "::",
            stringify!(w_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_t>())).w_init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_t),
            "::",
            stringify!(w_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_t>())).idx as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_t>())).undos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_t),
            "::",
            stringify!(undos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_t>())).redos as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_t),
            "::",
            stringify!(redos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_t>())).seek as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_t),
            "::",
            stringify!(seek)
        )
    );
}
pub type RIOUndo = r_io_undo_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_io_undo_w_t {
    pub set: bool,
    pub off: ::std::os::raw::c_ulonglong,
    pub o: *mut ::std::os::raw::c_uchar,
    pub n: *mut ::std::os::raw::c_uchar,
    pub len: size_t,
}
#[test]
fn bindgen_test_layout_r_io_undo_w_t() {
    assert_eq!(
        ::std::mem::size_of::<r_io_undo_w_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_io_undo_w_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_io_undo_w_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_io_undo_w_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_w_t>())).set as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_w_t),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_w_t>())).off as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_w_t),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_w_t>())).o as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_w_t),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_w_t>())).n as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_w_t),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_undo_w_t>())).len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_undo_w_t),
            "::",
            stringify!(len)
        )
    );
}
pub type RIOUndoWrite = r_io_undo_w_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_io_t {
    pub desc: *mut r_io_desc_t,
    pub off: ::std::os::raw::c_ulonglong,
    pub bits: ::std::os::raw::c_int,
    pub va: ::std::os::raw::c_int,
    pub ff: bool,
    pub Oxff: ::std::os::raw::c_uchar,
    pub addrbytes: size_t,
    pub aslr: bool,
    pub autofd: bool,
    pub cached: ::std::os::raw::c_uint,
    pub cachemode: bool,
    pub p_cache: ::std::os::raw::c_uint,
    pub map_ids: *mut RIDPool,
    pub maps: RPVector,
    pub map_skyline: RSkyline,
    pub files: *mut RIDStorage,
    pub buffer: *mut RCache,
    pub cache: RPVector,
    pub cache_skyline: RSkyline,
    pub write_mask: *mut ::std::os::raw::c_uchar,
    pub write_mask_len: ::std::os::raw::c_int,
    pub mask: ::std::os::raw::c_ulonglong,
    pub undo: RIOUndo,
    pub plugins: *mut SdbList,
    pub nodup: bool,
    pub runprofile: *mut ::std::os::raw::c_char,
    pub envprofile: *mut ::std::os::raw::c_char,
    pub args: *mut ::std::os::raw::c_char,
    pub event: *mut REvent,
    pub cb_printf: PrintfCallback,
    pub corebind: RCoreBind,
    pub want_ptrace_wrap: bool,
}
#[test]
fn bindgen_test_layout_r_io_t() {
    assert_eq!(
        ::std::mem::size_of::<r_io_t>(),
        1560usize,
        concat!("Size of: ", stringify!(r_io_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_io_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_io_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).desc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).off as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).bits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).va as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(va)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).ff as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(ff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).Oxff as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(Oxff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).addrbytes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(addrbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).aslr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(aslr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).autofd as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(autofd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).cached as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(cached)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).cachemode as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(cachemode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).p_cache as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(p_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).map_ids as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(map_ids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).maps as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(maps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).map_skyline as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(map_skyline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).files as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).buffer as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).cache as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).cache_skyline as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(cache_skyline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).write_mask as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(write_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).write_mask_len as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(write_mask_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).mask as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).undo as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(undo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).plugins as *const _ as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).nodup as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(nodup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).runprofile as *const _ as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(runprofile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).envprofile as *const _ as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(envprofile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).args as *const _ as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).event as *const _ as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).cb_printf as *const _ as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).corebind as *const _ as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(corebind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_t>())).want_ptrace_wrap as *const _ as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_t),
            "::",
            stringify!(want_ptrace_wrap)
        )
    );
}
pub type RIO = r_io_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_io_desc_t {
    pub fd: ::std::os::raw::c_int,
    pub perm: ::std::os::raw::c_int,
    pub uri: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub referer: *mut ::std::os::raw::c_char,
    pub cache: *mut HtUP,
    pub data: *mut ::std::os::raw::c_void,
    pub plugin: *mut r_io_plugin_t,
    pub io: *mut RIO,
}
#[test]
fn bindgen_test_layout_r_io_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<r_io_desc_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_io_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_io_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_io_desc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_t>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_t>())).perm as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_t>())).uri as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_t),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_t>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_t>())).referer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_t),
            "::",
            stringify!(referer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_t>())).cache as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_t>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_t>())).plugin as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_t),
            "::",
            stringify!(plugin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_t>())).io as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_t),
            "::",
            stringify!(io)
        )
    );
}
pub type RIODesc = r_io_desc_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RIORap {
    pub fd: *mut RSocket,
    pub client: *mut RSocket,
    pub listener: bool,
}
#[test]
fn bindgen_test_layout_RIORap() {
    assert_eq!(
        ::std::mem::size_of::<RIORap>(),
        24usize,
        concat!("Size of: ", stringify!(RIORap))
    );
    assert_eq!(
        ::std::mem::align_of::<RIORap>(),
        8usize,
        concat!("Alignment of ", stringify!(RIORap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIORap>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RIORap),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIORap>())).client as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RIORap),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RIORap>())).listener as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RIORap),
            "::",
            stringify!(listener)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_io_plugin_t {
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub author: *const ::std::os::raw::c_char,
    pub license: *const ::std::os::raw::c_char,
    pub widget: *mut ::std::os::raw::c_void,
    pub uris: *const ::std::os::raw::c_char,
    pub listener:
        ::std::option::Option<unsafe extern "C" fn(io: *mut RIODesc) -> ::std::os::raw::c_int>,
    pub init: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub undo: RIOUndo,
    pub isdbg: bool,
    pub system: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RIO,
            fd: *mut RIODesc,
            arg1: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RIO,
            arg1: *const ::std::os::raw::c_char,
            perm: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
        ) -> *mut RIODesc,
    >,
    pub open_many: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RIO,
            arg1: *const ::std::os::raw::c_char,
            perm: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
        ) -> *mut RList,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RIO,
            fd: *mut RIODesc,
            buf: *mut ::std::os::raw::c_uchar,
            count: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RIO,
            fd: *mut RIODesc,
            offset: ::std::os::raw::c_ulonglong,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RIO,
            fd: *mut RIODesc,
            buf: *const ::std::os::raw::c_uchar,
            count: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(desc: *mut RIODesc) -> ::std::os::raw::c_int>,
    pub is_blockdevice: ::std::option::Option<unsafe extern "C" fn(desc: *mut RIODesc) -> bool>,
    pub is_chardevice: ::std::option::Option<unsafe extern "C" fn(desc: *mut RIODesc) -> bool>,
    pub getpid:
        ::std::option::Option<unsafe extern "C" fn(desc: *mut RIODesc) -> ::std::os::raw::c_int>,
    pub gettid:
        ::std::option::Option<unsafe extern "C" fn(desc: *mut RIODesc) -> ::std::os::raw::c_int>,
    pub getbase: ::std::option::Option<
        unsafe extern "C" fn(desc: *mut RIODesc, base: *mut ::std::os::raw::c_ulonglong) -> bool,
    >,
    pub resize: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RIO,
            fd: *mut RIODesc,
            size: ::std::os::raw::c_ulonglong,
        ) -> bool,
    >,
    pub extend: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RIO,
            fd: *mut RIODesc,
            size: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
    >,
    pub accept: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RIO, desc: *mut RIODesc, fd: ::std::os::raw::c_int) -> bool,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            io: *mut RIO,
            file: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub check: ::std::option::Option<
        unsafe extern "C" fn(io: *mut RIO, arg1: *const ::std::os::raw::c_char, many: bool) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_r_io_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_io_plugin_t>(),
        1272usize,
        concat!("Size of: ", stringify!(r_io_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_io_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_io_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).author as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).license as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).widget as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(widget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).uris as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(uris)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).listener as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(listener)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).init as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).undo as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(undo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).isdbg as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(isdbg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).system as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).open as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).open_many as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(open_many)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).read as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).seek as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).write as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).close as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).is_blockdevice as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(is_blockdevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).is_chardevice as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(is_chardevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).getpid as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(getpid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).gettid as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(gettid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).getbase as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(getbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).resize as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(resize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).extend as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(extend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).accept as *const _ as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(accept)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).create as *const _ as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_plugin_t>())).check as *const _ as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_plugin_t),
            "::",
            stringify!(check)
        )
    );
}
pub type RIOPlugin = r_io_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_io_map_t {
    pub fd: ::std::os::raw::c_int,
    pub perm: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_uint,
    pub itv: RInterval,
    pub delta: ::std::os::raw::c_ulonglong,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_io_map_t() {
    assert_eq!(
        ::std::mem::size_of::<r_io_map_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_io_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_io_map_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_io_map_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_map_t>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_map_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_map_t>())).perm as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_map_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_map_t>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_map_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_map_t>())).itv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_map_t),
            "::",
            stringify!(itv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_map_t>())).delta as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_map_t),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_map_t>())).name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_map_t),
            "::",
            stringify!(name)
        )
    );
}
pub type RIOMap = r_io_map_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_io_cache_t {
    pub itv: RInterval,
    pub data: *mut ::std::os::raw::c_uchar,
    pub odata: *mut ::std::os::raw::c_uchar,
    pub written: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_io_cache_t() {
    assert_eq!(
        ::std::mem::size_of::<r_io_cache_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_io_cache_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_io_cache_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_io_cache_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_cache_t>())).itv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_cache_t),
            "::",
            stringify!(itv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_cache_t>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_cache_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_cache_t>())).odata as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_cache_t),
            "::",
            stringify!(odata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_cache_t>())).written as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_cache_t),
            "::",
            stringify!(written)
        )
    );
}
pub type RIOCache = r_io_cache_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_io_desc_cache_t {
    pub cached: ::std::os::raw::c_ulonglong,
    pub cdata: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_r_io_desc_cache_t() {
    assert_eq!(
        ::std::mem::size_of::<r_io_desc_cache_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_io_desc_cache_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_io_desc_cache_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_io_desc_cache_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_cache_t>())).cached as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_cache_t),
            "::",
            stringify!(cached)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_desc_cache_t>())).cdata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_desc_cache_t),
            "::",
            stringify!(cdata)
        )
    );
}
pub type RIODescCache = r_io_desc_cache_t;
pub type RIODescUse =
    ::std::option::Option<unsafe extern "C" fn(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool>;
pub type RIODescGet = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RIO, fd: ::std::os::raw::c_int) -> *mut RIODesc,
>;
pub type RIODescSize =
    ::std::option::Option<unsafe extern "C" fn(desc: *mut RIODesc) -> ::std::os::raw::c_ulonglong>;
pub type RIOOpen = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RIODesc,
>;
pub type RIOOpenAt = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        at: ::std::os::raw::c_ulonglong,
    ) -> *mut RIODesc,
>;
pub type RIOClose =
    ::std::option::Option<unsafe extern "C" fn(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool>;
pub type RIOReadAt = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool,
>;
pub type RIOWriteAt = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool,
>;
pub type RIOSystem = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RIOFdOpen = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RIOFdClose =
    ::std::option::Option<unsafe extern "C" fn(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool>;
pub type RIOFdSeek = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RIOFdSize = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_ulonglong,
>;
pub type RIOFdResize = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        newsize: ::std::os::raw::c_ulonglong,
    ) -> bool,
>;
pub type RIOP2V = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        pa: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RIOV2P = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        va: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub type RIOFdRead = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RIOFdWrite = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RIOFdReadAt = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RIOFdWriteAt = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RIOFdIsDbg =
    ::std::option::Option<unsafe extern "C" fn(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool>;
pub type RIOFdGetName = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RIO, fd: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
>;
pub type RIOFdGetMap = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RIO, fd: ::std::os::raw::c_int) -> *mut RList,
>;
pub type RIOFdRemap = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool,
>;
pub type RIOIsValidOff = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        hasperm: ::std::os::raw::c_int,
    ) -> bool,
>;
pub type RIOMapGet = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RIO, addr: ::std::os::raw::c_ulonglong) -> *mut RIOMap,
>;
pub type RIOMapGetPaddr = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RIO, paddr: ::std::os::raw::c_ulonglong) -> *mut RIOMap,
>;
pub type RIOAddrIsMapped = ::std::option::Option<
    unsafe extern "C" fn(io: *mut RIO, addr: ::std::os::raw::c_ulonglong) -> bool,
>;
pub type RIOMapAdd = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_ulonglong,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RIOMap,
>;
pub type RIOPtraceFn = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        request: r_ptrace_request_t,
        pid: pid_t,
        addr: *mut ::std::os::raw::c_void,
        data: r_ptrace_data_t,
    ) -> ::std::os::raw::c_long,
>;
pub type RIOPtraceFuncFn = ::std::option::Option<
    unsafe extern "C" fn(
        io: *mut RIO,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_io_bind_t {
    pub init: ::std::os::raw::c_int,
    pub io: *mut RIO,
    pub desc_use: RIODescUse,
    pub desc_get: RIODescGet,
    pub desc_size: RIODescSize,
    pub open: RIOOpen,
    pub open_at: RIOOpenAt,
    pub close: RIOClose,
    pub read_at: RIOReadAt,
    pub write_at: RIOWriteAt,
    pub system: RIOSystem,
    pub fd_open: RIOFdOpen,
    pub fd_close: RIOFdClose,
    pub fd_seek: RIOFdSeek,
    pub fd_size: RIOFdSize,
    pub fd_resize: RIOFdResize,
    pub fd_read: RIOFdRead,
    pub fd_write: RIOFdWrite,
    pub fd_read_at: RIOFdReadAt,
    pub fd_write_at: RIOFdWriteAt,
    pub fd_is_dbg: RIOFdIsDbg,
    pub fd_get_name: RIOFdGetName,
    pub fd_get_map: RIOFdGetMap,
    pub fd_remap: RIOFdRemap,
    pub is_valid_offset: RIOIsValidOff,
    pub addr_is_mapped: RIOAddrIsMapped,
    pub map_get_at: RIOMapGet,
    pub map_get_paddr: RIOMapGetPaddr,
    pub map_add: RIOMapAdd,
    pub v2p: RIOV2P,
    pub p2v: RIOP2V,
    pub ptrace: RIOPtraceFn,
    pub ptrace_func: RIOPtraceFuncFn,
}
#[test]
fn bindgen_test_layout_r_io_bind_t() {
    assert_eq!(
        ::std::mem::size_of::<r_io_bind_t>(),
        264usize,
        concat!("Size of: ", stringify!(r_io_bind_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_io_bind_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_io_bind_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).io as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(io)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).desc_use as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(desc_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).desc_get as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(desc_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).desc_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(desc_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).open as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).open_at as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(open_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).read_at as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(read_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).write_at as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(write_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).system as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_open as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_close as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_seek as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_size as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_resize as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_resize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_read as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_write as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_read_at as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_read_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_write_at as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_write_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_is_dbg as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_is_dbg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_get_name as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_get_map as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_get_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).fd_remap as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(fd_remap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).is_valid_offset as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(is_valid_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).addr_is_mapped as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(addr_is_mapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).map_get_at as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(map_get_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).map_get_paddr as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(map_get_paddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).map_add as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(map_add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).v2p as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(v2p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).p2v as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(p2v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).ptrace as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(ptrace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_io_bind_t>())).ptrace_func as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(r_io_bind_t),
            "::",
            stringify!(ptrace_func)
        )
    );
}
pub type RIOBind = r_io_bind_t;
extern "C" {
    pub fn r_io_map_new(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_ulonglong,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RIOMap;
}
extern "C" {
    pub fn r_io_map_init(io: *mut RIO);
}
extern "C" {
    pub fn r_io_map_remap(
        io: *mut RIO,
        id: ::std::os::raw::c_uint,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_io_map_remap_fd(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_io_map_location(
        io: *mut RIO,
        size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_map_exists(io: *mut RIO, map: *mut RIOMap) -> bool;
}
extern "C" {
    pub fn r_io_map_exists_for_id(io: *mut RIO, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_io_map_get(io: *mut RIO, id: ::std::os::raw::c_uint) -> *mut RIOMap;
}
extern "C" {
    pub fn r_io_map_add(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_ulonglong,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RIOMap;
}
extern "C" {
    pub fn r_io_map_add_batch(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_ulonglong,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RIOMap;
}
extern "C" {
    pub fn r_io_map_get_at(io: *mut RIO, addr: ::std::os::raw::c_ulonglong) -> *mut RIOMap;
}
extern "C" {
    pub fn r_io_update(io: *mut RIO);
}
extern "C" {
    pub fn r_io_map_is_mapped(io: *mut RIO, addr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_io_map_get_paddr(io: *mut RIO, paddr: ::std::os::raw::c_ulonglong) -> *mut RIOMap;
}
extern "C" {
    pub fn r_io_map_reset(io: *mut RIO);
}
extern "C" {
    pub fn r_io_map_del(io: *mut RIO, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_io_map_del_for_fd(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_io_map_depriorize(io: *mut RIO, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_io_map_priorize(io: *mut RIO, id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_io_map_priorize_for_fd(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_io_map_cleanup(io: *mut RIO);
}
extern "C" {
    pub fn r_io_map_fini(io: *mut RIO);
}
extern "C" {
    pub fn r_io_map_is_in_range(
        map: *mut RIOMap,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_io_map_set_name(map: *mut RIOMap, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_io_map_del_name(map: *mut RIOMap);
}
extern "C" {
    pub fn r_io_map_get_by_fd(io: *mut RIO, fd: ::std::os::raw::c_int) -> *mut RList;
}
extern "C" {
    pub fn r_io_map_resize(
        io: *mut RIO,
        id: ::std::os::raw::c_uint,
        newsize: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_io_map_next_available(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
        load_align: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_map_next_address(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_p2v(io: *mut RIO, pa: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_v2p(io: *mut RIO, va: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_new() -> *mut RIO;
}
extern "C" {
    pub fn r_io_init(io: *mut RIO) -> *mut RIO;
}
extern "C" {
    pub fn r_io_open_nomap(
        io: *mut RIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_open(
        io: *mut RIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_open_at(
        io: *mut RIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        at: ::std::os::raw::c_ulonglong,
    ) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_open_many(
        io: *mut RIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_io_open_buffer(
        io: *mut RIO,
        b: *mut RBuffer,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_close(io: *mut RIO) -> bool;
}
extern "C" {
    pub fn r_io_reopen(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_close_all(io: *mut RIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_pread_at(
        io: *mut RIO,
        paddr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_pwrite_at(
        io: *mut RIO,
        paddr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_vread_at_mapped(
        io: *mut RIO,
        vaddr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_read_at(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_read_at_mapped(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_nread_at(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_alprint(ls: *mut RList);
}
extern "C" {
    pub fn r_io_write_at(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_read(
        io: *mut RIO,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_write(
        io: *mut RIO,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_size(io: *mut RIO) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_is_listener(io: *mut RIO) -> bool;
}
extern "C" {
    pub fn r_io_system(
        io: *mut RIO,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_io_resize(io: *mut RIO, newsize: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_io_extend_at(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_set_write_mask(
        io: *mut RIO,
        mask: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_bind(io: *mut RIO, bnd: *mut RIOBind);
}
extern "C" {
    pub fn r_io_shift(
        io: *mut RIO,
        start: ::std::os::raw::c_ulonglong,
        end: ::std::os::raw::c_ulonglong,
        move_: ::std::os::raw::c_longlong,
    ) -> bool;
}
extern "C" {
    pub fn r_io_seek(
        io: *mut RIO,
        offset: ::std::os::raw::c_ulonglong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_fini(io: *mut RIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_free(io: *mut RIO);
}
extern "C" {
    pub fn r_io_plugin_init(io: *mut RIO) -> bool;
}
extern "C" {
    pub fn r_io_plugin_add(io: *mut RIO, plugin: *mut RIOPlugin) -> bool;
}
extern "C" {
    pub fn r_io_plugin_list(io: *mut RIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_plugin_list_json(io: *mut RIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_plugin_read(
        desc: *mut RIODesc,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_plugin_write(
        desc: *mut RIODesc,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_plugin_read_at(
        desc: *mut RIODesc,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_plugin_write_at(
        desc: *mut RIODesc,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_plugin_resolve(
        io: *mut RIO,
        filename: *const ::std::os::raw::c_char,
        many: bool,
    ) -> *mut RIOPlugin;
}
extern "C" {
    pub fn r_io_plugin_get_default(
        io: *mut RIO,
        filename: *const ::std::os::raw::c_char,
        many: bool,
    ) -> *mut RIOPlugin;
}
extern "C" {
    pub fn r_io_undo_init(io: *mut RIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_undo_enable(
        io: *mut RIO,
        seek: ::std::os::raw::c_int,
        write: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_io_sundo(io: *mut RIO, offset: ::std::os::raw::c_ulonglong) -> *mut RIOUndos;
}
extern "C" {
    pub fn r_io_sundo_redo(io: *mut RIO) -> *mut RIOUndos;
}
extern "C" {
    pub fn r_io_sundo_push(
        io: *mut RIO,
        off: ::std::os::raw::c_ulonglong,
        cursor: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_io_sundo_reset(io: *mut RIO);
}
extern "C" {
    pub fn r_io_sundo_list(io: *mut RIO, mode: ::std::os::raw::c_int) -> *mut RList;
}
extern "C" {
    pub fn r_io_wundo_new(
        io: *mut RIO,
        off: ::std::os::raw::c_ulonglong,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_io_wundo_apply_all(io: *mut RIO, set: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_io_wundo_apply(
        io: *mut RIO,
        u: *mut r_io_undo_w_t,
        set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_wundo_clear(io: *mut RIO);
}
extern "C" {
    pub fn r_io_wundo_size(io: *mut RIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_wundo_list(io: *mut RIO);
}
extern "C" {
    pub fn r_io_wundo_set_t(
        io: *mut RIO,
        u: *mut RIOUndoWrite,
        set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_wundo_set_all(io: *mut RIO, set: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_io_wundo_set(
        io: *mut RIO,
        n: ::std::os::raw::c_int,
        set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_desc_new(
        io: *mut RIO,
        plugin: *mut RIOPlugin,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_desc_open(
        io: *mut RIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_desc_open_plugin(
        io: *mut RIO,
        plugin: *mut RIOPlugin,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_desc_close(desc: *mut RIODesc) -> bool;
}
extern "C" {
    pub fn r_io_desc_read(
        desc: *mut RIODesc,
        buf: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_desc_write(
        desc: *mut RIODesc,
        buf: *const ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_desc_free(desc: *mut RIODesc);
}
extern "C" {
    pub fn r_io_desc_add(io: *mut RIO, desc: *mut RIODesc) -> bool;
}
extern "C" {
    pub fn r_io_desc_del(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_io_desc_get(io: *mut RIO, fd: ::std::os::raw::c_int) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_desc_get_next(io: *mut RIO, desc: *mut RIODesc) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_desc_get_prev(io: *mut RIO, desc: *mut RIODesc) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_desc_get_highest(io: *mut RIO) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_desc_get_lowest(io: *mut RIO) -> *mut RIODesc;
}
extern "C" {
    pub fn r_io_desc_seek(
        desc: *mut RIODesc,
        offset: ::std::os::raw::c_ulonglong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_desc_resize(desc: *mut RIODesc, newsize: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_io_desc_size(desc: *mut RIODesc) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_desc_is_blockdevice(desc: *mut RIODesc) -> bool;
}
extern "C" {
    pub fn r_io_desc_is_chardevice(desc: *mut RIODesc) -> bool;
}
extern "C" {
    pub fn r_io_desc_exchange(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        fdx: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_desc_is_dbg(desc: *mut RIODesc) -> bool;
}
extern "C" {
    pub fn r_io_desc_get_pid(desc: *mut RIODesc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_desc_get_tid(desc: *mut RIODesc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_desc_get_base(desc: *mut RIODesc, base: *mut ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_io_desc_read_at(
        desc: *mut RIODesc,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_desc_write_at(
        desc: *mut RIODesc,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_desc_init(io: *mut RIO) -> bool;
}
extern "C" {
    pub fn r_io_desc_fini(io: *mut RIO) -> bool;
}
extern "C" {
    pub fn r_io_cache_invalidate(
        io: *mut RIO,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_cache_at(io: *mut RIO, addr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_io_cache_commit(
        io: *mut RIO,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_io_cache_init(io: *mut RIO);
}
extern "C" {
    pub fn r_io_cache_fini(io: *mut RIO);
}
extern "C" {
    pub fn r_io_cache_list(io: *mut RIO, rad: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_io_cache_reset(io: *mut RIO, set: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_io_cache_write(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_cache_read(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_desc_cache_init(desc: *mut RIODesc) -> bool;
}
extern "C" {
    pub fn r_io_desc_cache_write(
        desc: *mut RIODesc,
        paddr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_desc_cache_read(
        desc: *mut RIODesc,
        paddr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_desc_cache_commit(desc: *mut RIODesc) -> bool;
}
extern "C" {
    pub fn r_io_desc_cache_cleanup(desc: *mut RIODesc);
}
extern "C" {
    pub fn r_io_desc_cache_fini(desc: *mut RIODesc);
}
extern "C" {
    pub fn r_io_desc_cache_fini_all(io: *mut RIO);
}
extern "C" {
    pub fn r_io_desc_cache_list(desc: *mut RIODesc) -> *mut RList;
}
extern "C" {
    pub fn r_io_desc_extend(
        desc: *mut RIODesc,
        size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_buffer_read(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_buffer_load(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_buffer_close(io: *mut RIO);
}
extern "C" {
    pub fn r_io_fd_open(
        io: *mut RIO,
        uri: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_fd_close(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_io_fd_read(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_fd_write(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_fd_seek(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_fd_size(io: *mut RIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_io_fd_resize(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        newsize: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_io_fd_is_blockdevice(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_io_fd_is_chardevice(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_io_fd_read_at(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_fd_write_at(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_fd_is_dbg(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_io_fd_get_pid(io: *mut RIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_fd_get_tid(io: *mut RIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_fd_get_base(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
        base: *mut ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_io_fd_get_name(
        io: *mut RIO,
        fd: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_io_fd_get_current(io: *mut RIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_use_fd(io: *mut RIO, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_io_fd_get_next(io: *mut RIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_fd_get_prev(io: *mut RIO, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_fd_get_highest(io: *mut RIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_fd_get_lowest(io: *mut RIO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_io_is_valid_offset(
        io: *mut RIO,
        offset: ::std::os::raw::c_ulonglong,
        hasperm: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_io_addr_is_mapped(io: *mut RIO, vaddr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_io_read_i(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        val: *mut ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        endian: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_io_write_i(
        io: *mut RIO,
        addr: ::std::os::raw::c_ulonglong,
        val: *mut ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        endian: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_io_ptrace(
        io: *mut RIO,
        request: r_ptrace_request_t,
        pid: pid_t,
        addr: *mut ::std::os::raw::c_void,
        data: r_ptrace_data_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn r_io_ptrace_fork(
        io: *mut RIO,
        child_callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        child_callback_user: *mut ::std::os::raw::c_void,
    ) -> pid_t;
}
extern "C" {
    pub fn r_io_ptrace_func(
        io: *mut RIO,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub static mut r_io_plugin_procpid: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_malloc: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_sparse: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_ptrace: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_w32dbg: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_windbg: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_mach: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_debug: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_shm: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_gdb: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_rap: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_http: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_bfdbg: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_w32: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_zip: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_mmap: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_default: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_ihex: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_self: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_gzip: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_winkd: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_r2pipe: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_r2web: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_qnx: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_r2k: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_tcpslurp: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_bochs: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_null: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_ar: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_rbuf: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_winedbg: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_gprobe: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_fd: RIOPlugin;
}
extern "C" {
    pub static mut r_io_plugin_socket: RIOPlugin;
}
extern "C" {
    pub fn r_fs_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_fs_t {
    pub iob: RIOBind,
    pub cob: RCoreBind,
    pub csb: RConsBind,
    pub plugins: *mut RList,
    pub roots: *mut RList,
    pub view: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_fs_t() {
    assert_eq!(
        ::std::mem::size_of::<r_fs_t>(),
        488usize,
        concat!("Size of: ", stringify!(r_fs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_fs_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_fs_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_t>())).iob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_t),
            "::",
            stringify!(iob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_t>())).cob as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_t),
            "::",
            stringify!(cob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_t>())).csb as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_t),
            "::",
            stringify!(csb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_t>())).plugins as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_t>())).roots as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_t),
            "::",
            stringify!(roots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_t>())).view as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_t),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_t>())).ptr as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_t),
            "::",
            stringify!(ptr)
        )
    );
}
pub type RFS = r_fs_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_fs_partition_plugin_t {
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_fs_partition_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_fs_partition_plugin_t>(),
        8usize,
        concat!("Size of: ", stringify!(r_fs_partition_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_fs_partition_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_fs_partition_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_partition_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_partition_plugin_t),
            "::",
            stringify!(name)
        )
    );
}
pub type RFSPartitionPlugin = r_fs_partition_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_fs_file_t {
    pub name: *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
    pub off: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_uchar,
    pub ctx: *mut ::std::os::raw::c_void,
    pub type_: ::std::os::raw::c_char,
    pub time: ::std::os::raw::c_ulonglong,
    pub p: *mut r_fs_plugin_t,
    pub root: *mut r_fs_root_t,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_fs_file_t() {
    assert_eq!(
        ::std::mem::size_of::<r_fs_file_t>(),
        88usize,
        concat!("Size of: ", stringify!(r_fs_file_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_fs_file_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_fs_file_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).off as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).ctx as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).type_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).time as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).p as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).root as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_file_t>())).ptr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_file_t),
            "::",
            stringify!(ptr)
        )
    );
}
pub type RFSFile = r_fs_file_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_fs_root_t {
    pub path: *mut ::std::os::raw::c_char,
    pub delta: ::std::os::raw::c_ulonglong,
    pub p: *mut r_fs_plugin_t,
    pub ptr: *mut ::std::os::raw::c_void,
    pub iob: RIOBind,
    pub cob: RCoreBind,
}
#[test]
fn bindgen_test_layout_r_fs_root_t() {
    assert_eq!(
        ::std::mem::size_of::<r_fs_root_t>(),
        440usize,
        concat!("Size of: ", stringify!(r_fs_root_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_fs_root_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_fs_root_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_root_t>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_root_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_root_t>())).delta as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_root_t),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_root_t>())).p as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_root_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_root_t>())).ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_root_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_root_t>())).iob as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_root_t),
            "::",
            stringify!(iob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_root_t>())).cob as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_root_t),
            "::",
            stringify!(cob)
        )
    );
}
pub type RFSRoot = r_fs_root_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_fs_plugin_t {
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub license: *const ::std::os::raw::c_char,
    pub slurp: ::std::option::Option<
        unsafe extern "C" fn(
            root: *mut RFSRoot,
            path: *const ::std::os::raw::c_char,
        ) -> *mut RFSFile,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            root: *mut RFSRoot,
            path: *const ::std::os::raw::c_char,
            create: bool,
        ) -> *mut RFSFile,
    >,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(root: *mut RFSRoot, path: *const ::std::os::raw::c_char) -> bool,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            fs: *mut RFSFile,
            addr: ::std::os::raw::c_ulonglong,
            data: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            fs: *mut RFSFile,
            addr: ::std::os::raw::c_ulonglong,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(fs: *mut RFSFile)>,
    pub dir: ::std::option::Option<
        unsafe extern "C" fn(
            root: *mut RFSRoot,
            path: *const ::std::os::raw::c_char,
            view: ::std::os::raw::c_int,
        ) -> *mut RList,
    >,
    pub init: ::std::option::Option<unsafe extern "C" fn()>,
    pub fini: ::std::option::Option<unsafe extern "C" fn()>,
    pub mount:
        ::std::option::Option<unsafe extern "C" fn(root: *mut RFSRoot) -> ::std::os::raw::c_int>,
    pub umount: ::std::option::Option<unsafe extern "C" fn(root: *mut RFSRoot)>,
}
#[test]
fn bindgen_test_layout_r_fs_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_fs_plugin_t>(),
        112usize,
        concat!("Size of: ", stringify!(r_fs_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_fs_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_fs_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).license as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).slurp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(slurp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).open as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).unlink as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).write as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).read as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).close as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).dir as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).init as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).fini as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).mount as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(mount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_plugin_t>())).umount as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_plugin_t),
            "::",
            stringify!(umount)
        )
    );
}
pub type RFSPlugin = r_fs_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_fs_partition_t {
    pub number: ::std::os::raw::c_int,
    pub start: ::std::os::raw::c_ulonglong,
    pub length: ::std::os::raw::c_ulonglong,
    pub index: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_fs_partition_t() {
    assert_eq!(
        ::std::mem::size_of::<r_fs_partition_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_fs_partition_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_fs_partition_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_fs_partition_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_partition_t>())).number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_partition_t),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_partition_t>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_partition_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_partition_t>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_partition_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_partition_t>())).index as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_partition_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_partition_t>())).type_ as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_partition_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type RFSPartition = r_fs_partition_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_fs_shell_t {
    pub cwd: *mut *mut ::std::os::raw::c_char,
    pub set_prompt:
        ::std::option::Option<unsafe extern "C" fn(prompt: *const ::std::os::raw::c_char)>,
    pub readline: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub hist_add: ::std::option::Option<
        unsafe extern "C" fn(line: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_r_fs_shell_t() {
    assert_eq!(
        ::std::mem::size_of::<r_fs_shell_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_fs_shell_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_fs_shell_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_fs_shell_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_shell_t>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_shell_t),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_shell_t>())).set_prompt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_shell_t),
            "::",
            stringify!(set_prompt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_shell_t>())).readline as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_shell_t),
            "::",
            stringify!(readline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_shell_t>())).hist_add as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_shell_t),
            "::",
            stringify!(hist_add)
        )
    );
}
pub type RFSShell = r_fs_shell_t;
pub type RFSPartitionIterator = ::std::option::Option<
    unsafe extern "C" fn(
        disk: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_fs_partition_type_t {
    pub name: *const ::std::os::raw::c_char,
    pub ptr: *mut ::std::os::raw::c_void,
    pub iterate: RFSPartitionIterator,
}
#[test]
fn bindgen_test_layout_r_fs_partition_type_t() {
    assert_eq!(
        ::std::mem::size_of::<r_fs_partition_type_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_fs_partition_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_fs_partition_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_fs_partition_type_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_partition_type_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_partition_type_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_partition_type_t>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_partition_type_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_fs_partition_type_t>())).iterate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_fs_partition_type_t),
            "::",
            stringify!(iterate)
        )
    );
}
pub type RFSPartitionType = r_fs_partition_type_t;
pub const R_FS_VIEW_NORMAL: ::std::os::raw::c_uint = 0;
pub const R_FS_VIEW_DELETED: ::std::os::raw::c_uint = 1;
pub const R_FS_VIEW_SPECIAL: ::std::os::raw::c_uint = 2;
pub const R_FS_VIEW_ALL: ::std::os::raw::c_uint = 255;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn r_fs_new() -> *mut RFS;
}
extern "C" {
    pub fn r_fs_view(fs: *mut RFS, view: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_fs_free(fs: *mut RFS);
}
extern "C" {
    pub fn r_fs_add(fs: *mut RFS, p: *mut RFSPlugin);
}
extern "C" {
    pub fn r_fs_del(fs: *mut RFS, p: *mut RFSPlugin);
}
extern "C" {
    pub fn r_fs_mount(
        fs: *mut RFS,
        fstype: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        delta: ::std::os::raw::c_ulonglong,
    ) -> *mut RFSRoot;
}
extern "C" {
    pub fn r_fs_umount(fs: *mut RFS, path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_fs_root(fs: *mut RFS, path: *const ::std::os::raw::c_char) -> *mut RList;
}
extern "C" {
    pub fn r_fs_open(
        fs: *mut RFS,
        path: *const ::std::os::raw::c_char,
        create: bool,
    ) -> *mut RFSFile;
}
extern "C" {
    pub fn r_fs_close(fs: *mut RFS, file: *mut RFSFile);
}
extern "C" {
    pub fn r_fs_read(
        fs: *mut RFS,
        file: *mut RFSFile,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_fs_write(
        fs: *mut RFS,
        file: *mut RFSFile,
        addr: ::std::os::raw::c_ulonglong,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_fs_slurp(fs: *mut RFS, path: *const ::std::os::raw::c_char) -> *mut RFSFile;
}
extern "C" {
    pub fn r_fs_dir(fs: *mut RFS, path: *const ::std::os::raw::c_char) -> *mut RList;
}
extern "C" {
    pub fn r_fs_dir_dump(
        fs: *mut RFS,
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_fs_find_name(
        fs: *mut RFS,
        name: *const ::std::os::raw::c_char,
        glob: *const ::std::os::raw::c_char,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_fs_find_off(
        fs: *mut RFS,
        name: *const ::std::os::raw::c_char,
        off: ::std::os::raw::c_ulonglong,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_fs_partitions(
        fs: *mut RFS,
        ptype: *const ::std::os::raw::c_char,
        delta: ::std::os::raw::c_ulonglong,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_fs_name(
        fs: *mut RFS,
        offset: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_fs_prompt(fs: *mut RFS, root: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_fs_check(fs: *mut RFS, p: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_fs_shell_prompt(
        shell: *mut RFSShell,
        fs: *mut RFS,
        root: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_fs_file_new(root: *mut RFSRoot, path: *const ::std::os::raw::c_char) -> *mut RFSFile;
}
extern "C" {
    pub fn r_fs_file_free(file: *mut RFSFile);
}
extern "C" {
    pub fn r_fs_file_copy_abs_path(file: *mut RFSFile) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_fs_root_new(
        path: *const ::std::os::raw::c_char,
        delta: ::std::os::raw::c_ulonglong,
    ) -> *mut RFSRoot;
}
extern "C" {
    pub fn r_fs_root_free(root: *mut RFSRoot);
}
extern "C" {
    pub fn r_fs_partition_new(
        num: ::std::os::raw::c_int,
        start: ::std::os::raw::c_ulonglong,
        length: ::std::os::raw::c_ulonglong,
    ) -> *mut RFSPartition;
}
extern "C" {
    pub fn r_fs_partition_free(p: *mut RFSPartition);
}
extern "C" {
    pub fn r_fs_partition_type(
        part: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_fs_partition_type_get(n: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_fs_partition_get_size() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut r_fs_plugin_io: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_r2: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_ext2: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_fat: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_ntfs: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_hfs: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_hfsplus: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_reiserfs: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_tar: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_iso9660: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_udf: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_ufs: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_ufs2: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_sfs: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_btrfs: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_jfs: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_afs: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_affs: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_cpio: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_xfs: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_fb: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_minix: RFSPlugin;
}
extern "C" {
    pub static mut r_fs_plugin_posix: RFSPlugin;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dl_info {
    pub dli_fname: *const ::std::os::raw::c_char,
    pub dli_fbase: *mut ::std::os::raw::c_void,
    pub dli_sname: *const ::std::os::raw::c_char,
    pub dli_saddr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_dl_info() {
    assert_eq!(
        ::std::mem::size_of::<dl_info>(),
        32usize,
        concat!("Size of: ", stringify!(dl_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dl_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dl_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dl_info>())).dli_fname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dl_info),
            "::",
            stringify!(dli_fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dl_info>())).dli_fbase as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dl_info),
            "::",
            stringify!(dli_fbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dl_info>())).dli_sname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dl_info),
            "::",
            stringify!(dli_sname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dl_info>())).dli_saddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dl_info),
            "::",
            stringify!(dli_saddr)
        )
    );
}
pub type Dl_info = dl_info;
extern "C" {
    pub fn dladdr(arg1: *const ::std::os::raw::c_void, arg2: *mut Dl_info)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlclose(__handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlerror() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dlopen(
        __path: *const ::std::os::raw::c_char,
        __mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlsym(
        __handle: *mut ::std::os::raw::c_void,
        __symbol: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlopen_preflight(__path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_lib_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_lib_plugin_t {
    pub type_: ::std::os::raw::c_int,
    pub file: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub handler: *mut r_lib_handler_t,
    pub dl_handler: *mut ::std::os::raw::c_void,
    pub author: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub free: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_r_lib_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_lib_plugin_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_lib_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_lib_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_lib_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_plugin_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_plugin_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_plugin_t>())).file as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_plugin_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_plugin_t>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_plugin_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_plugin_t>())).handler as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_plugin_t),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_plugin_t>())).dl_handler as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_plugin_t),
            "::",
            stringify!(dl_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_plugin_t>())).author as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_plugin_t),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_plugin_t>())).version as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_plugin_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_plugin_t>())).free as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_plugin_t),
            "::",
            stringify!(free)
        )
    );
}
pub type RLibPlugin = r_lib_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_lib_handler_t {
    pub type_: ::std::os::raw::c_int,
    pub desc: [::std::os::raw::c_char; 128usize],
    pub user: *mut ::std::os::raw::c_void,
    pub constructor: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut RLibPlugin,
            user: *mut ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub destructor: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut RLibPlugin,
            user: *mut ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_r_lib_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<r_lib_handler_t>(),
        160usize,
        concat!("Size of: ", stringify!(r_lib_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_lib_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_lib_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_handler_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_handler_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_handler_t>())).desc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_handler_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_handler_t>())).user as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_handler_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_handler_t>())).constructor as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_handler_t),
            "::",
            stringify!(constructor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_handler_t>())).destructor as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_handler_t),
            "::",
            stringify!(destructor)
        )
    );
}
pub type RLibHandler = r_lib_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_lib_struct_t {
    pub type_: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
    pub version: *const ::std::os::raw::c_char,
    pub free: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
    pub pkgname: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_lib_struct_t() {
    assert_eq!(
        ::std::mem::size_of::<r_lib_struct_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_lib_struct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_lib_struct_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_lib_struct_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_struct_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_struct_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_struct_t>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_struct_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_struct_t>())).version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_struct_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_struct_t>())).free as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_struct_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_struct_t>())).pkgname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_struct_t),
            "::",
            stringify!(pkgname)
        )
    );
}
pub type RLibStruct = r_lib_struct_t;
pub type RLibStructFunc = ::std::option::Option<unsafe extern "C" fn() -> *mut RLibStruct>;
pub const R_LIB_TYPE_IO: ::std::os::raw::c_uint = 0;
pub const R_LIB_TYPE_DBG: ::std::os::raw::c_uint = 1;
pub const R_LIB_TYPE_LANG: ::std::os::raw::c_uint = 2;
pub const R_LIB_TYPE_ASM: ::std::os::raw::c_uint = 3;
pub const R_LIB_TYPE_ANAL: ::std::os::raw::c_uint = 4;
pub const R_LIB_TYPE_PARSE: ::std::os::raw::c_uint = 5;
pub const R_LIB_TYPE_BIN: ::std::os::raw::c_uint = 6;
pub const R_LIB_TYPE_BIN_XTR: ::std::os::raw::c_uint = 7;
pub const R_LIB_TYPE_BIN_LDR: ::std::os::raw::c_uint = 8;
pub const R_LIB_TYPE_BP: ::std::os::raw::c_uint = 9;
pub const R_LIB_TYPE_SYSCALL: ::std::os::raw::c_uint = 10;
pub const R_LIB_TYPE_FASTCALL: ::std::os::raw::c_uint = 11;
pub const R_LIB_TYPE_CRYPTO: ::std::os::raw::c_uint = 12;
pub const R_LIB_TYPE_CORE: ::std::os::raw::c_uint = 13;
pub const R_LIB_TYPE_EGG: ::std::os::raw::c_uint = 14;
pub const R_LIB_TYPE_FS: ::std::os::raw::c_uint = 15;
pub const R_LIB_TYPE_ESIL: ::std::os::raw::c_uint = 16;
pub const R_LIB_TYPE_LAST: ::std::os::raw::c_uint = 17;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_lib_t {
    pub symname: *mut ::std::os::raw::c_char,
    pub symnamefunc: *mut ::std::os::raw::c_char,
    pub plugins: *mut RList,
    pub handlers: *mut RList,
    pub ignore_version: bool,
}
#[test]
fn bindgen_test_layout_r_lib_t() {
    assert_eq!(
        ::std::mem::size_of::<r_lib_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_lib_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_lib_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_lib_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_t>())).symname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_t),
            "::",
            stringify!(symname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_t>())).symnamefunc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_t),
            "::",
            stringify!(symnamefunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_t>())).plugins as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_t>())).handlers as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_t),
            "::",
            stringify!(handlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lib_t>())).ignore_version as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lib_t),
            "::",
            stringify!(ignore_version)
        )
    );
}
pub type RLib = r_lib_t;
extern "C" {
    pub fn r_lib_dl_open(libname: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_lib_dl_sym(
        handler: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_lib_dl_close(handler: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
pub type RLibCallback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut RLibPlugin,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn r_lib_new(
        symname: *const ::std::os::raw::c_char,
        symnamefunc: *const ::std::os::raw::c_char,
    ) -> *mut RLib;
}
extern "C" {
    pub fn r_lib_free(lib: *mut RLib);
}
extern "C" {
    pub fn r_lib_run_handler(
        lib: *mut RLib,
        plugin: *mut RLibPlugin,
        symbol: *mut RLibStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_lib_get_handler(lib: *mut RLib, type_: ::std::os::raw::c_int) -> *mut RLibHandler;
}
extern "C" {
    pub fn r_lib_open(lib: *mut RLib, file: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_lib_opendir(lib: *mut RLib, path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_lib_open_ptr(
        lib: *mut RLib,
        file: *const ::std::os::raw::c_char,
        handler: *mut ::std::os::raw::c_void,
        stru: *mut RLibStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_lib_path(libname: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_lib_list(lib: *mut RLib);
}
extern "C" {
    pub fn r_lib_add_handler(
        lib: *mut RLib,
        type_: ::std::os::raw::c_int,
        desc: *const ::std::os::raw::c_char,
        ct: RLibCallback,
        dt: RLibCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_lib_del_handler(lib: *mut RLib, type_: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_lib_close(
        lib: *mut RLib,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_lib_types_get(idx: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_lib_types_get_i(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pu_kv {
    pub key: *mut ::std::os::raw::c_void,
    pub value: ::std::os::raw::c_ulonglong,
    pub key_len: ::std::os::raw::c_uint,
    pub value_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ht_pu_kv() {
    assert_eq!(
        ::std::mem::size_of::<ht_pu_kv>(),
        24usize,
        concat!("Size of: ", stringify!(ht_pu_kv))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pu_kv>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pu_kv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_kv>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_kv),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_kv>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_kv),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_kv>())).key_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_kv),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_kv>())).value_len as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_kv),
            "::",
            stringify!(value_len)
        )
    );
}
pub type HtPUKv = ht_pu_kv;
pub type HtPUKvFreeFunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut HtPUKv)>;
pub type HtPUDupKey = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type HtPUDupValue = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong,
>;
pub type HtPUCalcSizeK = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type HtPUCalcSizeV = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint,
>;
pub type HtPUHashFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
pub type HtPUListComparator = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type HtPUForeachCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pu_bucket_t {
    pub arr: *mut HtPUKv,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ht_pu_bucket_t() {
    assert_eq!(
        ::std::mem::size_of::<ht_pu_bucket_t>(),
        16usize,
        concat!("Size of: ", stringify!(ht_pu_bucket_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pu_bucket_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pu_bucket_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_bucket_t>())).arr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_bucket_t),
            "::",
            stringify!(arr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_bucket_t>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_bucket_t),
            "::",
            stringify!(count)
        )
    );
}
pub type HtPUBucket = ht_pu_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pu_options_t {
    pub cmp: HtPUListComparator,
    pub hashfn: HtPUHashFunction,
    pub dupkey: HtPUDupKey,
    pub dupvalue: HtPUDupValue,
    pub calcsizeK: HtPUCalcSizeK,
    pub calcsizeV: HtPUCalcSizeV,
    pub freefn: HtPUKvFreeFunc,
    pub elem_size: size_t,
}
#[test]
fn bindgen_test_layout_ht_pu_options_t() {
    assert_eq!(
        ::std::mem::size_of::<ht_pu_options_t>(),
        64usize,
        concat!("Size of: ", stringify!(ht_pu_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pu_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pu_options_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_options_t>())).cmp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_options_t),
            "::",
            stringify!(cmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_options_t>())).hashfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_options_t),
            "::",
            stringify!(hashfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_options_t>())).dupkey as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_options_t),
            "::",
            stringify!(dupkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_options_t>())).dupvalue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_options_t),
            "::",
            stringify!(dupvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_options_t>())).calcsizeK as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_options_t),
            "::",
            stringify!(calcsizeK)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_options_t>())).calcsizeV as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_options_t),
            "::",
            stringify!(calcsizeV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_options_t>())).freefn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_options_t),
            "::",
            stringify!(freefn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_options_t>())).elem_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_options_t),
            "::",
            stringify!(elem_size)
        )
    );
}
pub type HtPUOptions = ht_pu_options_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ht_pu_t {
    pub size: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_uint,
    pub table: *mut HtPUBucket,
    pub prime_idx: ::std::os::raw::c_uint,
    pub opt: HtPUOptions,
}
#[test]
fn bindgen_test_layout_ht_pu_t() {
    assert_eq!(
        ::std::mem::size_of::<ht_pu_t>(),
        88usize,
        concat!("Size of: ", stringify!(ht_pu_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ht_pu_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ht_pu_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_t>())).count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_t>())).table as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_t),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_t>())).prime_idx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_t),
            "::",
            stringify!(prime_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ht_pu_t>())).opt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ht_pu_t),
            "::",
            stringify!(opt)
        )
    );
}
pub type HtPU = ht_pu_t;
extern "C" {
    pub fn ht_pu_new_opt(opt: *mut HtPUOptions) -> *mut HtPU;
}
extern "C" {
    pub fn ht_pu_free(ht: *mut HtPU);
}
extern "C" {
    pub fn ht_pu_insert(
        ht: *mut HtPU,
        key: *const ::std::os::raw::c_void,
        value: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn ht_pu_update(
        ht: *mut HtPU,
        key: *const ::std::os::raw::c_void,
        value: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn ht_pu_update_key(
        ht: *mut HtPU,
        old_key: *const ::std::os::raw::c_void,
        new_key: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn ht_pu_delete(ht: *mut HtPU, key: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn ht_pu_find(
        ht: *mut HtPU,
        key: *const ::std::os::raw::c_void,
        found: *mut bool,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn ht_pu_foreach(ht: *mut HtPU, cb: HtPUForeachCallback, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ht_pu_find_kv(
        ht: *mut HtPU,
        key: *const ::std::os::raw::c_void,
        found: *mut bool,
    ) -> *mut HtPUKv;
}
extern "C" {
    pub fn ht_pu_insert_kv(ht: *mut HtPU, kv: *mut HtPUKv, update: bool) -> bool;
}
extern "C" {
    pub fn ht_pu_new0() -> *mut HtPU;
}
pub type RBin = r_bin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfInfoHeader {
    pub total_length: ::std::os::raw::c_uint,
    pub version: ::std::os::raw::c_ushort,
    pub plen: ::std::os::raw::c_uint,
    pub mininstlen: ::std::os::raw::c_uchar,
    pub is_stmt: ::std::os::raw::c_uchar,
    pub line_base: ::std::os::raw::c_char,
    pub line_range: ::std::os::raw::c_uchar,
    pub opcode_base: ::std::os::raw::c_uchar,
    pub oplentable: [::std::os::raw::c_uint; 12usize],
    pub incdirs: *mut *const ::std::os::raw::c_char,
    pub file: [*const ::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_RBinDwarfInfoHeader() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfInfoHeader>(),
        1104usize,
        concat!("Size of: ", stringify!(RBinDwarfInfoHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfInfoHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfInfoHeader))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).total_length as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(total_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).plen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(plen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).mininstlen as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(mininstlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).is_stmt as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(is_stmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).line_base as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(line_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).line_range as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(line_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).opcode_base as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(opcode_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).oplentable as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(oplentable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).incdirs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(incdirs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfInfoHeader>())).file as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfInfoHeader),
            "::",
            stringify!(file)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfState {
    pub address: ::std::os::raw::c_ulonglong,
    pub file: ::std::os::raw::c_uint,
    pub line: ::std::os::raw::c_uint,
    pub column: ::std::os::raw::c_uint,
    pub is_stmt: ::std::os::raw::c_int,
    pub basic_block: ::std::os::raw::c_int,
    pub end_sequence: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RBinDwarfState() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfState>(),
        32usize,
        concat!("Size of: ", stringify!(RBinDwarfState))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfState>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfState>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfState),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfState>())).file as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfState),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfState>())).line as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfState),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfState>())).column as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfState),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfState>())).is_stmt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfState),
            "::",
            stringify!(is_stmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfState>())).basic_block as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfState),
            "::",
            stringify!(basic_block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfState>())).end_sequence as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfState),
            "::",
            stringify!(end_sequence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfRow {
    pub address: ::std::os::raw::c_ulonglong,
    pub file: *mut ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_uint,
    pub column: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RBinDwarfRow() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfRow>(),
        24usize,
        concat!("Size of: ", stringify!(RBinDwarfRow))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfRow>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfRow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfRow>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfRow),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfRow>())).file as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfRow),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfRow>())).line as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfRow),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfRow>())).column as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfRow),
            "::",
            stringify!(column)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union section_offset {
    pub offset32: ::std::os::raw::c_uint,
    pub offset64: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_section_offset() {
    assert_eq!(
        ::std::mem::size_of::<section_offset>(),
        8usize,
        concat!("Size of: ", stringify!(section_offset))
    );
    assert_eq!(
        ::std::mem::align_of::<section_offset>(),
        8usize,
        concat!("Alignment of ", stringify!(section_offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<section_offset>())).offset32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(section_offset),
            "::",
            stringify!(offset32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<section_offset>())).offset64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(section_offset),
            "::",
            stringify!(offset64)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RBinDwarfTypeUnitHeader {
    pub unit_length: ::std::os::raw::c_ulonglong,
    pub version: ::std::os::raw::c_ushort,
    pub debug_abbrev_offset: section_offset,
    pub address_size: ::std::os::raw::c_uchar,
    pub type_signature: ::std::os::raw::c_ulonglong,
    pub type_offset: section_offset,
}
#[test]
fn bindgen_test_layout_RBinDwarfTypeUnitHeader() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfTypeUnitHeader>(),
        48usize,
        concat!("Size of: ", stringify!(RBinDwarfTypeUnitHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfTypeUnitHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfTypeUnitHeader))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfTypeUnitHeader>())).unit_length as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfTypeUnitHeader),
            "::",
            stringify!(unit_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfTypeUnitHeader>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfTypeUnitHeader),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfTypeUnitHeader>())).debug_abbrev_offset as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfTypeUnitHeader),
            "::",
            stringify!(debug_abbrev_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfTypeUnitHeader>())).address_size as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfTypeUnitHeader),
            "::",
            stringify!(address_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfTypeUnitHeader>())).type_signature as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfTypeUnitHeader),
            "::",
            stringify!(type_signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfTypeUnitHeader>())).type_offset as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfTypeUnitHeader),
            "::",
            stringify!(type_offset)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RBinDwarfAddressRangeTable {
    pub unit_length: ::std::os::raw::c_ulonglong,
    pub version: ::std::os::raw::c_ushort,
    pub debug_info_offset: section_offset,
    pub address_size: ::std::os::raw::c_uchar,
    pub segment_size: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_RBinDwarfAddressRangeTable() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfAddressRangeTable>(),
        32usize,
        concat!("Size of: ", stringify!(RBinDwarfAddressRangeTable))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfAddressRangeTable>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfAddressRangeTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfAddressRangeTable>())).unit_length as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAddressRangeTable),
            "::",
            stringify!(unit_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfAddressRangeTable>())).version as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAddressRangeTable),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfAddressRangeTable>())).debug_info_offset as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAddressRangeTable),
            "::",
            stringify!(debug_info_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfAddressRangeTable>())).address_size as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAddressRangeTable),
            "::",
            stringify!(address_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfAddressRangeTable>())).segment_size as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAddressRangeTable),
            "::",
            stringify!(segment_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfAttrDef {
    pub attr_name: ::std::os::raw::c_ulonglong,
    pub attr_form: ::std::os::raw::c_ulonglong,
    pub special: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_RBinDwarfAttrDef() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfAttrDef>(),
        24usize,
        concat!("Size of: ", stringify!(RBinDwarfAttrDef))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfAttrDef>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfAttrDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfAttrDef>())).attr_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAttrDef),
            "::",
            stringify!(attr_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfAttrDef>())).attr_form as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAttrDef),
            "::",
            stringify!(attr_form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfAttrDef>())).special as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAttrDef),
            "::",
            stringify!(special)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfBlock {
    pub length: ::std::os::raw::c_ulonglong,
    pub data: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_RBinDwarfBlock() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfBlock>(),
        16usize,
        concat!("Size of: ", stringify!(RBinDwarfBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfBlock>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfBlock),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfBlock>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfBlock),
            "::",
            stringify!(data)
        )
    );
}
pub const RBinDwarfAttrKind_DW_AT_KIND_ADDRESS: RBinDwarfAttrKind = 0;
pub const RBinDwarfAttrKind_DW_AT_KIND_BLOCK: RBinDwarfAttrKind = 1;
pub const RBinDwarfAttrKind_DW_AT_KIND_CONSTANT: RBinDwarfAttrKind = 2;
pub const RBinDwarfAttrKind_DW_AT_KIND_EXPRLOC: RBinDwarfAttrKind = 3;
pub const RBinDwarfAttrKind_DW_AT_KIND_FLAG: RBinDwarfAttrKind = 4;
pub const RBinDwarfAttrKind_DW_AT_KIND_LINEPTR: RBinDwarfAttrKind = 5;
pub const RBinDwarfAttrKind_DW_AT_KIND_LOCLISTPTR: RBinDwarfAttrKind = 6;
pub const RBinDwarfAttrKind_DW_AT_KIND_MACPTR: RBinDwarfAttrKind = 7;
pub const RBinDwarfAttrKind_DW_AT_KIND_RANGELISTPTR: RBinDwarfAttrKind = 8;
pub const RBinDwarfAttrKind_DW_AT_KIND_REFERENCE: RBinDwarfAttrKind = 9;
pub const RBinDwarfAttrKind_DW_AT_KIND_STRING: RBinDwarfAttrKind = 10;
pub type RBinDwarfAttrKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dwarf_attr_kind {
    pub attr_name: ::std::os::raw::c_ulonglong,
    pub attr_form: ::std::os::raw::c_ulonglong,
    pub kind: RBinDwarfAttrKind,
    pub __bindgen_anon_1: dwarf_attr_kind__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dwarf_attr_kind__bindgen_ty_1 {
    pub address: ::std::os::raw::c_ulonglong,
    pub block: RBinDwarfBlock,
    pub uconstant: ::std::os::raw::c_ulonglong,
    pub sconstant: ::std::os::raw::c_longlong,
    pub flag: ::std::os::raw::c_uchar,
    pub reference: ::std::os::raw::c_ulonglong,
    pub string: dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1 {
    pub content: *const ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1>())).content
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(content)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1>())).offset
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(offset)
        )
    );
}
#[test]
fn bindgen_test_layout_dwarf_attr_kind__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<dwarf_attr_kind__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(dwarf_attr_kind__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<dwarf_attr_kind__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(dwarf_attr_kind__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dwarf_attr_kind__bindgen_ty_1>())).address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind__bindgen_ty_1),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dwarf_attr_kind__bindgen_ty_1>())).block as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind__bindgen_ty_1),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dwarf_attr_kind__bindgen_ty_1>())).uconstant as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind__bindgen_ty_1),
            "::",
            stringify!(uconstant)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dwarf_attr_kind__bindgen_ty_1>())).sconstant as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind__bindgen_ty_1),
            "::",
            stringify!(sconstant)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dwarf_attr_kind__bindgen_ty_1>())).flag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind__bindgen_ty_1),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dwarf_attr_kind__bindgen_ty_1>())).reference as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind__bindgen_ty_1),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dwarf_attr_kind__bindgen_ty_1>())).string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
}
#[test]
fn bindgen_test_layout_dwarf_attr_kind() {
    assert_eq!(
        ::std::mem::size_of::<dwarf_attr_kind>(),
        40usize,
        concat!("Size of: ", stringify!(dwarf_attr_kind))
    );
    assert_eq!(
        ::std::mem::align_of::<dwarf_attr_kind>(),
        8usize,
        concat!("Alignment of ", stringify!(dwarf_attr_kind))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dwarf_attr_kind>())).attr_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind),
            "::",
            stringify!(attr_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dwarf_attr_kind>())).attr_form as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind),
            "::",
            stringify!(attr_form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dwarf_attr_kind>())).kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dwarf_attr_kind),
            "::",
            stringify!(kind)
        )
    );
}
pub type RBinDwarfAttrValue = dwarf_attr_kind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfCompUnitHdr {
    pub length: ::std::os::raw::c_ulonglong,
    pub version: ::std::os::raw::c_ushort,
    pub abbrev_offset: ::std::os::raw::c_ulonglong,
    pub address_size: ::std::os::raw::c_uchar,
    pub unit_type: ::std::os::raw::c_uchar,
    pub dwo_id: ::std::os::raw::c_uchar,
    pub type_sig: ::std::os::raw::c_ulonglong,
    pub type_offset: ::std::os::raw::c_ulonglong,
    pub header_size: ::std::os::raw::c_ulonglong,
    pub unit_offset: ::std::os::raw::c_ulonglong,
    pub is_64bit: bool,
}
#[test]
fn bindgen_test_layout_RBinDwarfCompUnitHdr() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfCompUnitHdr>(),
        72usize,
        concat!("Size of: ", stringify!(RBinDwarfCompUnitHdr))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfCompUnitHdr>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfCompUnitHdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).abbrev_offset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(abbrev_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).address_size as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(address_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).unit_type as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(unit_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).dwo_id as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(dwo_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).type_sig as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(type_sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).type_offset as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(type_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).header_size as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(header_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).unit_offset as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(unit_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnitHdr>())).is_64bit as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnitHdr),
            "::",
            stringify!(is_64bit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfDie {
    pub tag: ::std::os::raw::c_ulonglong,
    pub abbrev_code: ::std::os::raw::c_ulonglong,
    pub count: size_t,
    pub capacity: size_t,
    pub offset: ::std::os::raw::c_ulonglong,
    pub has_children: bool,
    pub attr_values: *mut RBinDwarfAttrValue,
}
#[test]
fn bindgen_test_layout_RBinDwarfDie() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfDie>(),
        56usize,
        concat!("Size of: ", stringify!(RBinDwarfDie))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfDie>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfDie))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDie>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDie),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDie>())).abbrev_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDie),
            "::",
            stringify!(abbrev_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDie>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDie),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDie>())).capacity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDie),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDie>())).offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDie),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDie>())).has_children as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDie),
            "::",
            stringify!(has_children)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDie>())).attr_values as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDie),
            "::",
            stringify!(attr_values)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfCompUnit {
    pub hdr: RBinDwarfCompUnitHdr,
    pub offset: ::std::os::raw::c_ulonglong,
    pub count: size_t,
    pub capacity: size_t,
    pub dies: *mut RBinDwarfDie,
}
#[test]
fn bindgen_test_layout_RBinDwarfCompUnit() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfCompUnit>(),
        104usize,
        concat!("Size of: ", stringify!(RBinDwarfCompUnit))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfCompUnit>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfCompUnit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnit>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnit),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnit>())).offset as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnit),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnit>())).count as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnit),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnit>())).capacity as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnit),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfCompUnit>())).dies as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfCompUnit),
            "::",
            stringify!(dies)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfDebugInfo {
    pub count: size_t,
    pub capacity: size_t,
    pub comp_units: *mut RBinDwarfCompUnit,
    pub lookup_table: *mut HtUP,
}
#[test]
fn bindgen_test_layout_RBinDwarfDebugInfo() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfDebugInfo>(),
        32usize,
        concat!("Size of: ", stringify!(RBinDwarfDebugInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfDebugInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfDebugInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDebugInfo>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDebugInfo),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDebugInfo>())).capacity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDebugInfo),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDebugInfo>())).comp_units as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDebugInfo),
            "::",
            stringify!(comp_units)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDebugInfo>())).lookup_table as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDebugInfo),
            "::",
            stringify!(lookup_table)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfAbbrevDecl {
    pub code: ::std::os::raw::c_ulonglong,
    pub tag: ::std::os::raw::c_ulonglong,
    pub offset: ::std::os::raw::c_ulonglong,
    pub has_children: ::std::os::raw::c_uchar,
    pub count: size_t,
    pub capacity: size_t,
    pub defs: *mut RBinDwarfAttrDef,
}
#[test]
fn bindgen_test_layout_RBinDwarfAbbrevDecl() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfAbbrevDecl>(),
        56usize,
        concat!("Size of: ", stringify!(RBinDwarfAbbrevDecl))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfAbbrevDecl>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfAbbrevDecl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfAbbrevDecl>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAbbrevDecl),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfAbbrevDecl>())).tag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAbbrevDecl),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfAbbrevDecl>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAbbrevDecl),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfAbbrevDecl>())).has_children as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAbbrevDecl),
            "::",
            stringify!(has_children)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfAbbrevDecl>())).count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAbbrevDecl),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfAbbrevDecl>())).capacity as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAbbrevDecl),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfAbbrevDecl>())).defs as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfAbbrevDecl),
            "::",
            stringify!(defs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfDebugAbbrev {
    pub count: size_t,
    pub capacity: size_t,
    pub decls: *mut RBinDwarfAbbrevDecl,
}
#[test]
fn bindgen_test_layout_RBinDwarfDebugAbbrev() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfDebugAbbrev>(),
        24usize,
        concat!("Size of: ", stringify!(RBinDwarfDebugAbbrev))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfDebugAbbrev>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfDebugAbbrev))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDebugAbbrev>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDebugAbbrev),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDebugAbbrev>())).capacity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDebugAbbrev),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfDebugAbbrev>())).decls as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfDebugAbbrev),
            "::",
            stringify!(decls)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfSMRegisters {
    pub address: ::std::os::raw::c_ulonglong,
    pub op_index: ::std::os::raw::c_ulonglong,
    pub file: ::std::os::raw::c_ulonglong,
    pub line: ::std::os::raw::c_ulonglong,
    pub column: ::std::os::raw::c_ulonglong,
    pub is_stmt: ::std::os::raw::c_uchar,
    pub basic_block: ::std::os::raw::c_uchar,
    pub end_sequence: ::std::os::raw::c_uchar,
    pub prologue_end: ::std::os::raw::c_uchar,
    pub epilogue_begin: ::std::os::raw::c_uchar,
    pub isa: ::std::os::raw::c_ulonglong,
    pub discriminator: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_RBinDwarfSMRegisters() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfSMRegisters>(),
        64usize,
        concat!("Size of: ", stringify!(RBinDwarfSMRegisters))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfSMRegisters>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfSMRegisters))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).op_index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(op_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).file as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).line as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).column as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).is_stmt as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(is_stmt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).basic_block as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(basic_block)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).end_sequence as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(end_sequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).prologue_end as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(prologue_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).epilogue_begin as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(epilogue_begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).isa as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(isa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfSMRegisters>())).discriminator as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfSMRegisters),
            "::",
            stringify!(discriminator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_entry {
    pub name: *mut ::std::os::raw::c_char,
    pub id_idx: ::std::os::raw::c_uint,
    pub mod_time: ::std::os::raw::c_uint,
    pub file_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_file_entry() {
    assert_eq!(
        ::std::mem::size_of::<file_entry>(),
        24usize,
        concat!("Size of: ", stringify!(file_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<file_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(file_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_entry>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_entry>())).id_idx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_entry),
            "::",
            stringify!(id_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_entry>())).mod_time as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(file_entry),
            "::",
            stringify!(mod_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_entry>())).file_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_entry),
            "::",
            stringify!(file_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBinDwarfLineHeader {
    pub unit_length: ::std::os::raw::c_ulonglong,
    pub version: ::std::os::raw::c_ushort,
    pub header_length: ::std::os::raw::c_ulonglong,
    pub min_inst_len: ::std::os::raw::c_uchar,
    pub max_ops_per_inst: ::std::os::raw::c_uchar,
    pub default_is_stmt: ::std::os::raw::c_uchar,
    pub line_base: ::std::os::raw::c_int,
    pub line_range: ::std::os::raw::c_uchar,
    pub opcode_base: ::std::os::raw::c_uchar,
    pub address_size: ::std::os::raw::c_uchar,
    pub segment_selector_size: ::std::os::raw::c_uchar,
    pub is_64bit: bool,
    pub std_opcode_lengths: *mut ::std::os::raw::c_uchar,
    pub include_directories: *mut *mut ::std::os::raw::c_char,
    pub file_names: *mut file_entry,
    pub file_names_count: size_t,
}
#[test]
fn bindgen_test_layout_RBinDwarfLineHeader() {
    assert_eq!(
        ::std::mem::size_of::<RBinDwarfLineHeader>(),
        72usize,
        concat!("Size of: ", stringify!(RBinDwarfLineHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<RBinDwarfLineHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(RBinDwarfLineHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfLineHeader>())).unit_length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(unit_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfLineHeader>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfLineHeader>())).header_length as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(header_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfLineHeader>())).min_inst_len as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(min_inst_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfLineHeader>())).max_ops_per_inst as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(max_ops_per_inst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfLineHeader>())).default_is_stmt as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(default_is_stmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfLineHeader>())).line_base as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(line_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfLineHeader>())).line_range as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(line_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfLineHeader>())).opcode_base as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(opcode_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfLineHeader>())).address_size as *const _ as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(address_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfLineHeader>())).segment_selector_size as *const _
                as usize
        },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(segment_selector_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfLineHeader>())).is_64bit as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(is_64bit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfLineHeader>())).std_opcode_lengths as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(std_opcode_lengths)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfLineHeader>())).include_directories as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(include_directories)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBinDwarfLineHeader>())).file_names as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(file_names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RBinDwarfLineHeader>())).file_names_count as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RBinDwarfLineHeader),
            "::",
            stringify!(file_names_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_dwarf_loc_entry_t {
    pub start: ::std::os::raw::c_ulonglong,
    pub end: ::std::os::raw::c_ulonglong,
    pub expression: *mut RBinDwarfBlock,
}
#[test]
fn bindgen_test_layout_r_bin_dwarf_loc_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_dwarf_loc_entry_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_bin_dwarf_loc_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_dwarf_loc_entry_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_dwarf_loc_entry_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_dwarf_loc_entry_t>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_dwarf_loc_entry_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_dwarf_loc_entry_t>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_dwarf_loc_entry_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_bin_dwarf_loc_entry_t>())).expression as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_dwarf_loc_entry_t),
            "::",
            stringify!(expression)
        )
    );
}
pub type RBinDwarfLocRange = r_bin_dwarf_loc_entry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_dwarf_loc_list_t {
    pub list: *mut RList,
    pub offset: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_bin_dwarf_loc_list_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_dwarf_loc_list_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_bin_dwarf_loc_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_dwarf_loc_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_dwarf_loc_list_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_dwarf_loc_list_t>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_dwarf_loc_list_t),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_dwarf_loc_list_t>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_dwarf_loc_list_t),
            "::",
            stringify!(offset)
        )
    );
}
pub type RBinDwarfLocList = r_bin_dwarf_loc_list_t;
extern "C" {
    pub fn r_bin_dwarf_parse_aranges(a: *mut RBin, mode: ::std::os::raw::c_int) -> *mut RList;
}
extern "C" {
    pub fn r_bin_dwarf_parse_line(a: *mut RBin, mode: ::std::os::raw::c_int) -> *mut RList;
}
extern "C" {
    pub fn r_bin_dwarf_parse_abbrev(
        a: *mut RBin,
        mode: ::std::os::raw::c_int,
    ) -> *mut RBinDwarfDebugAbbrev;
}
extern "C" {
    pub fn r_bin_dwarf_parse_info(
        da: *mut RBinDwarfDebugAbbrev,
        a: *mut RBin,
        mode: ::std::os::raw::c_int,
    ) -> *mut RBinDwarfDebugInfo;
}
extern "C" {
    pub fn r_bin_dwarf_parse_loc(bin: *mut RBin, addr_size: ::std::os::raw::c_int) -> *mut HtUP;
}
extern "C" {
    pub fn r_bin_dwarf_print_loc(
        loc_table: *mut HtUP,
        addr_size: ::std::os::raw::c_int,
        print: PrintfCallback,
    );
}
extern "C" {
    pub fn r_bin_dwarf_free_loc(loc_table: *mut HtUP);
}
extern "C" {
    pub fn r_bin_dwarf_free_debug_info(inf: *mut RBinDwarfDebugInfo);
}
extern "C" {
    pub fn r_bin_dwarf_free_debug_abbrev(da: *mut RBinDwarfDebugAbbrev);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_PDB7_ROOT_STREAM {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_pdb_t {
    pub pdb_parse: ::std::option::Option<unsafe extern "C" fn(pdb: *mut r_pdb_t) -> bool>,
    pub finish_pdb_parse: ::std::option::Option<unsafe extern "C" fn(pdb: *mut r_pdb_t)>,
    pub print_types: ::std::option::Option<
        unsafe extern "C" fn(pdb: *const r_pdb_t, pj: *mut PJ, mode: ::std::os::raw::c_int),
    >,
    pub cb_printf: PrintfCallback,
    pub root_stream: *mut R_PDB7_ROOT_STREAM,
    pub stream_map: *mut ::std::os::raw::c_void,
    pub pdb_streams: *mut RList,
    pub pdb_streams2: *mut RList,
    pub buf: *mut RBuffer,
    pub print_gvars: ::std::option::Option<
        unsafe extern "C" fn(
            pdb: *mut r_pdb_t,
            img_base: ::std::os::raw::c_ulonglong,
            pj: *mut PJ,
            format: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout_r_pdb_t() {
    assert_eq!(
        ::std::mem::size_of::<r_pdb_t>(),
        80usize,
        concat!("Size of: ", stringify!(r_pdb_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_pdb_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_pdb_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pdb_t>())).pdb_parse as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pdb_t),
            "::",
            stringify!(pdb_parse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pdb_t>())).finish_pdb_parse as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pdb_t),
            "::",
            stringify!(finish_pdb_parse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pdb_t>())).print_types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pdb_t),
            "::",
            stringify!(print_types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pdb_t>())).cb_printf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pdb_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pdb_t>())).root_stream as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pdb_t),
            "::",
            stringify!(root_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pdb_t>())).stream_map as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pdb_t),
            "::",
            stringify!(stream_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pdb_t>())).pdb_streams as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pdb_t),
            "::",
            stringify!(pdb_streams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pdb_t>())).pdb_streams2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pdb_t),
            "::",
            stringify!(pdb_streams2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pdb_t>())).buf as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pdb_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_pdb_t>())).print_gvars as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_pdb_t),
            "::",
            stringify!(print_gvars)
        )
    );
}
pub type RPdb = r_pdb_t;
extern "C" {
    pub fn init_pdb_parser(pdb: *mut RPdb, filename: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn init_pdb_parser_with_buf(pdb: *mut RPdb, buf: *mut RBuffer) -> bool;
}
extern "C" {
    pub fn r_bin_version() -> *const ::std::os::raw::c_char;
}
pub const R_BIN_SYM_ENTRY: ::std::os::raw::c_uint = 0;
pub const R_BIN_SYM_INIT: ::std::os::raw::c_uint = 1;
pub const R_BIN_SYM_MAIN: ::std::os::raw::c_uint = 2;
pub const R_BIN_SYM_FINI: ::std::os::raw::c_uint = 3;
pub const R_BIN_SYM_LAST: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const R_BIN_NM_NONE: ::std::os::raw::c_int = 0;
pub const R_BIN_NM_JAVA: ::std::os::raw::c_int = 1;
pub const R_BIN_NM_C: ::std::os::raw::c_int = 2;
pub const R_BIN_NM_GO: ::std::os::raw::c_int = 4;
pub const R_BIN_NM_CXX: ::std::os::raw::c_int = 8;
pub const R_BIN_NM_OBJC: ::std::os::raw::c_int = 16;
pub const R_BIN_NM_SWIFT: ::std::os::raw::c_int = 32;
pub const R_BIN_NM_DLANG: ::std::os::raw::c_int = 64;
pub const R_BIN_NM_MSVC: ::std::os::raw::c_int = 128;
pub const R_BIN_NM_RUST: ::std::os::raw::c_int = 256;
pub const R_BIN_NM_KOTLIN: ::std::os::raw::c_int = 512;
pub const R_BIN_NM_BLOCKS: ::std::os::raw::c_int = -2147483648;
pub const R_BIN_NM_ANY: ::std::os::raw::c_int = -1;
pub type _bindgen_ty_13 = ::std::os::raw::c_int;
pub const R_STRING_TYPE_DETECT: ::std::os::raw::c_uint = 63;
pub const R_STRING_TYPE_ASCII: ::std::os::raw::c_uint = 97;
pub const R_STRING_TYPE_UTF8: ::std::os::raw::c_uint = 117;
pub const R_STRING_TYPE_WIDE: ::std::os::raw::c_uint = 119;
pub const R_STRING_TYPE_WIDE32: ::std::os::raw::c_uint = 87;
pub const R_STRING_TYPE_BASE64: ::std::os::raw::c_uint = 98;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const R_BIN_CLASS_PRIVATE: ::std::os::raw::c_uint = 0;
pub const R_BIN_CLASS_PUBLIC: ::std::os::raw::c_uint = 1;
pub const R_BIN_CLASS_FRIENDLY: ::std::os::raw::c_uint = 2;
pub const R_BIN_CLASS_PROTECTED: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const R_BIN_RELOC_8: ::std::os::raw::c_uint = 8;
pub const R_BIN_RELOC_16: ::std::os::raw::c_uint = 16;
pub const R_BIN_RELOC_32: ::std::os::raw::c_uint = 32;
pub const R_BIN_RELOC_64: ::std::os::raw::c_uint = 64;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const R_BIN_TYPE_DEFAULT: ::std::os::raw::c_uint = 0;
pub const R_BIN_TYPE_CORE: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_addr_t {
    pub vaddr: ::std::os::raw::c_ulonglong,
    pub paddr: ::std::os::raw::c_ulonglong,
    pub hvaddr: ::std::os::raw::c_ulonglong,
    pub hpaddr: ::std::os::raw::c_ulonglong,
    pub type_: ::std::os::raw::c_int,
    pub bits: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_bin_addr_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_addr_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_bin_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_addr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_addr_t>())).vaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_addr_t),
            "::",
            stringify!(vaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_addr_t>())).paddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_addr_t),
            "::",
            stringify!(paddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_addr_t>())).hvaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_addr_t),
            "::",
            stringify!(hvaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_addr_t>())).hpaddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_addr_t),
            "::",
            stringify!(hpaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_addr_t>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_addr_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_addr_t>())).bits as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_addr_t),
            "::",
            stringify!(bits)
        )
    );
}
pub type RBinAddr = r_bin_addr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_hash_t {
    pub type_: *const ::std::os::raw::c_char,
    pub addr: ::std::os::raw::c_ulonglong,
    pub len: ::std::os::raw::c_int,
    pub from: ::std::os::raw::c_ulonglong,
    pub to: ::std::os::raw::c_ulonglong,
    pub buf: [::std::os::raw::c_uchar; 32usize],
    pub cmd: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_bin_hash_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_hash_t>(),
        80usize,
        concat!("Size of: ", stringify!(r_bin_hash_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_hash_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_hash_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_hash_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_hash_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_hash_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_hash_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_hash_t>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_hash_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_hash_t>())).from as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_hash_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_hash_t>())).to as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_hash_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_hash_t>())).buf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_hash_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_hash_t>())).cmd as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_hash_t),
            "::",
            stringify!(cmd)
        )
    );
}
pub type RBinHash = r_bin_hash_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_file_hash_t {
    pub type_: *const ::std::os::raw::c_char,
    pub hex: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_bin_file_hash_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_file_hash_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_bin_file_hash_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_file_hash_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_file_hash_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_hash_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_hash_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_hash_t>())).hex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_hash_t),
            "::",
            stringify!(hex)
        )
    );
}
pub type RBinFileHash = r_bin_file_hash_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_info_t {
    pub file: *mut ::std::os::raw::c_char,
    pub type_: *mut ::std::os::raw::c_char,
    pub bclass: *mut ::std::os::raw::c_char,
    pub rclass: *mut ::std::os::raw::c_char,
    pub arch: *mut ::std::os::raw::c_char,
    pub cpu: *mut ::std::os::raw::c_char,
    pub machine: *mut ::std::os::raw::c_char,
    pub head_flag: *mut ::std::os::raw::c_char,
    pub features: *mut ::std::os::raw::c_char,
    pub os: *mut ::std::os::raw::c_char,
    pub subsystem: *mut ::std::os::raw::c_char,
    pub rpath: *mut ::std::os::raw::c_char,
    pub guid: *mut ::std::os::raw::c_char,
    pub debug_file_name: *mut ::std::os::raw::c_char,
    pub lang: *const ::std::os::raw::c_char,
    pub default_cc: *mut ::std::os::raw::c_char,
    pub file_hashes: *mut RList,
    pub bits: ::std::os::raw::c_int,
    pub has_va: ::std::os::raw::c_int,
    pub has_pi: ::std::os::raw::c_int,
    pub has_canary: ::std::os::raw::c_int,
    pub has_retguard: ::std::os::raw::c_int,
    pub has_sanitizers: ::std::os::raw::c_int,
    pub has_crypto: ::std::os::raw::c_int,
    pub has_nx: ::std::os::raw::c_int,
    pub big_endian: ::std::os::raw::c_int,
    pub has_lit: bool,
    pub actual_checksum: *mut ::std::os::raw::c_char,
    pub claimed_checksum: *mut ::std::os::raw::c_char,
    pub pe_overlay: ::std::os::raw::c_int,
    pub signature: bool,
    pub dbg_info: ::std::os::raw::c_ulonglong,
    pub sum: [RBinHash; 3usize],
    pub baddr: ::std::os::raw::c_ulonglong,
    pub intrp: *mut ::std::os::raw::c_char,
    pub compiler: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_bin_info_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_info_t>(),
        472usize,
        concat!("Size of: ", stringify!(r_bin_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).file as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).bclass as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(bclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).rclass as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(rclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).arch as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).cpu as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).machine as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).head_flag as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(head_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).features as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).os as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).subsystem as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(subsystem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).rpath as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(rpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).guid as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(guid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).debug_file_name as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(debug_file_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).lang as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).default_cc as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(default_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).file_hashes as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(file_hashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).bits as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).has_va as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(has_va)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).has_pi as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(has_pi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).has_canary as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(has_canary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).has_retguard as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(has_retguard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).has_sanitizers as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(has_sanitizers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).has_crypto as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(has_crypto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).has_nx as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(has_nx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).big_endian as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(big_endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).has_lit as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(has_lit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).actual_checksum as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(actual_checksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).claimed_checksum as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(claimed_checksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).pe_overlay as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(pe_overlay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).signature as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).dbg_info as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(dbg_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).sum as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(sum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).baddr as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(baddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).intrp as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(intrp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_info_t>())).compiler as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_info_t),
            "::",
            stringify!(compiler)
        )
    );
}
pub type RBinInfo = r_bin_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_object_t {
    pub baddr: ::std::os::raw::c_ulonglong,
    pub baddr_shift: ::std::os::raw::c_longlong,
    pub loadaddr: ::std::os::raw::c_ulonglong,
    pub boffset: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_ulonglong,
    pub obj_size: ::std::os::raw::c_ulonglong,
    pub sections: *mut RList,
    pub imports: *mut RList,
    pub symbols: *mut RList,
    pub entries: *mut RList,
    pub fields: *mut RList,
    pub libs: *mut RList,
    pub relocs: *mut RBNode,
    pub strings: *mut RList,
    pub classes: *mut RList,
    pub classes_ht: *mut HtPP,
    pub methods_ht: *mut HtPP,
    pub lines: *mut RList,
    pub strings_db: *mut HtUP,
    pub mem: *mut RList,
    pub maps: *mut RList,
    pub regstate: *mut ::std::os::raw::c_char,
    pub info: *mut RBinInfo,
    pub binsym: [*mut RBinAddr; 4usize],
    pub plugin: *mut r_bin_plugin_t,
    pub lang: ::std::os::raw::c_int,
    pub kv: *mut Sdb,
    pub addr2klassmethod: *mut HtUP,
    pub bin_obj: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_bin_object_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_object_t>(),
        256usize,
        concat!("Size of: ", stringify!(r_bin_object_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_object_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_object_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).baddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(baddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).baddr_shift as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(baddr_shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).loadaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(loadaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).boffset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(boffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).obj_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(obj_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).sections as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(sections)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).imports as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(imports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).symbols as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(symbols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).entries as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).fields as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).libs as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(libs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).relocs as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(relocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).strings as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).classes as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).classes_ht as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(classes_ht)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).methods_ht as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(methods_ht)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).lines as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).strings_db as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(strings_db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).mem as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).maps as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(maps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).regstate as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(regstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).info as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).binsym as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(binsym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).plugin as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(plugin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).lang as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).kv as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(kv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).addr2klassmethod as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(addr2klassmethod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_object_t>())).bin_obj as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_object_t),
            "::",
            stringify!(bin_obj)
        )
    );
}
pub type RBinObject = r_bin_object_t;
#[doc = " XX curplugin == o->plugin"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_file_t {
    pub file: *mut ::std::os::raw::c_char,
    pub fd: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub rawstr: ::std::os::raw::c_int,
    pub strmode: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_uint,
    pub buf: *mut RBuffer,
    pub offset: ::std::os::raw::c_ulonglong,
    pub o: *mut RBinObject,
    pub xtr_obj: *mut ::std::os::raw::c_void,
    pub loadaddr: ::std::os::raw::c_ulonglong,
    pub minstrlen: ::std::os::raw::c_int,
    pub maxstrlen: ::std::os::raw::c_int,
    pub narch: ::std::os::raw::c_int,
    pub curxtr: *mut r_bin_xtr_plugin_t,
    pub xtr_data: *mut RList,
    pub sdb: *mut Sdb,
    pub sdb_info: *mut Sdb,
    pub sdb_addrinfo: *mut Sdb,
    pub rbin: *mut r_bin_t,
}
#[test]
fn bindgen_test_layout_r_bin_file_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_file_t>(),
        136usize,
        concat!("Size of: ", stringify!(r_bin_file_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_file_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_file_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).file as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).fd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).rawstr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(rawstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).strmode as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(strmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).buf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).offset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).o as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).xtr_obj as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(xtr_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).loadaddr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(loadaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).minstrlen as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(minstrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).maxstrlen as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(maxstrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).narch as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(narch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).curxtr as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(curxtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).xtr_data as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(xtr_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).sdb as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(sdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).sdb_info as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(sdb_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).sdb_addrinfo as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(sdb_addrinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_t>())).rbin as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_t),
            "::",
            stringify!(rbin)
        )
    );
}
#[doc = " XX curplugin == o->plugin"]
pub type RBinFile = r_bin_file_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_file_options_t {
    pub rawstr: ::std::os::raw::c_int,
    pub baddr: ::std::os::raw::c_ulonglong,
    pub laddr: ::std::os::raw::c_ulonglong,
    pub paddr: ::std::os::raw::c_ulonglong,
    pub plugname: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_bin_file_options_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_file_options_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_bin_file_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_file_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_file_options_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_options_t>())).rawstr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_options_t),
            "::",
            stringify!(rawstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_options_t>())).baddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_options_t),
            "::",
            stringify!(baddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_options_t>())).laddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_options_t),
            "::",
            stringify!(laddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_options_t>())).paddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_options_t),
            "::",
            stringify!(paddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_file_options_t>())).plugname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_file_options_t),
            "::",
            stringify!(plugname)
        )
    );
}
pub type RBinFileOptions = r_bin_file_options_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_t {
    pub file: *const ::std::os::raw::c_char,
    pub cur: *mut RBinFile,
    pub narch: ::std::os::raw::c_int,
    pub user: *mut ::std::os::raw::c_void,
    pub debase64: ::std::os::raw::c_int,
    pub minstrlen: ::std::os::raw::c_int,
    pub maxstrlen: ::std::os::raw::c_int,
    pub maxstrbuf: ::std::os::raw::c_ulonglong,
    pub rawstr: ::std::os::raw::c_int,
    pub sdb: *mut Sdb,
    pub ids: *mut RIDStorage,
    pub plugins: *mut RList,
    pub binxtrs: *mut RList,
    pub binldrs: *mut RList,
    pub binfiles: *mut RList,
    pub cb_printf: PrintfCallback,
    pub loadany: ::std::os::raw::c_int,
    pub iob: RIOBind,
    pub consb: RConsBind,
    pub force: *mut ::std::os::raw::c_char,
    pub want_dbginfo: bool,
    pub filter: ::std::os::raw::c_int,
    pub strfilter: ::std::os::raw::c_char,
    pub strpurge: *mut ::std::os::raw::c_char,
    pub srcdir: *mut ::std::os::raw::c_char,
    pub prefix: *mut ::std::os::raw::c_char,
    pub strenc: *mut ::std::os::raw::c_char,
    pub filter_rules: ::std::os::raw::c_ulonglong,
    pub demanglercmd: bool,
    pub verbose: bool,
    pub use_xtr: bool,
    pub use_ldr: bool,
    pub constpool: RStrConstPool,
    pub is_reloc_patched: bool,
}
#[test]
fn bindgen_test_layout_r_bin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_t>(),
        528usize,
        concat!("Size of: ", stringify!(r_bin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).file as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).narch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(narch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).user as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).debase64 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(debase64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).minstrlen as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(minstrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).maxstrlen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(maxstrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).maxstrbuf as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(maxstrbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).rawstr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(rawstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).sdb as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(sdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).ids as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(ids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).plugins as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).binxtrs as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(binxtrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).binldrs as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(binldrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).binfiles as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(binfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).cb_printf as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).loadany as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(loadany)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).iob as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(iob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).consb as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(consb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).force as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(force)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).want_dbginfo as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(want_dbginfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).filter as *const _ as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).strfilter as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(strfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).strpurge as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(strpurge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).srcdir as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(srcdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).prefix as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).strenc as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(strenc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).filter_rules as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(filter_rules)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).demanglercmd as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(demanglercmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).verbose as *const _ as usize },
        505usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).use_xtr as *const _ as usize },
        506usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(use_xtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).use_ldr as *const _ as usize },
        507usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(use_ldr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).constpool as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(constpool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_t>())).is_reloc_patched as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_t),
            "::",
            stringify!(is_reloc_patched)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_xtr_metadata_t {
    pub arch: *mut ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
    pub libname: *mut ::std::os::raw::c_char,
    pub machine: *mut ::std::os::raw::c_char,
    pub type_: *mut ::std::os::raw::c_char,
    pub xtr_type: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_bin_xtr_metadata_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_xtr_metadata_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_bin_xtr_metadata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_xtr_metadata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_xtr_metadata_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_metadata_t>())).arch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_metadata_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_metadata_t>())).bits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_metadata_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_metadata_t>())).libname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_metadata_t),
            "::",
            stringify!(libname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_metadata_t>())).machine as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_metadata_t),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_metadata_t>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_metadata_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_metadata_t>())).xtr_type as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_metadata_t),
            "::",
            stringify!(xtr_type)
        )
    );
}
pub type RBinXtrMetadata = r_bin_xtr_metadata_t;
pub type FREE_XTR = ::std::option::Option<
    unsafe extern "C" fn(xtr_obj: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_xtr_extract_t {
    pub file: *mut ::std::os::raw::c_char,
    pub buf: *mut RBuffer,
    pub size: ::std::os::raw::c_ulonglong,
    pub offset: ::std::os::raw::c_ulonglong,
    pub baddr: ::std::os::raw::c_ulonglong,
    pub laddr: ::std::os::raw::c_ulonglong,
    pub file_count: ::std::os::raw::c_int,
    pub loaded: bool,
    pub metadata: *mut RBinXtrMetadata,
}
#[test]
fn bindgen_test_layout_r_bin_xtr_extract_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_xtr_extract_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_bin_xtr_extract_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_xtr_extract_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_xtr_extract_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_extract_t>())).file as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_extract_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_extract_t>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_extract_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_extract_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_extract_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_extract_t>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_extract_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_extract_t>())).baddr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_extract_t),
            "::",
            stringify!(baddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_extract_t>())).laddr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_extract_t),
            "::",
            stringify!(laddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_extract_t>())).file_count as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_extract_t),
            "::",
            stringify!(file_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_extract_t>())).loaded as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_extract_t),
            "::",
            stringify!(loaded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_extract_t>())).metadata as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_extract_t),
            "::",
            stringify!(metadata)
        )
    );
}
pub type RBinXtrData = r_bin_xtr_extract_t;
extern "C" {
    pub fn r_bin_xtrdata_new(
        buf: *mut RBuffer,
        offset: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
        file_count: ::std::os::raw::c_uint,
        metadata: *mut RBinXtrMetadata,
    ) -> *mut RBinXtrData;
}
extern "C" {
    pub fn r_bin_xtrdata_free(data: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_xtr_plugin_t {
    pub name: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub license: *mut ::std::os::raw::c_char,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub fini: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub check_buffer:
        ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile, buf: *mut RBuffer) -> bool>,
    pub extract_from_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            bin: *mut RBin,
            buf: *const ::std::os::raw::c_uchar,
            size: ::std::os::raw::c_ulonglong,
            idx: ::std::os::raw::c_int,
        ) -> *mut RBinXtrData,
    >,
    pub extract_from_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            bin: *mut RBin,
            buf: *mut RBuffer,
            idx: ::std::os::raw::c_int,
        ) -> *mut RBinXtrData,
    >,
    pub extractall_from_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            bin: *mut RBin,
            buf: *const ::std::os::raw::c_uchar,
            size: ::std::os::raw::c_ulonglong,
        ) -> *mut RList,
    >,
    pub extractall_from_buffer: ::std::option::Option<
        unsafe extern "C" fn(bin: *mut RBin, buf: *mut RBuffer) -> *mut RList,
    >,
    pub extract: ::std::option::Option<
        unsafe extern "C" fn(bin: *mut RBin, idx: ::std::os::raw::c_int) -> *mut RBinXtrData,
    >,
    pub extractall: ::std::option::Option<unsafe extern "C" fn(bin: *mut RBin) -> *mut RList>,
    pub load: ::std::option::Option<unsafe extern "C" fn(bin: *mut RBin) -> bool>,
    pub size: ::std::option::Option<unsafe extern "C" fn(bin: *mut RBin) -> ::std::os::raw::c_int>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(bin: *mut RBin)>,
    pub free_xtr: ::std::option::Option<unsafe extern "C" fn(xtr_obj: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_r_bin_xtr_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_xtr_plugin_t>(),
        128usize,
        concat!("Size of: ", stringify!(r_bin_xtr_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_xtr_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_xtr_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).license as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).init as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).fini as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).check_buffer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(check_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).extract_from_bytes as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(extract_from_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).extract_from_buffer as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(extract_from_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).extractall_from_bytes as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(extractall_from_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).extractall_from_buffer as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(extractall_from_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).extract as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(extract)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).extractall as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(extractall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).load as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).size as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).destroy as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_xtr_plugin_t>())).free_xtr as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_xtr_plugin_t),
            "::",
            stringify!(free_xtr)
        )
    );
}
pub type RBinXtrPlugin = r_bin_xtr_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_ldr_plugin_t {
    pub name: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub license: *mut ::std::os::raw::c_char,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub fini: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub load: ::std::option::Option<unsafe extern "C" fn(bin: *mut RBin) -> bool>,
}
#[test]
fn bindgen_test_layout_r_bin_ldr_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_ldr_plugin_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_bin_ldr_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_ldr_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_ldr_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_ldr_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_ldr_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_ldr_plugin_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_ldr_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_ldr_plugin_t>())).license as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_ldr_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_ldr_plugin_t>())).init as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_ldr_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_ldr_plugin_t>())).fini as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_ldr_plugin_t),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_ldr_plugin_t>())).load as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_ldr_plugin_t),
            "::",
            stringify!(load)
        )
    );
}
pub type RBinLdrPlugin = r_bin_ldr_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_arch_options_t {
    pub arch: *const ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_bin_arch_options_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_arch_options_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_bin_arch_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_arch_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_arch_options_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_arch_options_t>())).arch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_arch_options_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_arch_options_t>())).bits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_arch_options_t),
            "::",
            stringify!(bits)
        )
    );
}
pub type RBinArchOptions = r_bin_arch_options_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_trycatch_t {
    pub source: ::std::os::raw::c_ulonglong,
    pub from: ::std::os::raw::c_ulonglong,
    pub to: ::std::os::raw::c_ulonglong,
    pub handler: ::std::os::raw::c_ulonglong,
    pub filter: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_bin_trycatch_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_trycatch_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_bin_trycatch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_trycatch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_trycatch_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_trycatch_t>())).source as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_trycatch_t),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_trycatch_t>())).from as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_trycatch_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_trycatch_t>())).to as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_trycatch_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_trycatch_t>())).handler as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_trycatch_t),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_trycatch_t>())).filter as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_trycatch_t),
            "::",
            stringify!(filter)
        )
    );
}
pub type RBinTrycatch = r_bin_trycatch_t;
extern "C" {
    pub fn r_bin_trycatch_new(
        source: ::std::os::raw::c_ulonglong,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        handler: ::std::os::raw::c_ulonglong,
        filter: ::std::os::raw::c_ulonglong,
    ) -> *mut RBinTrycatch;
}
extern "C" {
    pub fn r_bin_trycatch_free(tc: *mut RBinTrycatch);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_plugin_t {
    pub name: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub author: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub license: *mut ::std::os::raw::c_char,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub fini: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub get_sdb: ::std::option::Option<unsafe extern "C" fn(obj: *mut RBinFile) -> *mut Sdb>,
    pub load_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            bf: *mut RBinFile,
            bin_obj: *mut *mut ::std::os::raw::c_void,
            buf: *mut RBuffer,
            loadaddr: ::std::os::raw::c_ulonglong,
            sdb: *mut Sdb,
        ) -> bool,
    >,
    pub size: ::std::option::Option<
        unsafe extern "C" fn(bin: *mut RBinFile) -> ::std::os::raw::c_ulonglong,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile)>,
    pub check_buffer:
        ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile, buf: *mut RBuffer) -> bool>,
    pub baddr: ::std::option::Option<
        unsafe extern "C" fn(bf: *mut RBinFile) -> ::std::os::raw::c_ulonglong,
    >,
    pub boffset: ::std::option::Option<
        unsafe extern "C" fn(bf: *mut RBinFile) -> ::std::os::raw::c_ulonglong,
    >,
    pub binsym: ::std::option::Option<
        unsafe extern "C" fn(bf: *mut RBinFile, num: ::std::os::raw::c_int) -> *mut RBinAddr,
    >,
    pub entries: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub sections: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub lines: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub symbols: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub imports: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub strings: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub info: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RBinInfo>,
    pub fields: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub libs: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub relocs: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub trycatch: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub classes: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub mem: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub patch_relocs: ::std::option::Option<unsafe extern "C" fn(bin: *mut RBin) -> *mut RList>,
    pub maps: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub hashes: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> *mut RList>,
    pub header: ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile)>,
    pub signature: ::std::option::Option<
        unsafe extern "C" fn(bf: *mut RBinFile, json: bool) -> *mut ::std::os::raw::c_char,
    >,
    pub demangle_type: ::std::option::Option<
        unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub dbginfo: *mut r_bin_dbginfo_t,
    pub write: *mut r_bin_write_t,
    pub get_offset: ::std::option::Option<
        unsafe extern "C" fn(
            bf: *mut RBinFile,
            type_: ::std::os::raw::c_int,
            idx: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(
            bf: *mut RBinFile,
            type_: ::std::os::raw::c_int,
            idx: ::std::os::raw::c_int,
            simplified: bool,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub get_vaddr: ::std::option::Option<
        unsafe extern "C" fn(
            bf: *mut RBinFile,
            baddr: ::std::os::raw::c_ulonglong,
            paddr: ::std::os::raw::c_ulonglong,
            vaddr: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_ulonglong,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            bin: *mut RBin,
            code: *const ::std::os::raw::c_uchar,
            codelen: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_uchar,
            datalen: ::std::os::raw::c_int,
            opt: *mut RBinArchOptions,
        ) -> *mut RBuffer,
    >,
    pub demangle: ::std::option::Option<
        unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >,
    pub regstate: ::std::option::Option<
        unsafe extern "C" fn(bf: *mut RBinFile) -> *mut ::std::os::raw::c_char,
    >,
    pub file_type:
        ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> ::std::os::raw::c_int>,
    pub minstrlen: ::std::os::raw::c_int,
    pub strfilter: ::std::os::raw::c_char,
    pub user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_bin_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_plugin_t>(),
        360usize,
        concat!("Size of: ", stringify!(r_bin_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).author as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).version as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).license as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).init as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).fini as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).get_sdb as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(get_sdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).load_buffer as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(load_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).destroy as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).check_buffer as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(check_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).baddr as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(baddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).boffset as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(boffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).binsym as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(binsym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).entries as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).sections as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(sections)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).lines as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).symbols as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(symbols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).imports as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(imports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).strings as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).info as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).fields as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).libs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(libs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).relocs as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(relocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).trycatch as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(trycatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).classes as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).mem as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).patch_relocs as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(patch_relocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).maps as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(maps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).hashes as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(hashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).header as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).signature as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).demangle_type as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(demangle_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).dbginfo as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(dbginfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).write as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).get_offset as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(get_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).get_name as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).get_vaddr as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(get_vaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).create as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).demangle as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(demangle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).regstate as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(regstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).file_type as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(file_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).minstrlen as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(minstrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).strfilter as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(strfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_plugin_t>())).user as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_plugin_t),
            "::",
            stringify!(user)
        )
    );
}
pub type RBinPlugin = r_bin_plugin_t;
pub type RBinSymbollCallback = ::std::option::Option<
    unsafe extern "C" fn(obj: *mut RBinObject, symbol: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_section_t {
    pub name: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_ulonglong,
    pub vsize: ::std::os::raw::c_ulonglong,
    pub vaddr: ::std::os::raw::c_ulonglong,
    pub paddr: ::std::os::raw::c_ulonglong,
    pub perm: ::std::os::raw::c_uint,
    pub arch: *const ::std::os::raw::c_char,
    pub format: *mut ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
    pub has_strings: bool,
    pub add: bool,
    pub is_data: bool,
    pub is_segment: bool,
}
#[test]
fn bindgen_test_layout_r_bin_section_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_section_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_bin_section_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_section_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_section_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).vsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(vsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).vaddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(vaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).paddr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(paddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).perm as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).arch as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).format as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).bits as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).has_strings as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(has_strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).add as *const _ as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).is_data as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(is_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_section_t>())).is_segment as *const _ as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_section_t),
            "::",
            stringify!(is_segment)
        )
    );
}
pub type RBinSection = r_bin_section_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_class_t {
    pub name: *mut ::std::os::raw::c_char,
    pub super_: *mut ::std::os::raw::c_char,
    pub visibility_str: *mut ::std::os::raw::c_char,
    pub index: ::std::os::raw::c_int,
    pub addr: ::std::os::raw::c_ulonglong,
    pub methods: *mut RList,
    pub fields: *mut RList,
    pub visibility: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_bin_class_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_class_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_bin_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_class_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_class_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_class_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_class_t>())).super_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_class_t),
            "::",
            stringify!(super_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_class_t>())).visibility_str as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_class_t),
            "::",
            stringify!(visibility_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_class_t>())).index as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_class_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_class_t>())).addr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_class_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_class_t>())).methods as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_class_t),
            "::",
            stringify!(methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_class_t>())).fields as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_class_t),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_class_t>())).visibility as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_class_t),
            "::",
            stringify!(visibility)
        )
    );
}
pub type RBinClass = r_bin_class_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_symbol_t {
    pub name: *mut ::std::os::raw::c_char,
    pub dname: *mut ::std::os::raw::c_char,
    pub libname: *mut ::std::os::raw::c_char,
    pub classname: *mut ::std::os::raw::c_char,
    pub forwarder: *const ::std::os::raw::c_char,
    pub bind: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub rtype: *const ::std::os::raw::c_char,
    pub is_imported: bool,
    pub visibility_str: *const ::std::os::raw::c_char,
    pub vaddr: ::std::os::raw::c_ulonglong,
    pub paddr: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_uint,
    pub ordinal: ::std::os::raw::c_uint,
    pub visibility: ::std::os::raw::c_uint,
    pub bits: ::std::os::raw::c_int,
    pub method_flags: ::std::os::raw::c_ulonglong,
    pub dup_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_bin_symbol_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_symbol_t>(),
        128usize,
        concat!("Size of: ", stringify!(r_bin_symbol_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_symbol_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_symbol_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).dname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(dname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).libname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(libname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).classname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(classname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).forwarder as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(forwarder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).bind as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(bind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).type_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).rtype as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(rtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).is_imported as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(is_imported)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).visibility_str as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(visibility_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).vaddr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(vaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).paddr as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(paddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).ordinal as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(ordinal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).visibility as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(visibility)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).bits as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).method_flags as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(method_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_symbol_t>())).dup_count as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_symbol_t),
            "::",
            stringify!(dup_count)
        )
    );
}
pub type RBinSymbol = r_bin_symbol_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_import_t {
    pub name: *mut ::std::os::raw::c_char,
    pub libname: *mut ::std::os::raw::c_char,
    pub bind: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub classname: *mut ::std::os::raw::c_char,
    pub descriptor: *mut ::std::os::raw::c_char,
    pub ordinal: ::std::os::raw::c_uint,
    pub visibility: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_bin_import_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_import_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_bin_import_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_import_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_import_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_import_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_import_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_import_t>())).libname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_import_t),
            "::",
            stringify!(libname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_import_t>())).bind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_import_t),
            "::",
            stringify!(bind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_import_t>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_import_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_import_t>())).classname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_import_t),
            "::",
            stringify!(classname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_import_t>())).descriptor as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_import_t),
            "::",
            stringify!(descriptor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_import_t>())).ordinal as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_import_t),
            "::",
            stringify!(ordinal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_import_t>())).visibility as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_import_t),
            "::",
            stringify!(visibility)
        )
    );
}
pub type RBinImport = r_bin_import_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_reloc_t {
    pub type_: ::std::os::raw::c_uchar,
    pub additive: ::std::os::raw::c_uchar,
    pub symbol: *mut RBinSymbol,
    pub import: *mut RBinImport,
    pub addend: ::std::os::raw::c_longlong,
    pub vaddr: ::std::os::raw::c_ulonglong,
    pub paddr: ::std::os::raw::c_ulonglong,
    pub visibility: ::std::os::raw::c_uint,
    pub is_ifunc: bool,
    pub vrb: RBNode,
}
#[test]
fn bindgen_test_layout_r_bin_reloc_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_reloc_t>(),
        88usize,
        concat!("Size of: ", stringify!(r_bin_reloc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_reloc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_reloc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_reloc_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_reloc_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_reloc_t>())).additive as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_reloc_t),
            "::",
            stringify!(additive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_reloc_t>())).symbol as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_reloc_t),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_reloc_t>())).import as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_reloc_t),
            "::",
            stringify!(import)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_reloc_t>())).addend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_reloc_t),
            "::",
            stringify!(addend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_reloc_t>())).vaddr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_reloc_t),
            "::",
            stringify!(vaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_reloc_t>())).paddr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_reloc_t),
            "::",
            stringify!(paddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_reloc_t>())).visibility as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_reloc_t),
            "::",
            stringify!(visibility)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_reloc_t>())).is_ifunc as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_reloc_t),
            "::",
            stringify!(is_ifunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_reloc_t>())).vrb as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_reloc_t),
            "::",
            stringify!(vrb)
        )
    );
}
pub type RBinReloc = r_bin_reloc_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_string_t {
    pub string: *mut ::std::os::raw::c_char,
    pub vaddr: ::std::os::raw::c_ulonglong,
    pub paddr: ::std::os::raw::c_ulonglong,
    pub ordinal: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub length: ::std::os::raw::c_uint,
    pub type_: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_bin_string_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_string_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_bin_string_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_string_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_string_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_string_t>())).string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_string_t),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_string_t>())).vaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_string_t),
            "::",
            stringify!(vaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_string_t>())).paddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_string_t),
            "::",
            stringify!(paddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_string_t>())).ordinal as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_string_t),
            "::",
            stringify!(ordinal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_string_t>())).size as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_string_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_string_t>())).length as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_string_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_string_t>())).type_ as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_string_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type RBinString = r_bin_string_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_field_t {
    pub vaddr: ::std::os::raw::c_ulonglong,
    pub paddr: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
    pub visibility: ::std::os::raw::c_uint,
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub format: *mut ::std::os::raw::c_char,
    pub format_named: bool,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_bin_field_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_field_t>(),
        80usize,
        concat!("Size of: ", stringify!(r_bin_field_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_field_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_field_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).vaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(vaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).paddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(paddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).offset as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).visibility as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(visibility)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).type_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).comment as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).format as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).format_named as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(format_named)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_field_t>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_field_t),
            "::",
            stringify!(flags)
        )
    );
}
pub type RBinField = r_bin_field_t;
extern "C" {
    pub fn r_bin_field_new(
        paddr: ::std::os::raw::c_ulonglong,
        vaddr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        comment: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        format_named: bool,
    ) -> *mut RBinField;
}
extern "C" {
    pub fn r_bin_field_free(arg1: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_mem_t {
    pub name: *mut ::std::os::raw::c_char,
    pub addr: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_int,
    pub perms: ::std::os::raw::c_int,
    pub mirrors: *mut RList,
}
#[test]
fn bindgen_test_layout_r_bin_mem_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_mem_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_bin_mem_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_mem_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_mem_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_mem_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_mem_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_mem_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_mem_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_mem_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_mem_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_mem_t>())).perms as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_mem_t),
            "::",
            stringify!(perms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_mem_t>())).mirrors as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_mem_t),
            "::",
            stringify!(mirrors)
        )
    );
}
pub type RBinMem = r_bin_mem_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_map_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub offset: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_int,
    pub perms: ::std::os::raw::c_int,
    pub file: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_bin_map_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_map_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_bin_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_map_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_map_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_map_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_map_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_map_t>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_map_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_map_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_map_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_map_t>())).perms as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_map_t),
            "::",
            stringify!(perms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_map_t>())).file as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_map_t),
            "::",
            stringify!(file)
        )
    );
}
pub type RBinMap = r_bin_map_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_dbginfo_t {
    pub get_line: ::std::option::Option<
        unsafe extern "C" fn(
            arch: *mut RBinFile,
            addr: ::std::os::raw::c_ulonglong,
            file: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            line: *mut ::std::os::raw::c_int,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_r_bin_dbginfo_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_dbginfo_t>(),
        8usize,
        concat!("Size of: ", stringify!(r_bin_dbginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_dbginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_dbginfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_dbginfo_t>())).get_line as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_dbginfo_t),
            "::",
            stringify!(get_line)
        )
    );
}
pub type RBinDbgInfo = r_bin_dbginfo_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_write_t {
    pub scn_resize: ::std::option::Option<
        unsafe extern "C" fn(
            bf: *mut RBinFile,
            name: *const ::std::os::raw::c_char,
            size: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_ulonglong,
    >,
    pub scn_perms: ::std::option::Option<
        unsafe extern "C" fn(
            bf: *mut RBinFile,
            name: *const ::std::os::raw::c_char,
            perms: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub rpath_del:
        ::std::option::Option<unsafe extern "C" fn(bf: *mut RBinFile) -> ::std::os::raw::c_int>,
    pub entry: ::std::option::Option<
        unsafe extern "C" fn(bf: *mut RBinFile, addr: ::std::os::raw::c_ulonglong) -> bool,
    >,
    pub addlib: ::std::option::Option<
        unsafe extern "C" fn(bf: *mut RBinFile, lib: *const ::std::os::raw::c_char) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_r_bin_write_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_write_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_bin_write_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_write_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_write_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_write_t>())).scn_resize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_write_t),
            "::",
            stringify!(scn_resize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_write_t>())).scn_perms as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_write_t),
            "::",
            stringify!(scn_perms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_write_t>())).rpath_del as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_write_t),
            "::",
            stringify!(rpath_del)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_write_t>())).entry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_write_t),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_write_t>())).addlib as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_write_t),
            "::",
            stringify!(addlib)
        )
    );
}
pub type RBinWrite = r_bin_write_t;
pub type RBinGetOffset = ::std::option::Option<
    unsafe extern "C" fn(
        bin: *mut RBin,
        type_: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type RBinGetName = ::std::option::Option<
    unsafe extern "C" fn(
        bin: *mut RBin,
        type_: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
        sd: bool,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RBinGetSections =
    ::std::option::Option<unsafe extern "C" fn(bin: *mut RBin) -> *mut RList>;
pub type RBinGetSectionAt = ::std::option::Option<
    unsafe extern "C" fn(bin: *mut RBin, addr: ::std::os::raw::c_ulonglong) -> *mut RBinSection,
>;
pub type RBinDemangle = ::std::option::Option<
    unsafe extern "C" fn(
        bf: *mut RBinFile,
        def: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
        vaddr: ::std::os::raw::c_ulonglong,
        libs: bool,
    ) -> *mut ::std::os::raw::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_bind_t {
    pub bin: *mut RBin,
    pub get_offset: RBinGetOffset,
    pub get_name: RBinGetName,
    pub get_sections: RBinGetSections,
    pub get_vsect_at: RBinGetSectionAt,
    pub demangle: RBinDemangle,
    pub visibility: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_bin_bind_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_bind_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_bin_bind_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_bind_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_bind_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_bind_t>())).bin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_bind_t),
            "::",
            stringify!(bin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_bind_t>())).get_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_bind_t),
            "::",
            stringify!(get_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_bind_t>())).get_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_bind_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_bind_t>())).get_sections as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_bind_t),
            "::",
            stringify!(get_sections)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_bind_t>())).get_vsect_at as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_bind_t),
            "::",
            stringify!(get_vsect_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_bind_t>())).demangle as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_bind_t),
            "::",
            stringify!(demangle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_bind_t>())).visibility as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_bind_t),
            "::",
            stringify!(visibility)
        )
    );
}
pub type RBinBind = r_bin_bind_t;
extern "C" {
    pub fn r_bin_section_new(name: *const ::std::os::raw::c_char) -> *mut RBinSection;
}
extern "C" {
    pub fn r_bin_section_free(bs: *mut RBinSection);
}
extern "C" {
    pub fn r_bin_info_free(rb: *mut RBinInfo);
}
extern "C" {
    pub fn r_bin_import_free(imp: *mut RBinImport);
}
extern "C" {
    pub fn r_bin_symbol_free(_sym: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_bin_symbol_new(
        name: *const ::std::os::raw::c_char,
        paddr: ::std::os::raw::c_ulonglong,
        vaddr: ::std::os::raw::c_ulonglong,
    ) -> *mut RBinSymbol;
}
extern "C" {
    pub fn r_bin_string_free(_str: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bin_options_t {
    pub pluginname: *const ::std::os::raw::c_char,
    pub baseaddr: ::std::os::raw::c_ulonglong,
    pub loadaddr: ::std::os::raw::c_ulonglong,
    pub sz: ::std::os::raw::c_ulonglong,
    pub xtr_idx: ::std::os::raw::c_int,
    pub rawstr: ::std::os::raw::c_int,
    pub fd: ::std::os::raw::c_int,
    pub filename: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_bin_options_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bin_options_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_bin_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bin_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bin_options_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_options_t>())).pluginname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_options_t),
            "::",
            stringify!(pluginname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_options_t>())).baseaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_options_t),
            "::",
            stringify!(baseaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_options_t>())).loadaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_options_t),
            "::",
            stringify!(loadaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_options_t>())).sz as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_options_t),
            "::",
            stringify!(sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_options_t>())).xtr_idx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_options_t),
            "::",
            stringify!(xtr_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_options_t>())).rawstr as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_options_t),
            "::",
            stringify!(rawstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_options_t>())).fd as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_options_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bin_options_t>())).filename as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bin_options_t),
            "::",
            stringify!(filename)
        )
    );
}
pub type RBinOptions = r_bin_options_t;
extern "C" {
    pub fn r_bin_import_clone(o: *mut RBinImport) -> *mut RBinImport;
}
extern "C" {
    pub fn r_bin_symbol_name(s: *mut RBinSymbol) -> *const ::std::os::raw::c_char;
}
pub type RBinSymbolCallback =
    ::std::option::Option<unsafe extern "C" fn(obj: *mut RBinObject, symbol: *mut RBinSymbol)>;
extern "C" {
    pub fn r_bin_options_init(
        opt: *mut RBinOptions,
        fd: ::std::os::raw::c_int,
        baseaddr: ::std::os::raw::c_ulonglong,
        loadaddr: ::std::os::raw::c_ulonglong,
        rawstr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_bin_arch_options_init(
        opt: *mut RBinArchOptions,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_bin_new() -> *mut RBin;
}
extern "C" {
    pub fn r_bin_free(bin: *mut RBin);
}
extern "C" {
    pub fn r_bin_open(
        bin: *mut RBin,
        file: *const ::std::os::raw::c_char,
        opt: *mut RBinOptions,
    ) -> bool;
}
extern "C" {
    pub fn r_bin_open_io(bin: *mut RBin, opt: *mut RBinOptions) -> bool;
}
extern "C" {
    pub fn r_bin_open_buf(bin: *mut RBin, buf: *mut RBuffer, opt: *mut RBinOptions) -> bool;
}
extern "C" {
    pub fn r_bin_reload(
        bin: *mut RBin,
        bf_id: ::std::os::raw::c_uint,
        baseaddr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_bin_bind(b: *mut RBin, bnd: *mut RBinBind);
}
extern "C" {
    pub fn r_bin_add(bin: *mut RBin, foo: *mut RBinPlugin) -> bool;
}
extern "C" {
    pub fn r_bin_xtr_add(bin: *mut RBin, foo: *mut RBinXtrPlugin) -> bool;
}
extern "C" {
    pub fn r_bin_ldr_add(bin: *mut RBin, foo: *mut RBinLdrPlugin) -> bool;
}
extern "C" {
    pub fn r_bin_list(bin: *mut RBin, pj: *mut PJ, format: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_bin_list_plugin(
        bin: *mut RBin,
        name: *const ::std::os::raw::c_char,
        pj: *mut PJ,
        json: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_bin_get_binplugin_by_buffer(
        bin: *mut RBin,
        bf: *mut RBinFile,
        buf: *mut RBuffer,
    ) -> *mut RBinPlugin;
}
extern "C" {
    pub fn r_bin_force_plugin(bin: *mut RBin, pname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_bin_get_baddr(bin: *mut RBin) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_bin_file_get_baddr(bf: *mut RBinFile) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_bin_set_user_ptr(bin: *mut RBin, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_bin_get_info(bin: *mut RBin) -> *mut RBinInfo;
}
extern "C" {
    pub fn r_bin_set_baddr(bin: *mut RBin, baddr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_bin_get_laddr(bin: *mut RBin) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_bin_get_size(bin: *mut RBin) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_bin_get_sym(bin: *mut RBin, sym: ::std::os::raw::c_int) -> *mut RBinAddr;
}
extern "C" {
    pub fn r_bin_raw_strings(a: *mut RBinFile, min: ::std::os::raw::c_int) -> *mut RList;
}
extern "C" {
    pub fn r_bin_dump_strings(
        a: *mut RBinFile,
        min: ::std::os::raw::c_int,
        raw: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_bin_get_entries(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_get_fields(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_get_imports(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_get_libs(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_patch_relocs(bin: *mut RBin) -> *mut RBNode;
}
extern "C" {
    pub fn r_bin_patch_relocs_list(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_get_relocs(bin: *mut RBin) -> *mut RBNode;
}
extern "C" {
    pub fn r_bin_get_relocs_list(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_get_sections(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_get_classes(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_get_strings(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_file_get_trycatch(bf: *mut RBinFile) -> *mut RList;
}
extern "C" {
    pub fn r_bin_get_symbols(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_reset_strings(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_is_string(
        bin: *mut RBin,
        va: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bin_is_big_endian(bin: *mut RBin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bin_is_static(bin: *mut RBin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bin_get_vaddr(
        bin: *mut RBin,
        paddr: ::std::os::raw::c_ulonglong,
        vaddr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_bin_file_get_vaddr(
        bf: *mut RBinFile,
        paddr: ::std::os::raw::c_ulonglong,
        vaddr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_bin_a2b(
        bin: *mut RBin,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_bin_load_languages(binfile: *mut RBinFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bin_cur(bin: *mut RBin) -> *mut RBinFile;
}
extern "C" {
    pub fn r_bin_cur_object(bin: *mut RBin) -> *mut RBinObject;
}
extern "C" {
    pub fn r_bin_select(
        bin: *mut RBin,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_bin_select_bfid(bin: *mut RBin, bf_id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_bin_use_arch(
        bin: *mut RBin,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_bin_list_archs(bin: *mut RBin, pj: *mut PJ, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_bin_create(
        bin: *mut RBin,
        plugin_name: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_uchar,
        codelen: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_int,
        opt: *mut RBinArchOptions,
    ) -> *mut RBuffer;
}
extern "C" {
    pub fn r_bin_package(
        bin: *mut RBin,
        type_: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        files: *mut RList,
    ) -> *mut RBuffer;
}
extern "C" {
    pub fn r_bin_string_type(type_: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_entry_type_string(etype: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_file_object_new_from_xtr_data(
        bin: *mut RBin,
        bf: *mut RBinFile,
        baseaddr: ::std::os::raw::c_ulonglong,
        loadaddr: ::std::os::raw::c_ulonglong,
        data: *mut RBinXtrData,
    ) -> bool;
}
extern "C" {
    pub fn r_bin_file_close(bin: *mut RBin, bd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_bin_file_free(bf_: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_bin_file_at(bin: *mut RBin, addr: ::std::os::raw::c_ulonglong) -> *mut RBinFile;
}
extern "C" {
    pub fn r_bin_file_find_by_object_id(
        bin: *mut RBin,
        binobj_id: ::std::os::raw::c_uint,
    ) -> *mut RBinFile;
}
extern "C" {
    pub fn r_bin_file_get_symbols(bf: *mut RBinFile) -> *mut RList;
}
extern "C" {
    pub fn r_bin_file_add_class(
        binfile: *mut RBinFile,
        name: *const ::std::os::raw::c_char,
        super_: *const ::std::os::raw::c_char,
        view: ::std::os::raw::c_int,
    ) -> *mut RBinClass;
}
extern "C" {
    pub fn r_bin_file_add_method(
        bf: *mut RBinFile,
        classname: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        nargs: ::std::os::raw::c_int,
    ) -> *mut RBinSymbol;
}
extern "C" {
    pub fn r_bin_file_add_field(
        binfile: *mut RBinFile,
        classname: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RBinField;
}
extern "C" {
    pub fn r_bin_file_find_by_arch_bits(
        bin: *mut RBin,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
    ) -> *mut RBinFile;
}
extern "C" {
    pub fn r_bin_file_find_by_id(bin: *mut RBin, bin_id: ::std::os::raw::c_uint) -> *mut RBinFile;
}
extern "C" {
    pub fn r_bin_file_find_by_fd(bin: *mut RBin, bin_fd: ::std::os::raw::c_uint) -> *mut RBinFile;
}
extern "C" {
    pub fn r_bin_file_find_by_name(
        bin: *mut RBin,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RBinFile;
}
extern "C" {
    pub fn r_bin_file_set_cur_binfile(bin: *mut RBin, bf: *mut RBinFile) -> bool;
}
extern "C" {
    pub fn r_bin_file_set_cur_by_name(bin: *mut RBin, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_bin_file_deref(bin: *mut RBin, a: *mut RBinFile) -> bool;
}
extern "C" {
    pub fn r_bin_file_set_cur_by_fd(bin: *mut RBin, bin_fd: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_bin_file_set_cur_by_id(bin: *mut RBin, bin_id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_bin_file_delete_all(bin: *mut RBin) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_bin_file_delete(bin: *mut RBin, bin_id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_bin_file_compute_hashes(
        bin: *mut RBin,
        limit: ::std::os::raw::c_ulonglong,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_bin_file_set_hashes(bin: *mut RBin, new_hashes: *mut RList) -> *mut RList;
}
extern "C" {
    pub fn r_bin_file_cur_plugin(binfile: *mut RBinFile) -> *mut RBinPlugin;
}
extern "C" {
    pub fn r_bin_file_hash_free(fhash: *mut RBinFileHash);
}
extern "C" {
    pub fn r_bin_object_set_items(
        binfile: *mut RBinFile,
        o: *mut RBinObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bin_object_delete(bin: *mut RBin, binfile_id: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_bin_mem_free(data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_bin_demangle(
        binfile: *mut RBinFile,
        lang: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
        vaddr: ::std::os::raw::c_ulonglong,
        libs: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_demangle_java(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_demangle_cxx(
        binfile: *mut RBinFile,
        str_: *const ::std::os::raw::c_char,
        vaddr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_demangle_msvc(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_demangle_swift(
        s: *const ::std::os::raw::c_char,
        syscmd: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_demangle_objc(
        binfile: *mut RBinFile,
        sym: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_demangle_rust(
        binfile: *mut RBinFile,
        str_: *const ::std::os::raw::c_char,
        vaddr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_demangle_type(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bin_demangle_list(bin: *mut RBin);
}
extern "C" {
    pub fn r_bin_demangle_plugin(
        bin: *mut RBin,
        name: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_get_meth_flag_string(
        flag: ::std::os::raw::c_ulonglong,
        compact: bool,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_get_section_at(
        o: *mut RBinObject,
        off: ::std::os::raw::c_ulonglong,
        va: ::std::os::raw::c_int,
    ) -> *mut RBinSection;
}
extern "C" {
    pub fn r_bin_addr2line(
        bin: *mut RBin,
        addr: ::std::os::raw::c_ulonglong,
        file: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        line: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_bin_addr2line2(
        bin: *mut RBin,
        addr: ::std::os::raw::c_ulonglong,
        file: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        line: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_bin_addr2text(
        bin: *mut RBin,
        addr: ::std::os::raw::c_ulonglong,
        origin: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_addr2fileline(
        bin: *mut RBin,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_wr_addlib(bin: *mut RBin, lib: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_bin_wr_scn_resize(
        bin: *mut RBin,
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_bin_wr_scn_perms(
        bin: *mut RBin,
        name: *const ::std::os::raw::c_char,
        perms: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_bin_wr_rpath_del(bin: *mut RBin) -> bool;
}
extern "C" {
    pub fn r_bin_wr_entry(bin: *mut RBin, addr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_bin_wr_output(bin: *mut RBin, filename: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_bin_get_mem(bin: *mut RBin) -> *mut RList;
}
extern "C" {
    pub fn r_bin_load_filter(bin: *mut RBin, rules: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_bin_filter_symbols(bf: *mut RBinFile, list: *mut RList);
}
extern "C" {
    pub fn r_bin_filter_sections(bf: *mut RBinFile, list: *mut RList);
}
extern "C" {
    pub fn r_bin_filter_name(
        bf: *mut RBinFile,
        db: *mut HtPU,
        addr: ::std::os::raw::c_ulonglong,
        name: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_bin_filter_sym(
        bf: *mut RBinFile,
        ht: *mut HtPP,
        vaddr: ::std::os::raw::c_ulonglong,
        sym: *mut RBinSymbol,
    );
}
extern "C" {
    pub fn r_bin_strpurge(
        bin: *mut RBin,
        str_: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_bin_string_filter(
        bin: *mut RBin,
        str_: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub static mut r_bin_plugin_any: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_fs: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_cgc: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_elf: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_elf64: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_p9: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_ne: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_le: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_pe: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_mz: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_pe64: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_pebble: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_bios: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_bf: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_te: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_symbols: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_mach0: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_mach064: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_mdmp: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_java: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_dex: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_coff: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_ningb: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_ningba: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_ninds: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_nin3ds: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_xbe: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_bflt: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_xtr_plugin_xtr_fatmach0: RBinXtrPlugin;
}
extern "C" {
    pub static mut r_bin_xtr_plugin_xtr_dyldcache: RBinXtrPlugin;
}
extern "C" {
    pub static mut r_bin_xtr_plugin_xtr_pemixed: RBinXtrPlugin;
}
extern "C" {
    pub static mut r_bin_xtr_plugin_xtr_sep64: RBinXtrPlugin;
}
extern "C" {
    pub static mut r_bin_ldr_plugin_ldr_linux: RBinLdrPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_zimg: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_omf: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_art: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_bootimg: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_dol: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_nes: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_qnx: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_mbn: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_smd: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_sms: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_psxexe: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_vsf: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_dyldcache: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_xnu_kernelcache: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_avr: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_menuet: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_wad: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_wasm: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_nro: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_nso: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_sfc: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_z64: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_prg: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_dmp64: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_pyc: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_off: RBinPlugin;
}
extern "C" {
    pub static mut r_bin_plugin_tic: RBinPlugin;
}
extern "C" {
    pub fn r_flag_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_flag_zone_item_t {
    pub from: ::std::os::raw::c_ulonglong,
    pub to: ::std::os::raw::c_ulonglong,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_flag_zone_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_flag_zone_item_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_flag_zone_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_flag_zone_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_flag_zone_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_zone_item_t>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_zone_item_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_zone_item_t>())).to as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_zone_item_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_zone_item_t>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_zone_item_t),
            "::",
            stringify!(name)
        )
    );
}
pub type RFlagZoneItem = r_flag_zone_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_flags_at_offset_t {
    pub off: ::std::os::raw::c_ulonglong,
    pub flags: *mut RList,
}
#[test]
fn bindgen_test_layout_r_flags_at_offset_t() {
    assert_eq!(
        ::std::mem::size_of::<r_flags_at_offset_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_flags_at_offset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_flags_at_offset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_flags_at_offset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flags_at_offset_t>())).off as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flags_at_offset_t),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flags_at_offset_t>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flags_at_offset_t),
            "::",
            stringify!(flags)
        )
    );
}
pub type RFlagsAtOffset = r_flags_at_offset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_flag_item_t {
    pub name: *mut ::std::os::raw::c_char,
    pub realname: *mut ::std::os::raw::c_char,
    pub demangled: bool,
    pub offset: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_ulonglong,
    pub space: *mut RSpace,
    pub color: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub alias: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_flag_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_flag_item_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_flag_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_flag_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_flag_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_item_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_item_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_item_t>())).realname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_item_t),
            "::",
            stringify!(realname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_item_t>())).demangled as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_item_t),
            "::",
            stringify!(demangled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_item_t>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_item_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_item_t>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_item_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_item_t>())).space as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_item_t),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_item_t>())).color as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_item_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_item_t>())).comment as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_item_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_item_t>())).alias as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_item_t),
            "::",
            stringify!(alias)
        )
    );
}
pub type RFlagItem = r_flag_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_flag_t {
    pub spaces: RSpaces,
    pub base: ::std::os::raw::c_longlong,
    pub realnames: bool,
    pub tags: *mut Sdb,
    pub num: *mut RNum,
    pub by_off: *mut RSkipList,
    pub ht_name: *mut HtPP,
    pub cb_printf: PrintfCallback,
    pub zones: *mut RList,
    pub mask: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_flag_t() {
    assert_eq!(
        ::std::mem::size_of::<r_flag_t>(),
        112usize,
        concat!("Size of: ", stringify!(r_flag_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_flag_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_flag_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_t>())).spaces as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_t),
            "::",
            stringify!(spaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_t>())).base as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_t>())).realnames as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_t),
            "::",
            stringify!(realnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_t>())).tags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_t),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_t>())).num as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_t>())).by_off as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_t),
            "::",
            stringify!(by_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_t>())).ht_name as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_t),
            "::",
            stringify!(ht_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_t>())).cb_printf as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_t>())).zones as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_t),
            "::",
            stringify!(zones)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_t>())).mask as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_t),
            "::",
            stringify!(mask)
        )
    );
}
pub type RFlag = r_flag_t;
pub type RFlagExistAt = ::std::option::Option<
    unsafe extern "C" fn(
        f: *mut RFlag,
        flag_prefix: *const ::std::os::raw::c_char,
        fp_size: ::std::os::raw::c_ushort,
        off: ::std::os::raw::c_ulonglong,
    ) -> bool,
>;
pub type RFlagGet = ::std::option::Option<
    unsafe extern "C" fn(f: *mut RFlag, name: *const ::std::os::raw::c_char) -> *mut RFlagItem,
>;
pub type RFlagGetAtAddr = ::std::option::Option<
    unsafe extern "C" fn(f: *mut RFlag, arg1: ::std::os::raw::c_ulonglong) -> *mut RFlagItem,
>;
pub type RFlagGetAt = ::std::option::Option<
    unsafe extern "C" fn(
        f: *mut RFlag,
        addr: ::std::os::raw::c_ulonglong,
        closest: bool,
    ) -> *mut RFlagItem,
>;
pub type RFlagGetList = ::std::option::Option<
    unsafe extern "C" fn(f: *mut RFlag, addr: ::std::os::raw::c_ulonglong) -> *const RList,
>;
pub type RFlagSet = ::std::option::Option<
    unsafe extern "C" fn(
        f: *mut RFlag,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_uint,
    ) -> *mut RFlagItem,
>;
pub type RFlagUnset =
    ::std::option::Option<unsafe extern "C" fn(f: *mut RFlag, item: *mut RFlagItem) -> bool>;
pub type RFlagUnsetName = ::std::option::Option<
    unsafe extern "C" fn(f: *mut RFlag, name: *const ::std::os::raw::c_char) -> bool,
>;
pub type RFlagUnsetOff = ::std::option::Option<
    unsafe extern "C" fn(f: *mut RFlag, addr: ::std::os::raw::c_ulonglong) -> bool,
>;
pub type RFlagSetSpace = ::std::option::Option<
    unsafe extern "C" fn(f: *mut RFlag, name: *const ::std::os::raw::c_char) -> *mut RSpace,
>;
pub type RFlagPopSpace = ::std::option::Option<unsafe extern "C" fn(f: *mut RFlag) -> bool>;
pub type RFlagPushSpace = ::std::option::Option<
    unsafe extern "C" fn(f: *mut RFlag, name: *const ::std::os::raw::c_char) -> bool,
>;
pub type RFlagItemCb = ::std::option::Option<
    unsafe extern "C" fn(fi: *mut RFlagItem, user: *mut ::std::os::raw::c_void) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_flag_bind_t {
    pub init: ::std::os::raw::c_int,
    pub f: *mut RFlag,
    pub exist_at: RFlagExistAt,
    pub get: RFlagGet,
    pub get_at: RFlagGetAt,
    pub get_list: RFlagGetList,
    pub set: RFlagSet,
    pub unset: RFlagUnset,
    pub unset_name: RFlagUnsetName,
    pub unset_off: RFlagUnsetOff,
    pub set_fs: RFlagSetSpace,
    pub push_fs: RFlagPushSpace,
    pub pop_fs: RFlagPopSpace,
}
#[test]
fn bindgen_test_layout_r_flag_bind_t() {
    assert_eq!(
        ::std::mem::size_of::<r_flag_bind_t>(),
        104usize,
        concat!("Size of: ", stringify!(r_flag_bind_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_flag_bind_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_flag_bind_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).f as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).exist_at as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(exist_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).get as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).get_at as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(get_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).get_list as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(get_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).set as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).unset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(unset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).unset_name as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(unset_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).unset_off as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(unset_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).set_fs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(set_fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).push_fs as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(push_fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_flag_bind_t>())).pop_fs as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_flag_bind_t),
            "::",
            stringify!(pop_fs)
        )
    );
}
pub type RFlagBind = r_flag_bind_t;
extern "C" {
    pub fn r_flag_bind(io: *mut RFlag, bnd: *mut RFlagBind);
}
extern "C" {
    pub fn r_flag_new() -> *mut RFlag;
}
extern "C" {
    pub fn r_flag_free(f: *mut RFlag) -> *mut RFlag;
}
extern "C" {
    pub fn r_flag_list(
        f: *mut RFlag,
        rad: ::std::os::raw::c_int,
        pfx: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_flag_exist_at(
        f: *mut RFlag,
        flag_prefix: *const ::std::os::raw::c_char,
        fp_size: ::std::os::raw::c_ushort,
        off: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_flag_get(f: *mut RFlag, name: *const ::std::os::raw::c_char) -> *mut RFlagItem;
}
extern "C" {
    pub fn r_flag_get_i(f: *mut RFlag, off: ::std::os::raw::c_ulonglong) -> *mut RFlagItem;
}
extern "C" {
    pub fn r_flag_get_by_spaces(
        f: *mut RFlag,
        off: ::std::os::raw::c_ulonglong,
        ...
    ) -> *mut RFlagItem;
}
extern "C" {
    pub fn r_flag_get_at(
        f: *mut RFlag,
        off: ::std::os::raw::c_ulonglong,
        closest: bool,
    ) -> *mut RFlagItem;
}
extern "C" {
    pub fn r_flag_all_list(f: *mut RFlag, by_space: bool) -> *mut RList;
}
extern "C" {
    pub fn r_flag_get_list(f: *mut RFlag, off: ::std::os::raw::c_ulonglong) -> *const RList;
}
extern "C" {
    pub fn r_flag_get_liststr(
        f: *mut RFlag,
        off: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_flag_unset(f: *mut RFlag, item: *mut RFlagItem) -> bool;
}
extern "C" {
    pub fn r_flag_unset_name(f: *mut RFlag, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_flag_unset_off(f: *mut RFlag, addr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_flag_unset_all(f: *mut RFlag);
}
extern "C" {
    pub fn r_flag_set(
        fo: *mut RFlag,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_uint,
    ) -> *mut RFlagItem;
}
extern "C" {
    pub fn r_flag_set_next(
        fo: *mut RFlag,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_uint,
    ) -> *mut RFlagItem;
}
extern "C" {
    pub fn r_flag_item_set_alias(item: *mut RFlagItem, alias: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_flag_item_free(item: *mut RFlagItem);
}
extern "C" {
    pub fn r_flag_item_set_comment(item: *mut RFlagItem, comment: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_flag_item_set_realname(item: *mut RFlagItem, realname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_flag_item_set_color(
        item: *mut RFlagItem,
        color: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_flag_item_clone(item: *mut RFlagItem) -> *mut RFlagItem;
}
extern "C" {
    pub fn r_flag_unset_glob(
        f: *mut RFlag,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_flag_rename(
        f: *mut RFlag,
        item: *mut RFlagItem,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_flag_relocate(
        f: *mut RFlag,
        off: ::std::os::raw::c_ulonglong,
        off_mask: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_flag_move(
        f: *mut RFlag,
        at: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_flag_count(
        f: *mut RFlag,
        glob: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_flag_foreach(f: *mut RFlag, cb: RFlagItemCb, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_flag_foreach_prefix(
        f: *mut RFlag,
        pfx: *const ::std::os::raw::c_char,
        pfx_len: ::std::os::raw::c_int,
        cb: RFlagItemCb,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_flag_foreach_range(
        f: *mut RFlag,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        cb: RFlagItemCb,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_flag_foreach_glob(
        f: *mut RFlag,
        glob: *const ::std::os::raw::c_char,
        cb: RFlagItemCb,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_flag_foreach_space(
        f: *mut RFlag,
        space: *const RSpace,
        cb: RFlagItemCb,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_flag_foreach_space_glob(
        f: *mut RFlag,
        glob: *const ::std::os::raw::c_char,
        space: *const RSpace,
        cb: RFlagItemCb,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_flag_tags_list(f: *mut RFlag, name: *const ::std::os::raw::c_char) -> *mut RList;
}
extern "C" {
    pub fn r_flag_tags_set(
        f: *mut RFlag,
        name: *const ::std::os::raw::c_char,
        words: *const ::std::os::raw::c_char,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_flag_tags_reset(f: *mut RFlag, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_flag_tags_get(f: *mut RFlag, name: *const ::std::os::raw::c_char) -> *mut RList;
}
extern "C" {
    pub fn r_flag_zone_item_free(a: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_flag_zone_add(
        fz: *mut RFlag,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_flag_zone_del(fz: *mut RFlag, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_flag_zone_around(
        fz: *mut RFlag,
        addr: ::std::os::raw::c_ulonglong,
        prev: *mut *const ::std::os::raw::c_char,
        next: *mut *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_flag_zone_list(fz: *mut RFlag, mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_flag_zone_reset(f: *mut RFlag) -> bool;
}
extern "C" {
    pub fn r_flag_zone_barlist(
        f: *mut RFlag,
        from: ::std::os::raw::c_ulonglong,
        bsize: ::std::os::raw::c_ulonglong,
        rows: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_reg_version() -> *const ::std::os::raw::c_char;
}
pub const RRegisterType_R_REG_TYPE_GPR: RRegisterType = 0;
pub const RRegisterType_R_REG_TYPE_DRX: RRegisterType = 1;
pub const RRegisterType_R_REG_TYPE_FPU: RRegisterType = 2;
pub const RRegisterType_R_REG_TYPE_MMX: RRegisterType = 3;
pub const RRegisterType_R_REG_TYPE_XMM: RRegisterType = 4;
pub const RRegisterType_R_REG_TYPE_YMM: RRegisterType = 5;
pub const RRegisterType_R_REG_TYPE_FLG: RRegisterType = 6;
pub const RRegisterType_R_REG_TYPE_SEG: RRegisterType = 7;
pub const RRegisterType_R_REG_TYPE_LAST: RRegisterType = 8;
pub const RRegisterType_R_REG_TYPE_ALL: RRegisterType = -1;
pub type RRegisterType = ::std::os::raw::c_int;
pub const RRegisterId_R_REG_NAME_PC: RRegisterId = 0;
pub const RRegisterId_R_REG_NAME_SP: RRegisterId = 1;
pub const RRegisterId_R_REG_NAME_SR: RRegisterId = 2;
pub const RRegisterId_R_REG_NAME_BP: RRegisterId = 3;
pub const RRegisterId_R_REG_NAME_LR: RRegisterId = 4;
pub const RRegisterId_R_REG_NAME_RS: RRegisterId = 5;
pub const RRegisterId_R_REG_NAME_A0: RRegisterId = 6;
pub const RRegisterId_R_REG_NAME_A1: RRegisterId = 7;
pub const RRegisterId_R_REG_NAME_A2: RRegisterId = 8;
pub const RRegisterId_R_REG_NAME_A3: RRegisterId = 9;
pub const RRegisterId_R_REG_NAME_A4: RRegisterId = 10;
pub const RRegisterId_R_REG_NAME_A5: RRegisterId = 11;
pub const RRegisterId_R_REG_NAME_A6: RRegisterId = 12;
pub const RRegisterId_R_REG_NAME_A7: RRegisterId = 13;
pub const RRegisterId_R_REG_NAME_A8: RRegisterId = 14;
pub const RRegisterId_R_REG_NAME_A9: RRegisterId = 15;
pub const RRegisterId_R_REG_NAME_R0: RRegisterId = 16;
pub const RRegisterId_R_REG_NAME_R1: RRegisterId = 17;
pub const RRegisterId_R_REG_NAME_R2: RRegisterId = 18;
pub const RRegisterId_R_REG_NAME_R3: RRegisterId = 19;
pub const RRegisterId_R_REG_NAME_ZF: RRegisterId = 20;
pub const RRegisterId_R_REG_NAME_SF: RRegisterId = 21;
pub const RRegisterId_R_REG_NAME_CF: RRegisterId = 22;
pub const RRegisterId_R_REG_NAME_OF: RRegisterId = 23;
pub const RRegisterId_R_REG_NAME_SN: RRegisterId = 24;
pub const RRegisterId_R_REG_NAME_LAST: RRegisterId = 25;
pub type RRegisterId = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_reg_item_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
    pub packed_size: ::std::os::raw::c_int,
    pub is_float: bool,
    pub flags: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub index: ::std::os::raw::c_int,
    pub arena: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_reg_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_reg_item_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_reg_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_reg_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_reg_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_item_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_item_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_item_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_item_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_item_t>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_item_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_item_t>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_item_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_item_t>())).packed_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_item_t),
            "::",
            stringify!(packed_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_item_t>())).is_float as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_item_t),
            "::",
            stringify!(is_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_item_t>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_item_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_item_t>())).comment as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_item_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_item_t>())).index as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_item_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_item_t>())).arena as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_item_t),
            "::",
            stringify!(arena)
        )
    );
}
pub type RRegItem = r_reg_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_reg_arena_t {
    pub bytes: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_reg_arena_t() {
    assert_eq!(
        ::std::mem::size_of::<r_reg_arena_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_reg_arena_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_reg_arena_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_reg_arena_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_arena_t>())).bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_arena_t),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_arena_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_arena_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RRegArena = r_reg_arena_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_reg_set_t {
    pub arena: *mut RRegArena,
    pub pool: *mut RList,
    pub regs: *mut RList,
    pub ht_regs: *mut HtPP,
    pub cur: *mut RListIter,
    pub maskregstype: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_reg_set_t() {
    assert_eq!(
        ::std::mem::size_of::<r_reg_set_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_reg_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_reg_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_reg_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_set_t>())).arena as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_set_t),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_set_t>())).pool as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_set_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_set_t>())).regs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_set_t),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_set_t>())).ht_regs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_set_t),
            "::",
            stringify!(ht_regs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_set_t>())).cur as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_set_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_set_t>())).maskregstype as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_set_t),
            "::",
            stringify!(maskregstype)
        )
    );
}
pub type RRegSet = r_reg_set_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_reg_t {
    pub profile: *mut ::std::os::raw::c_char,
    pub reg_profile_cmt: *mut ::std::os::raw::c_char,
    pub reg_profile_str: *mut ::std::os::raw::c_char,
    pub name: [*mut ::std::os::raw::c_char; 25usize],
    pub regset: [RRegSet; 8usize],
    pub allregs: *mut RList,
    pub roregs: *mut RList,
    pub iters: ::std::os::raw::c_int,
    pub arch: ::std::os::raw::c_int,
    pub bits: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub bits_default: ::std::os::raw::c_int,
    pub is_thumb: bool,
    pub big_endian: bool,
}
#[test]
fn bindgen_test_layout_r_reg_t() {
    assert_eq!(
        ::std::mem::size_of::<r_reg_t>(),
        648usize,
        concat!("Size of: ", stringify!(r_reg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_reg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_reg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).profile as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).reg_profile_cmt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(reg_profile_cmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).reg_profile_str as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(reg_profile_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).regset as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(regset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).allregs as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(allregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).roregs as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(roregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).iters as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(iters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).arch as *const _ as usize },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).bits as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).size as *const _ as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).bits_default as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(bits_default)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).is_thumb as *const _ as usize },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(is_thumb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_t>())).big_endian as *const _ as usize },
        645usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_t),
            "::",
            stringify!(big_endian)
        )
    );
}
pub type RReg = r_reg_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_reg_flags_t {
    pub s: bool,
    pub z: bool,
    pub a: bool,
    pub c: bool,
    pub o: bool,
    pub p: bool,
}
#[test]
fn bindgen_test_layout_r_reg_flags_t() {
    assert_eq!(
        ::std::mem::size_of::<r_reg_flags_t>(),
        6usize,
        concat!("Size of: ", stringify!(r_reg_flags_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_reg_flags_t>(),
        1usize,
        concat!("Alignment of ", stringify!(r_reg_flags_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_flags_t>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_flags_t),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_flags_t>())).z as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_flags_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_flags_t>())).a as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_flags_t),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_flags_t>())).c as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_flags_t),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_flags_t>())).o as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_flags_t),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_reg_flags_t>())).p as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(r_reg_flags_t),
            "::",
            stringify!(p)
        )
    );
}
pub type RRegFlags = r_reg_flags_t;
extern "C" {
    pub fn r_reg_free(reg: *mut RReg);
}
extern "C" {
    pub fn r_reg_free_internal(reg: *mut RReg, init: bool);
}
extern "C" {
    pub fn r_reg_new() -> *mut RReg;
}
extern "C" {
    pub fn r_reg_init(reg: *mut RReg) -> *mut RReg;
}
extern "C" {
    pub fn r_reg_set_name(
        reg: *mut RReg,
        role: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_reg_set_profile_string(reg: *mut RReg, profile: *const ::std::os::raw::c_char)
        -> bool;
}
extern "C" {
    pub fn r_reg_profile_to_cc(reg: *mut RReg) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_reg_set_profile(reg: *mut RReg, profile: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_reg_parse_gdb_profile(
        profile: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_reg_is_readonly(reg: *mut RReg, item: *mut RRegItem) -> bool;
}
extern "C" {
    pub fn r_reg_regset_get(r: *mut RReg, type_: ::std::os::raw::c_int) -> *mut RRegSet;
}
extern "C" {
    pub fn r_reg_getv(
        reg: *mut RReg,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_reg_setv(
        reg: *mut RReg,
        name: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_reg_32_to_64(
        reg: *mut RReg,
        rreg32: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_reg_64_to_32(
        reg: *mut RReg,
        rreg64: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_reg_get_name_by_type(
        reg: *mut RReg,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_reg_get_type(idx: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_reg_get_name(
        reg: *mut RReg,
        kind: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_reg_get_role(role: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_reg_get(
        reg: *mut RReg,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> *mut RRegItem;
}
extern "C" {
    pub fn r_reg_get_list(reg: *mut RReg, type_: ::std::os::raw::c_int) -> *mut RList;
}
extern "C" {
    pub fn r_reg_get_at(
        reg: *mut RReg,
        type_: ::std::os::raw::c_int,
        regsize: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_int,
    ) -> *mut RRegItem;
}
extern "C" {
    pub fn r_reg_next_diff(
        reg: *mut RReg,
        type_: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_uchar,
        buflen: ::std::os::raw::c_int,
        prev_ri: *mut RRegItem,
        regsize: ::std::os::raw::c_int,
    ) -> *mut RRegItem;
}
extern "C" {
    pub fn r_reg_reindex(reg: *mut RReg);
}
extern "C" {
    pub fn r_reg_index_get(reg: *mut RReg, idx: ::std::os::raw::c_int) -> *mut RRegItem;
}
extern "C" {
    pub fn r_reg_item_free(item: *mut RRegItem);
}
extern "C" {
    pub fn r_reg_type_by_name(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_reg_get_name_idx(type_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_reg_cond_get(reg: *mut RReg, name: *const ::std::os::raw::c_char) -> *mut RRegItem;
}
extern "C" {
    pub fn r_reg_cond_apply(r: *mut RReg, f: *mut RRegFlags);
}
extern "C" {
    pub fn r_reg_cond_set(reg: *mut RReg, name: *const ::std::os::raw::c_char, val: bool) -> bool;
}
extern "C" {
    pub fn r_reg_cond_get_value(r: *mut RReg, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_reg_cond_bits_set(
        r: *mut RReg,
        type_: ::std::os::raw::c_int,
        f: *mut RRegFlags,
        v: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_reg_cond_bits(
        r: *mut RReg,
        type_: ::std::os::raw::c_int,
        f: *mut RRegFlags,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_reg_cond_retrieve(r: *mut RReg, arg1: *mut RRegFlags) -> *mut RRegFlags;
}
extern "C" {
    pub fn r_reg_cond(r: *mut RReg, type_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_reg_get_value(reg: *mut RReg, item: *mut RRegItem) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_reg_get_value_big(
        reg: *mut RReg,
        item: *mut RRegItem,
        val: *mut utX,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_reg_get_value_by_role(
        reg: *mut RReg,
        role: RRegisterId,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_reg_set_value(
        reg: *mut RReg,
        item: *mut RRegItem,
        value: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_reg_set_value_by_role(
        reg: *mut RReg,
        role: RRegisterId,
        value: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_reg_get_float(reg: *mut RReg, item: *mut RRegItem) -> f32;
}
extern "C" {
    pub fn r_reg_set_float(reg: *mut RReg, item: *mut RRegItem, value: f32) -> bool;
}
extern "C" {
    pub fn r_reg_get_double(reg: *mut RReg, item: *mut RRegItem) -> f64;
}
extern "C" {
    pub fn r_reg_set_double(reg: *mut RReg, item: *mut RRegItem, value: f64) -> bool;
}
extern "C" {
    pub fn r_reg_get_longdouble(reg: *mut RReg, item: *mut RRegItem) -> u128;
}
extern "C" {
    pub fn r_reg_set_longdouble(reg: *mut RReg, item: *mut RRegItem, value: u128) -> bool;
}
extern "C" {
    pub fn r_reg_get_bvalue(reg: *mut RReg, item: *mut RRegItem) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_reg_set_bvalue(
        reg: *mut RReg,
        item: *mut RRegItem,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_reg_set_pack(
        reg: *mut RReg,
        item: *mut RRegItem,
        packidx: ::std::os::raw::c_int,
        packbits: ::std::os::raw::c_int,
        val: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_reg_get_pack(
        reg: *mut RReg,
        item: *mut RRegItem,
        packidx: ::std::os::raw::c_int,
        packbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_reg_default_bits(reg: *mut RReg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_reg_get_bytes(
        reg: *mut RReg,
        type_: ::std::os::raw::c_int,
        size: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_reg_set_bytes(
        reg: *mut RReg,
        type_: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_reg_read_regs(
        reg: *mut RReg,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_reg_arena_set_bytes(
        reg: *mut RReg,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_reg_arena_new(size: ::std::os::raw::c_int) -> *mut RRegArena;
}
extern "C" {
    pub fn r_reg_arena_free(ra: *mut RRegArena);
}
extern "C" {
    pub fn r_reg_fit_arena(reg: *mut RReg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_reg_arena_swap(reg: *mut RReg, copy: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_reg_arena_push(reg: *mut RReg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_reg_arena_pop(reg: *mut RReg);
}
extern "C" {
    pub fn r_reg_arena_zero(reg: *mut RReg);
}
extern "C" {
    pub fn r_reg_arena_peek(reg: *mut RReg) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_reg_arena_poke(reg: *mut RReg, buf: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn r_reg_arena_dup(
        reg: *mut RReg,
        source: *const ::std::os::raw::c_uchar,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_reg_cond_to_string(n: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_reg_cond_from_string(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_reg_arena_shrink(reg: *mut RReg);
}
extern "C" {
    pub fn r_search_version() -> *const ::std::os::raw::c_char;
}
pub const R_SEARCH_ESIL: ::std::os::raw::c_uint = 0;
pub const R_SEARCH_KEYWORD: ::std::os::raw::c_uint = 1;
pub const R_SEARCH_REGEXP: ::std::os::raw::c_uint = 2;
pub const R_SEARCH_PATTERN: ::std::os::raw::c_uint = 3;
pub const R_SEARCH_STRING: ::std::os::raw::c_uint = 4;
pub const R_SEARCH_XREFS: ::std::os::raw::c_uint = 5;
pub const R_SEARCH_AES: ::std::os::raw::c_uint = 6;
pub const R_SEARCH_PRIV_KEY: ::std::os::raw::c_uint = 7;
pub const R_SEARCH_DELTAKEY: ::std::os::raw::c_uint = 8;
pub const R_SEARCH_MAGIC: ::std::os::raw::c_uint = 9;
pub const R_SEARCH_LAST: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_search_keyword_t {
    pub bin_keyword: *mut ::std::os::raw::c_uchar,
    pub bin_binmask: *mut ::std::os::raw::c_uchar,
    pub keyword_length: ::std::os::raw::c_uint,
    pub binmask_length: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
    pub count: ::std::os::raw::c_int,
    pub kwidx: ::std::os::raw::c_int,
    pub icase: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub last: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_search_keyword_t() {
    assert_eq!(
        ::std::mem::size_of::<r_search_keyword_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_search_keyword_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_search_keyword_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_search_keyword_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_keyword_t>())).bin_keyword as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_keyword_t),
            "::",
            stringify!(bin_keyword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_keyword_t>())).bin_binmask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_keyword_t),
            "::",
            stringify!(bin_binmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_search_keyword_t>())).keyword_length as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_keyword_t),
            "::",
            stringify!(keyword_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_search_keyword_t>())).binmask_length as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_keyword_t),
            "::",
            stringify!(binmask_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_keyword_t>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_keyword_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_keyword_t>())).count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_keyword_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_keyword_t>())).kwidx as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_keyword_t),
            "::",
            stringify!(kwidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_keyword_t>())).icase as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_keyword_t),
            "::",
            stringify!(icase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_keyword_t>())).type_ as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_keyword_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_keyword_t>())).last as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_keyword_t),
            "::",
            stringify!(last)
        )
    );
}
pub type RSearchKeyword = r_search_keyword_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_search_uds_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub stride: ::std::os::raw::c_int,
    pub score: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_search_uds_t() {
    assert_eq!(
        ::std::mem::size_of::<r_search_uds_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_search_uds_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_search_uds_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_search_uds_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_uds_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_uds_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_uds_t>())).stride as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_uds_t),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_uds_t>())).score as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_uds_t),
            "::",
            stringify!(score)
        )
    );
}
pub type RSearchUds = r_search_uds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_search_hit_t {
    pub kw: *mut RSearchKeyword,
    pub addr: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_search_hit_t() {
    assert_eq!(
        ::std::mem::size_of::<r_search_hit_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_search_hit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_search_hit_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_search_hit_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_hit_t>())).kw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_hit_t),
            "::",
            stringify!(kw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_hit_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_hit_t),
            "::",
            stringify!(addr)
        )
    );
}
pub type RSearchHit = r_search_hit_t;
pub type RSearchCallback = ::std::option::Option<
    unsafe extern "C" fn(
        kw: *mut RSearchKeyword,
        user: *mut ::std::os::raw::c_void,
        where_: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_search_t {
    pub n_kws: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub pattern_size: ::std::os::raw::c_uint,
    pub string_min: ::std::os::raw::c_uint,
    pub string_max: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
    pub user: *mut ::std::os::raw::c_void,
    pub callback: RSearchCallback,
    pub nhits: ::std::os::raw::c_ulonglong,
    pub maxhits: ::std::os::raw::c_ulonglong,
    pub hits: *mut RList,
    pub distance: ::std::os::raw::c_int,
    pub inverse: ::std::os::raw::c_int,
    pub overlap: bool,
    pub contiguous: ::std::os::raw::c_int,
    pub align: ::std::os::raw::c_int,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut r_search_t,
            from: ::std::os::raw::c_ulonglong,
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub kws: *mut RList,
    pub iob: RIOBind,
    pub bckwrds: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_search_t() {
    assert_eq!(
        ::std::mem::size_of::<r_search_t>(),
        384usize,
        concat!("Size of: ", stringify!(r_search_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_search_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_search_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).n_kws as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(n_kws)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).pattern_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(pattern_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).string_min as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(string_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).string_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(string_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).user as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).callback as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).nhits as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(nhits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).maxhits as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(maxhits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).hits as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).distance as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).inverse as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(inverse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).overlap as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(overlap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).contiguous as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(contiguous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).align as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).update as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).kws as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(kws)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).iob as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(iob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_search_t>())).bckwrds as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(r_search_t),
            "::",
            stringify!(bckwrds)
        )
    );
}
pub type RSearch = r_search_t;
extern "C" {
    pub fn r_search_new(mode: ::std::os::raw::c_int) -> *mut RSearch;
}
extern "C" {
    pub fn r_search_set_mode(s: *mut RSearch, mode: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_free(s: *mut RSearch) -> *mut RSearch;
}
extern "C" {
    pub fn r_search_find(
        s: *mut RSearch,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_search_find_uds(
        search: *mut RSearch,
        addr: ::std::os::raw::c_ulonglong,
        data: *const ::std::os::raw::c_uchar,
        size: size_t,
        verbose: bool,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_search_update(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_update_i(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_keyword_free(kw: *mut RSearchKeyword);
}
extern "C" {
    pub fn r_search_keyword_new(
        kw: *const ::std::os::raw::c_uchar,
        kwlen: ::std::os::raw::c_int,
        bm: *const ::std::os::raw::c_uchar,
        bmlen: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_char,
    ) -> *mut RSearchKeyword;
}
extern "C" {
    pub fn r_search_keyword_new_str(
        kw: *const ::std::os::raw::c_char,
        bm: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        icase: ::std::os::raw::c_int,
    ) -> *mut RSearchKeyword;
}
extern "C" {
    pub fn r_search_keyword_new_wide(
        kw: *const ::std::os::raw::c_char,
        bm: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        icase: ::std::os::raw::c_int,
    ) -> *mut RSearchKeyword;
}
extern "C" {
    pub fn r_search_keyword_new_hex(
        kwstr: *const ::std::os::raw::c_char,
        bmstr: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> *mut RSearchKeyword;
}
extern "C" {
    pub fn r_search_keyword_new_hexmask(
        kwstr: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> *mut RSearchKeyword;
}
extern "C" {
    pub fn r_search_keyword_new_regexp(
        str_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> *mut RSearchKeyword;
}
extern "C" {
    pub fn r_search_kw_add(s: *mut RSearch, kw: *mut RSearchKeyword) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_reset(s: *mut RSearch, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_search_kw_reset(s: *mut RSearch);
}
extern "C" {
    pub fn r_search_string_prepare_backward(s: *mut RSearch);
}
extern "C" {
    pub fn r_search_range_add(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_range_set(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_range_reset(s: *mut RSearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_set_blocksize(
        s: *mut RSearch,
        bsize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_bmh(
        kw: *const RSearchKeyword,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_mybinparse_update(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_aes_update(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_privkey_update(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_magic_update(
        _s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_deltakey_update(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_strings_update(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_regexp_update(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_xrefs_update(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_hit_new(
        s: *mut RSearch,
        kw: *mut RSearchKeyword,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_set_distance(s: *mut RSearch, dist: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_search_strings(
        s: *mut RSearch,
        min: ::std::os::raw::c_uint,
        max: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_set_string_limits(
        s: *mut RSearch,
        min: ::std::os::raw::c_uint,
        max: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_set_callback(
        s: *mut RSearch,
        callback: RSearchCallback,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_search_begin(s: *mut RSearch) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_search_pattern_size(s: *mut RSearch, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_search_pattern(
        s: *mut RSearch,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_syscall_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_syscall_item_t {
    pub name: *mut ::std::os::raw::c_char,
    pub swi: ::std::os::raw::c_int,
    pub num: ::std::os::raw::c_int,
    pub args: ::std::os::raw::c_int,
    pub sargs: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_syscall_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_syscall_item_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_syscall_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_syscall_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_syscall_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_item_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_item_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_item_t>())).swi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_item_t),
            "::",
            stringify!(swi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_item_t>())).num as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_item_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_item_t>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_item_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_item_t>())).sargs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_item_t),
            "::",
            stringify!(sargs)
        )
    );
}
pub type RSyscallItem = r_syscall_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_syscall_port_t {
    pub port: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_syscall_port_t() {
    assert_eq!(
        ::std::mem::size_of::<r_syscall_port_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_syscall_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_syscall_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_syscall_port_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_port_t>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_port_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_port_t>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_port_t),
            "::",
            stringify!(name)
        )
    );
}
pub type RSyscallPort = r_syscall_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_syscall_t {
    pub fd: *mut FILE,
    pub arch: *mut ::std::os::raw::c_char,
    pub os: *mut ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
    pub cpu: *mut ::std::os::raw::c_char,
    pub sysptr: *mut RSyscallItem,
    pub sysport: *mut RSyscallPort,
    pub db: *mut Sdb,
    pub srdb: *mut Sdb,
    pub refs: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_syscall_t() {
    assert_eq!(
        ::std::mem::size_of::<r_syscall_t>(),
        80usize,
        concat!("Size of: ", stringify!(r_syscall_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_syscall_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_syscall_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_t>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_t>())).arch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_t>())).os as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_t),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_t>())).bits as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_t>())).cpu as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_t),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_t>())).sysptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_t),
            "::",
            stringify!(sysptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_t>())).sysport as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_t),
            "::",
            stringify!(sysport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_t>())).db as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_t),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_t>())).srdb as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_t),
            "::",
            stringify!(srdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_t>())).refs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_t),
            "::",
            stringify!(refs)
        )
    );
}
pub type RSyscall = r_syscall_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_syscall_plugin_t {
    pub name: *mut ::std::os::raw::c_char,
    pub arch: *mut ::std::os::raw::c_char,
    pub os: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
    pub nargs: ::std::os::raw::c_int,
    pub args: *mut r_syscall_args_t,
}
#[test]
fn bindgen_test_layout_r_syscall_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_syscall_plugin_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_syscall_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_syscall_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_syscall_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_plugin_t>())).arch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_plugin_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_plugin_t>())).os as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_plugin_t),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_plugin_t>())).desc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_plugin_t>())).bits as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_plugin_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_plugin_t>())).nargs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_plugin_t),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_plugin_t>())).args as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_plugin_t),
            "::",
            stringify!(args)
        )
    );
}
pub type RSyscallPlugin = r_syscall_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_syscall_arch_plugin_t {
    pub name: *mut ::std::os::raw::c_char,
    pub arch: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub bits: *mut ::std::os::raw::c_int,
    pub nargs: ::std::os::raw::c_int,
    pub args: *mut *mut r_syscall_args_t,
}
#[test]
fn bindgen_test_layout_r_syscall_arch_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_syscall_arch_plugin_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_syscall_arch_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_syscall_arch_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_syscall_arch_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_arch_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_arch_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_arch_plugin_t>())).arch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_arch_plugin_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_arch_plugin_t>())).desc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_arch_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_arch_plugin_t>())).bits as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_arch_plugin_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_arch_plugin_t>())).nargs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_arch_plugin_t),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_syscall_arch_plugin_t>())).args as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_syscall_arch_plugin_t),
            "::",
            stringify!(args)
        )
    );
}
pub type RSyscallArchPlugin = r_syscall_arch_plugin_t;
extern "C" {
    pub fn r_syscall_item_new_from_string(
        name: *const ::std::os::raw::c_char,
        s: *const ::std::os::raw::c_char,
    ) -> *mut RSyscallItem;
}
extern "C" {
    pub fn r_syscall_item_free(si: *mut RSyscallItem);
}
extern "C" {
    pub fn r_syscall_new() -> *mut RSyscall;
}
extern "C" {
    pub fn r_syscall_free(ctx: *mut RSyscall);
}
extern "C" {
    pub fn r_syscall_ref(sc: *mut RSyscall) -> *mut RSyscall;
}
extern "C" {
    pub fn r_syscall_setup(
        s: *mut RSyscall,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
        cpu: *const ::std::os::raw::c_char,
        os: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_syscall_get(
        ctx: *mut RSyscall,
        num: ::std::os::raw::c_int,
        swi: ::std::os::raw::c_int,
    ) -> *mut RSyscallItem;
}
extern "C" {
    pub fn r_syscall_get_num(
        ctx: *mut RSyscall,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_syscall_get_i(
        ctx: *mut RSyscall,
        num: ::std::os::raw::c_int,
        swi: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_syscall_sysreg(
        s: *mut RSyscall,
        type_: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_syscall_list(ctx: *mut RSyscall) -> *mut RList;
}
extern "C" {
    pub fn r_syscall_get_swi(s: *mut RSyscall) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_syscall_get_io(
        s: *mut RSyscall,
        ioport: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub type SetP = HtPP;
pub type set_p_foreach_cb = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        p: *const ::std::os::raw::c_void,
    ) -> bool,
>;
pub type set_u_foreach_cb = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        u: ::std::os::raw::c_ulonglong,
    ) -> bool,
>;
extern "C" {
    pub fn set_p_new() -> *mut SetP;
}
extern "C" {
    pub fn set_p_add(p: *mut SetP, u: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn set_p_contains(s: *mut SetP, u: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn set_p_delete(s: *mut SetP, u: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn set_p_free(p: *mut SetP);
}
extern "C" {
    pub fn set_p_foreach(p: *mut SetP, cb: set_p_foreach_cb, u: *mut ::std::os::raw::c_void);
}
pub type SetU = HtUP;
extern "C" {
    pub fn set_u_new() -> *mut SetU;
}
extern "C" {
    pub fn set_u_add(p: *mut SetU, u: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn set_u_contains(s: *mut SetU, u: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn set_u_delete(s: *mut SetU, u: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn set_u_free(p: *mut SetU);
}
extern "C" {
    pub fn set_u_foreach(s: *mut SetU, cb: set_u_foreach_cb, u: *mut ::std::os::raw::c_void);
}
pub const r_syntax_highlight_type_t_R_SYNTAX_HIGHLIGHT_TYPE_KEYWORD: r_syntax_highlight_type_t = 0;
pub const r_syntax_highlight_type_t_R_SYNTAX_HIGHLIGHT_TYPE_COMMENT: r_syntax_highlight_type_t = 1;
pub const r_syntax_highlight_type_t_R_SYNTAX_HIGHLIGHT_TYPE_DATATYPE: r_syntax_highlight_type_t = 2;
pub const r_syntax_highlight_type_t_R_SYNTAX_HIGHLIGHT_TYPE_FUNCTION_NAME:
    r_syntax_highlight_type_t = 3;
pub const r_syntax_highlight_type_t_R_SYNTAX_HIGHLIGHT_TYPE_FUNCTION_PARAMETER:
    r_syntax_highlight_type_t = 4;
pub const r_syntax_highlight_type_t_R_SYNTAX_HIGHLIGHT_TYPE_LOCAL_VARIABLE:
    r_syntax_highlight_type_t = 5;
pub const r_syntax_highlight_type_t_R_SYNTAX_HIGHLIGHT_TYPE_CONSTANT_VARIABLE:
    r_syntax_highlight_type_t = 6;
pub const r_syntax_highlight_type_t_R_SYNTAX_HIGHLIGHT_TYPE_GLOBAL_VARIABLE:
    r_syntax_highlight_type_t = 7;
pub type r_syntax_highlight_type_t = ::std::os::raw::c_uint;
pub use self::r_syntax_highlight_type_t as RSyntaxHighlightType;
#[doc = "< Gives the offset of the specified range in annotation."]
pub const r_code_annotation_type_t_R_CODEMETA_TYPE_OFFSET: r_code_annotation_type_t = 0;
#[doc = "< Represents the kind of data the specified range represents for highlighting purposes."]
pub const r_code_annotation_type_t_R_CODEMETA_TYPE_SYNTAX_HIGHLIGHT: r_code_annotation_type_t = 1;
#[doc = "< Specified range in annotation represents a function name."]
pub const r_code_annotation_type_t_R_CODEMETA_TYPE_FUNCTION_NAME: r_code_annotation_type_t = 2;
#[doc = "< Specified range in annotation represents a global variable."]
pub const r_code_annotation_type_t_R_CODEMETA_TYPE_GLOBAL_VARIABLE: r_code_annotation_type_t = 3;
#[doc = "< Specified range in annotation represents a constant variable with an address."]
pub const r_code_annotation_type_t_R_CODEMETA_TYPE_CONSTANT_VARIABLE: r_code_annotation_type_t = 4;
#[doc = "< Specified range in annotation represents a local variable."]
pub const r_code_annotation_type_t_R_CODEMETA_TYPE_LOCAL_VARIABLE: r_code_annotation_type_t = 5;
#[doc = "< Specified range in annotation represents a function parameter."]
pub const r_code_annotation_type_t_R_CODEMETA_TYPE_FUNCTION_PARAMETER: r_code_annotation_type_t = 6;
#[doc = " Represents the type of annnotation."]
pub type r_code_annotation_type_t = ::std::os::raw::c_uint;
#[doc = " Represents the type of annnotation."]
pub use self::r_code_annotation_type_t as RCodeMetaItemType;
#[doc = " \\brief Annotations for the decompiled code are represented using this structure."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_codemeta_item_t {
    pub start: size_t,
    pub end: size_t,
    pub type_: RCodeMetaItemType,
    pub __bindgen_anon_1: r_codemeta_item_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union r_codemeta_item_t__bindgen_ty_1 {
    pub offset: r_codemeta_item_t__bindgen_ty_1__bindgen_ty_1,
    pub syntax_highlight: r_codemeta_item_t__bindgen_ty_1__bindgen_ty_2,
    pub reference: r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3,
    pub variable: r_codemeta_item_t__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_codemeta_item_t__bindgen_ty_1__bindgen_ty_1 {
    pub offset: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_codemeta_item_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_1>())).offset
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_codemeta_item_t__bindgen_ty_1__bindgen_ty_2 {
    pub type_: RSyntaxHighlightType,
}
#[test]
fn bindgen_test_layout_r_codemeta_item_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_2>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3 {
    pub name: *mut ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3>())).name
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3>())).offset
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_codemeta_item_t__bindgen_ty_1__bindgen_ty_4 {
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_codemeta_item_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_codemeta_item_t__bindgen_ty_1__bindgen_ty_4>())).name
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(name)
        )
    );
}
#[test]
fn bindgen_test_layout_r_codemeta_item_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_codemeta_item_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(r_codemeta_item_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_codemeta_item_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(r_codemeta_item_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_codemeta_item_t__bindgen_ty_1>())).offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_codemeta_item_t__bindgen_ty_1>())).syntax_highlight as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1),
            "::",
            stringify!(syntax_highlight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_codemeta_item_t__bindgen_ty_1>())).reference as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_codemeta_item_t__bindgen_ty_1>())).variable as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t__bindgen_ty_1),
            "::",
            stringify!(variable)
        )
    );
}
#[test]
fn bindgen_test_layout_r_codemeta_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_codemeta_item_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_codemeta_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_codemeta_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_codemeta_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_codemeta_item_t>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_codemeta_item_t>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_codemeta_item_t>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_item_t),
            "::",
            stringify!(type_)
        )
    );
}
#[doc = " \\brief Annotations for the decompiled code are represented using this structure."]
pub type RCodeMetaItem = r_codemeta_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_codemeta_t {
    #[doc = "< Decompiled code. RCodeMeta owns this string and it must free it."]
    pub code: *mut ::std::os::raw::c_char,
    #[doc = "< @ref RVector <RCodeMetaItem> contains the list of annotations for the decompiled code."]
    pub annotations: RVector,
    pub tree: *mut RContRBTree,
}
#[test]
fn bindgen_test_layout_r_codemeta_t() {
    assert_eq!(
        ::std::mem::size_of::<r_codemeta_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_codemeta_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_codemeta_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_codemeta_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_codemeta_t>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_codemeta_t>())).annotations as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_t),
            "::",
            stringify!(annotations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_codemeta_t>())).tree as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_codemeta_t),
            "::",
            stringify!(tree)
        )
    );
}
pub type RCodeMeta = r_codemeta_t;
extern "C" {
    pub fn r_codemeta_new(code: *const ::std::os::raw::c_char) -> *mut RCodeMeta;
}
extern "C" {
    pub fn r_codemeta_free(code: *mut RCodeMeta);
}
extern "C" {
    pub fn r_codemeta_item_new() -> *mut RCodeMetaItem;
}
extern "C" {
    pub fn r_codemeta_item_free(e: *mut RCodeMetaItem);
}
extern "C" {
    pub fn r_codemeta_item_fini(e: *mut RCodeMetaItem);
}
extern "C" {
    pub fn r_codemeta_item_is_reference(annotation: *mut RCodeMetaItem) -> bool;
}
extern "C" {
    pub fn r_codemeta_item_is_variable(annotation: *mut RCodeMetaItem) -> bool;
}
extern "C" {
    pub fn r_codemeta_add_item(code: *mut RCodeMeta, annotation: *mut RCodeMetaItem);
}
extern "C" {
    pub fn r_codemeta_at(code: *mut RCodeMeta, offset: size_t) -> *mut RPVector;
}
extern "C" {
    pub fn r_codemeta_in(code: *mut RCodeMeta, start: size_t, end: size_t) -> *mut RPVector;
}
extern "C" {
    pub fn r_codemeta_line_offsets(code: *mut RCodeMeta) -> *mut RVector;
}
extern "C" {
    pub fn r_codemeta_item_clone(code: *mut RCodeMetaItem) -> *mut RCodeMetaItem;
}
extern "C" {
    pub fn r_codemeta_clone(code: *mut RCodeMeta) -> *mut RCodeMeta;
}
extern "C" {
    pub fn r_anal_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_dwarf_context {
    pub info: *const RBinDwarfDebugInfo,
    pub loc: *mut HtUP,
}
#[test]
fn bindgen_test_layout_r_anal_dwarf_context() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_dwarf_context>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_dwarf_context))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_dwarf_context>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_dwarf_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_dwarf_context>())).info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_dwarf_context),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_dwarf_context>())).loc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_dwarf_context),
            "::",
            stringify!(loc)
        )
    );
}
pub type RAnalDwarfContext = r_anal_dwarf_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RAnalMetaUserItem {
    pub anal: *mut r_anal_t,
    pub type_: ::std::os::raw::c_int,
    pub rad: ::std::os::raw::c_int,
    pub cb: SdbForeachCallback,
    pub user: *mut ::std::os::raw::c_void,
    pub count: ::std::os::raw::c_int,
    pub fcn: *mut r_anal_function_t,
    pub pj: *mut PJ,
}
#[test]
fn bindgen_test_layout_RAnalMetaUserItem() {
    assert_eq!(
        ::std::mem::size_of::<RAnalMetaUserItem>(),
        56usize,
        concat!("Size of: ", stringify!(RAnalMetaUserItem))
    );
    assert_eq!(
        ::std::mem::align_of::<RAnalMetaUserItem>(),
        8usize,
        concat!("Alignment of ", stringify!(RAnalMetaUserItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RAnalMetaUserItem>())).anal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RAnalMetaUserItem),
            "::",
            stringify!(anal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RAnalMetaUserItem>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RAnalMetaUserItem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RAnalMetaUserItem>())).rad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RAnalMetaUserItem),
            "::",
            stringify!(rad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RAnalMetaUserItem>())).cb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RAnalMetaUserItem),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RAnalMetaUserItem>())).user as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RAnalMetaUserItem),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RAnalMetaUserItem>())).count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RAnalMetaUserItem),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RAnalMetaUserItem>())).fcn as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RAnalMetaUserItem),
            "::",
            stringify!(fcn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RAnalMetaUserItem>())).pj as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RAnalMetaUserItem),
            "::",
            stringify!(pj)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_range_t {
    pub from: ::std::os::raw::c_ulonglong,
    pub to: ::std::os::raw::c_ulonglong,
    pub bits: ::std::os::raw::c_int,
    pub rb_max_addr: ::std::os::raw::c_ulonglong,
    pub rb: RBNode,
}
#[test]
fn bindgen_test_layout_r_anal_range_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_range_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_anal_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_range_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_range_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_range_t>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_range_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_range_t>())).to as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_range_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_range_t>())).bits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_range_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_range_t>())).rb_max_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_range_t),
            "::",
            stringify!(rb_max_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_range_t>())).rb as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_range_t),
            "::",
            stringify!(rb)
        )
    );
}
pub type RAnalRange = r_anal_range_t;
pub const R_ANAL_DATA_TYPE_NULL: ::std::os::raw::c_uint = 0;
pub const R_ANAL_DATA_TYPE_UNKNOWN: ::std::os::raw::c_uint = 1;
pub const R_ANAL_DATA_TYPE_STRING: ::std::os::raw::c_uint = 2;
pub const R_ANAL_DATA_TYPE_WIDE_STRING: ::std::os::raw::c_uint = 3;
pub const R_ANAL_DATA_TYPE_POINTER: ::std::os::raw::c_uint = 4;
pub const R_ANAL_DATA_TYPE_NUMBER: ::std::os::raw::c_uint = 5;
pub const R_ANAL_DATA_TYPE_INVALID: ::std::os::raw::c_uint = 6;
pub const R_ANAL_DATA_TYPE_HEADER: ::std::os::raw::c_uint = 7;
pub const R_ANAL_DATA_TYPE_SEQUENCE: ::std::os::raw::c_uint = 8;
pub const R_ANAL_DATA_TYPE_PATTERN: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_anal_type_var_t {
    pub name: *mut ::std::os::raw::c_char,
    pub index: ::std::os::raw::c_int,
    pub scope: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_ushort,
    pub size: ::std::os::raw::c_uchar,
    pub value: r_anal_type_var_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union r_anal_type_var_t__bindgen_ty_1 {
    pub v8: ::std::os::raw::c_uchar,
    pub v16: ::std::os::raw::c_ushort,
    pub v32: ::std::os::raw::c_uint,
    pub v64: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_anal_type_var_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_type_var_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(r_anal_type_var_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_type_var_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_type_var_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_var_t__bindgen_ty_1>())).v8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_var_t__bindgen_ty_1),
            "::",
            stringify!(v8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_var_t__bindgen_ty_1>())).v16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_var_t__bindgen_ty_1),
            "::",
            stringify!(v16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_var_t__bindgen_ty_1>())).v32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_var_t__bindgen_ty_1),
            "::",
            stringify!(v32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_var_t__bindgen_ty_1>())).v64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_var_t__bindgen_ty_1),
            "::",
            stringify!(v64)
        )
    );
}
#[test]
fn bindgen_test_layout_r_anal_type_var_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_type_var_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_type_var_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_type_var_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_type_var_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_var_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_var_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_var_t>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_var_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_var_t>())).scope as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_var_t),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_var_t>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_var_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_var_t>())).size as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_var_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_var_t>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_var_t),
            "::",
            stringify!(value)
        )
    );
}
pub type RAnalTypeVar = r_anal_type_var_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_anal_type_ptr_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_ushort,
    pub size: ::std::os::raw::c_uchar,
    pub value: r_anal_type_ptr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union r_anal_type_ptr_t__bindgen_ty_1 {
    pub v8: ::std::os::raw::c_uchar,
    pub v16: ::std::os::raw::c_ushort,
    pub v32: ::std::os::raw::c_uint,
    pub v64: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_anal_type_ptr_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_type_ptr_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(r_anal_type_ptr_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_type_ptr_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_type_ptr_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_ptr_t__bindgen_ty_1>())).v8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_ptr_t__bindgen_ty_1),
            "::",
            stringify!(v8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_ptr_t__bindgen_ty_1>())).v16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_ptr_t__bindgen_ty_1),
            "::",
            stringify!(v16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_ptr_t__bindgen_ty_1>())).v32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_ptr_t__bindgen_ty_1),
            "::",
            stringify!(v32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_ptr_t__bindgen_ty_1>())).v64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_ptr_t__bindgen_ty_1),
            "::",
            stringify!(v64)
        )
    );
}
#[test]
fn bindgen_test_layout_r_anal_type_ptr_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_type_ptr_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_type_ptr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_type_ptr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_type_ptr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_ptr_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_ptr_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_ptr_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_ptr_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_ptr_t>())).size as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_ptr_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_ptr_t>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_ptr_t),
            "::",
            stringify!(value)
        )
    );
}
pub type RAnalTypePtr = r_anal_type_ptr_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_anal_type_array_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_ushort,
    pub size: ::std::os::raw::c_uchar,
    pub count: ::std::os::raw::c_ulonglong,
    pub value: r_anal_type_array_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union r_anal_type_array_t__bindgen_ty_1 {
    pub v8: *mut ::std::os::raw::c_uchar,
    pub v16: *mut ::std::os::raw::c_ushort,
    pub v32: *mut ::std::os::raw::c_uint,
    pub v64: *mut ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_anal_type_array_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_type_array_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(r_anal_type_array_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_type_array_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_anal_type_array_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_array_t__bindgen_ty_1>())).v8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_array_t__bindgen_ty_1),
            "::",
            stringify!(v8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_array_t__bindgen_ty_1>())).v16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_array_t__bindgen_ty_1),
            "::",
            stringify!(v16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_array_t__bindgen_ty_1>())).v32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_array_t__bindgen_ty_1),
            "::",
            stringify!(v32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_type_array_t__bindgen_ty_1>())).v64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_array_t__bindgen_ty_1),
            "::",
            stringify!(v64)
        )
    );
}
#[test]
fn bindgen_test_layout_r_anal_type_array_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_type_array_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_type_array_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_type_array_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_type_array_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_array_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_array_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_array_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_array_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_array_t>())).size as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_array_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_array_t>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_array_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_array_t>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_array_t),
            "::",
            stringify!(value)
        )
    );
}
pub type RAnalTypeArray = r_anal_type_array_t;
pub type RAnalTypeStruct = r_anal_type_struct_t;
pub type RAnalType = r_anal_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_type_struct_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_uint,
    pub parent: *mut ::std::os::raw::c_void,
    pub items: *mut RAnalType,
}
#[test]
fn bindgen_test_layout_r_anal_type_struct_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_type_struct_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_type_struct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_type_struct_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_type_struct_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_struct_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_struct_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_struct_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_struct_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_struct_t>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_struct_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_struct_t>())).parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_struct_t),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_struct_t>())).items as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_struct_t),
            "::",
            stringify!(items)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_type_union_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_uint,
    pub parent: *mut ::std::os::raw::c_void,
    pub items: *mut RAnalType,
}
#[test]
fn bindgen_test_layout_r_anal_type_union_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_type_union_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_type_union_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_type_union_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_type_union_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_union_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_union_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_union_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_union_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_union_t>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_union_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_union_t>())).parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_union_t),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_union_t>())).items as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_union_t),
            "::",
            stringify!(items)
        )
    );
}
pub type RAnalTypeUnion = r_anal_type_union_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_type_alloca_t {
    pub address: ::std::os::raw::c_long,
    pub size: ::std::os::raw::c_long,
    pub parent: *mut ::std::os::raw::c_void,
    pub items: *mut RAnalType,
}
#[test]
fn bindgen_test_layout_r_anal_type_alloca_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_type_alloca_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_type_alloca_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_type_alloca_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_type_alloca_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_alloca_t>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_alloca_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_alloca_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_alloca_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_alloca_t>())).parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_alloca_t),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_alloca_t>())).items as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_alloca_t),
            "::",
            stringify!(items)
        )
    );
}
pub type RAnalTypeAlloca = r_anal_type_alloca_t;
pub const R_ANAL_FQUALIFIER_NONE: ::std::os::raw::c_uint = 0;
pub const R_ANAL_FQUALIFIER_STATIC: ::std::os::raw::c_uint = 1;
pub const R_ANAL_FQUALIFIER_VOLATILE: ::std::os::raw::c_uint = 2;
pub const R_ANAL_FQUALIFIER_INLINE: ::std::os::raw::c_uint = 3;
pub const R_ANAL_FQUALIFIER_NAKED: ::std::os::raw::c_uint = 4;
pub const R_ANAL_FQUALIFIER_VIRTUAL: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const R_ANAL_FCN_TYPE_NULL: ::std::os::raw::c_int = 0;
pub const R_ANAL_FCN_TYPE_FCN: ::std::os::raw::c_int = 1;
pub const R_ANAL_FCN_TYPE_LOC: ::std::os::raw::c_int = 2;
pub const R_ANAL_FCN_TYPE_SYM: ::std::os::raw::c_int = 4;
pub const R_ANAL_FCN_TYPE_IMP: ::std::os::raw::c_int = 8;
pub const R_ANAL_FCN_TYPE_INT: ::std::os::raw::c_int = 16;
pub const R_ANAL_FCN_TYPE_ROOT: ::std::os::raw::c_int = 32;
pub const R_ANAL_FCN_TYPE_ANY: ::std::os::raw::c_int = -1;
pub type _bindgen_ty_21 = ::std::os::raw::c_int;
pub const R_ANAL_DIFF_TYPE_NULL: ::std::os::raw::c_uint = 0;
pub const R_ANAL_DIFF_TYPE_MATCH: ::std::os::raw::c_uint = 109;
pub const R_ANAL_DIFF_TYPE_UNMATCH: ::std::os::raw::c_uint = 117;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_enum_case_t {
    pub name: *mut ::std::os::raw::c_char,
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_anal_enum_case_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_enum_case_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_enum_case_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_enum_case_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_enum_case_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_enum_case_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_enum_case_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_enum_case_t>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_enum_case_t),
            "::",
            stringify!(val)
        )
    );
}
pub type RAnalEnumCase = r_anal_enum_case_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_struct_member_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut ::std::os::raw::c_char,
    pub offset: size_t,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_r_anal_struct_member_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_struct_member_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_struct_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_struct_member_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_struct_member_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_struct_member_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_struct_member_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_struct_member_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_struct_member_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_struct_member_t>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_struct_member_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_struct_member_t>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_struct_member_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RAnalStructMember = r_anal_struct_member_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_union_member_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut ::std::os::raw::c_char,
    pub offset: size_t,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_r_anal_union_member_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_union_member_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_union_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_union_member_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_union_member_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_union_member_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_union_member_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_union_member_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_union_member_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_union_member_t>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_union_member_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_union_member_t>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_union_member_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RAnalUnionMember = r_anal_union_member_t;
pub const RAnalBaseTypeKind_R_ANAL_BASE_TYPE_KIND_STRUCT: RAnalBaseTypeKind = 0;
pub const RAnalBaseTypeKind_R_ANAL_BASE_TYPE_KIND_UNION: RAnalBaseTypeKind = 1;
pub const RAnalBaseTypeKind_R_ANAL_BASE_TYPE_KIND_ENUM: RAnalBaseTypeKind = 2;
pub const RAnalBaseTypeKind_R_ANAL_BASE_TYPE_KIND_TYPEDEF: RAnalBaseTypeKind = 3;
pub const RAnalBaseTypeKind_R_ANAL_BASE_TYPE_KIND_ATOMIC: RAnalBaseTypeKind = 4;
pub type RAnalBaseTypeKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_base_type_struct_t {
    pub members: RVector,
}
#[test]
fn bindgen_test_layout_r_anal_base_type_struct_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_base_type_struct_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_anal_base_type_struct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_base_type_struct_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_base_type_struct_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_base_type_struct_t>())).members as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_type_struct_t),
            "::",
            stringify!(members)
        )
    );
}
pub type RAnalBaseTypeStruct = r_anal_base_type_struct_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_base_type_union_t {
    pub members: RVector,
}
#[test]
fn bindgen_test_layout_r_anal_base_type_union_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_base_type_union_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_anal_base_type_union_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_base_type_union_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_base_type_union_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_base_type_union_t>())).members as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_type_union_t),
            "::",
            stringify!(members)
        )
    );
}
pub type RAnalBaseTypeUnion = r_anal_base_type_union_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_base_type_enum_t {
    pub cases: RVector,
}
#[test]
fn bindgen_test_layout_r_anal_base_type_enum_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_base_type_enum_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_anal_base_type_enum_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_base_type_enum_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_base_type_enum_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_base_type_enum_t>())).cases as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_type_enum_t),
            "::",
            stringify!(cases)
        )
    );
}
pub type RAnalBaseTypeEnum = r_anal_base_type_enum_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_anal_base_type_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_ulonglong,
    pub kind: RAnalBaseTypeKind,
    pub __bindgen_anon_1: r_anal_base_type_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union r_anal_base_type_t__bindgen_ty_1 {
    pub struct_data: RAnalBaseTypeStruct,
    pub enum_data: RAnalBaseTypeEnum,
    pub union_data: RAnalBaseTypeUnion,
}
#[test]
fn bindgen_test_layout_r_anal_base_type_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_base_type_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(r_anal_base_type_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_base_type_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_anal_base_type_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_base_type_t__bindgen_ty_1>())).struct_data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_type_t__bindgen_ty_1),
            "::",
            stringify!(struct_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_base_type_t__bindgen_ty_1>())).enum_data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_type_t__bindgen_ty_1),
            "::",
            stringify!(enum_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_base_type_t__bindgen_ty_1>())).union_data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_type_t__bindgen_ty_1),
            "::",
            stringify!(union_data)
        )
    );
}
#[test]
fn bindgen_test_layout_r_anal_base_type_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_base_type_t>(),
        80usize,
        concat!("Size of: ", stringify!(r_anal_base_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_base_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_base_type_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_base_type_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_type_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_base_type_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_type_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_base_type_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_type_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_base_type_t>())).kind as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_type_t),
            "::",
            stringify!(kind)
        )
    );
}
pub type RAnalBaseType = r_anal_base_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_diff_t {
    pub type_: ::std::os::raw::c_int,
    pub addr: ::std::os::raw::c_ulonglong,
    pub dist: f64,
    pub name: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_anal_diff_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_diff_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_anal_diff_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_diff_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_diff_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_diff_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_diff_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_diff_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_diff_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_diff_t>())).dist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_diff_t),
            "::",
            stringify!(dist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_diff_t>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_diff_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_diff_t>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_diff_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RAnalDiff = r_anal_diff_t;
pub type RAnalAttr = r_anal_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_attr_t {
    pub key: *mut ::std::os::raw::c_char,
    pub value: ::std::os::raw::c_long,
    pub next: *mut RAnalAttr,
}
#[test]
fn bindgen_test_layout_r_anal_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_attr_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_attr_t>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_attr_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_attr_t>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_attr_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_attr_t>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_attr_t),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_fcn_meta_t {
    pub _min: ::std::os::raw::c_ulonglong,
    pub _max: ::std::os::raw::c_ulonglong,
    pub numrefs: ::std::os::raw::c_int,
    pub numcallrefs: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_anal_fcn_meta_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_fcn_meta_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_fcn_meta_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_fcn_meta_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_fcn_meta_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_fcn_meta_t>()))._min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_fcn_meta_t),
            "::",
            stringify!(_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_fcn_meta_t>()))._max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_fcn_meta_t),
            "::",
            stringify!(_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_fcn_meta_t>())).numrefs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_fcn_meta_t),
            "::",
            stringify!(numrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_fcn_meta_t>())).numcallrefs as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_fcn_meta_t),
            "::",
            stringify!(numcallrefs)
        )
    );
}
pub type RAnalFcnMeta = r_anal_fcn_meta_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_function_t {
    pub name: *mut ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub cc: *const ::std::os::raw::c_char,
    pub addr: ::std::os::raw::c_ulonglong,
    pub labels: *mut HtUP,
    pub label_addrs: *mut HtPP,
    pub vars: RPVector,
    pub inst_vars: *mut HtUP,
    pub reg_save_area: ::std::os::raw::c_ulonglong,
    pub bp_off: ::std::os::raw::c_longlong,
    pub stack: ::std::os::raw::c_longlong,
    pub maxstack: ::std::os::raw::c_int,
    pub ninstr: ::std::os::raw::c_int,
    pub folded: bool,
    pub is_pure: bool,
    pub is_variadic: bool,
    pub has_changed: bool,
    pub bp_frame: bool,
    pub is_noreturn: bool,
    pub fingerprint: *mut ::std::os::raw::c_uchar,
    pub fingerprint_size: size_t,
    pub diff: *mut RAnalDiff,
    pub bbs: *mut RList,
    pub meta: RAnalFcnMeta,
    pub imports: *mut RList,
    pub anal: *mut r_anal_t,
}
#[test]
fn bindgen_test_layout_r_anal_function_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_function_t>(),
        216usize,
        concat!("Size of: ", stringify!(r_anal_function_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_function_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_function_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).bits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).cc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).labels as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(labels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).label_addrs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(label_addrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).vars as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).inst_vars as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(inst_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).reg_save_area as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(reg_save_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).bp_off as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(bp_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).stack as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).maxstack as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(maxstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).ninstr as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(ninstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).folded as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(folded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).is_pure as *const _ as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(is_pure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).is_variadic as *const _ as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(is_variadic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).has_changed as *const _ as usize },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(has_changed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).bp_frame as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(bp_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).is_noreturn as *const _ as usize },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(is_noreturn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).fingerprint as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(fingerprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_function_t>())).fingerprint_size as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(fingerprint_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).diff as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(diff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).bbs as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(bbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).meta as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).imports as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(imports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_function_t>())).anal as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_function_t),
            "::",
            stringify!(anal)
        )
    );
}
pub type RAnalFunction = r_anal_function_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_func_arg_t {
    pub name: *const ::std::os::raw::c_char,
    pub fmt: *const ::std::os::raw::c_char,
    pub cc_source: *const ::std::os::raw::c_char,
    pub orig_c_type: *mut ::std::os::raw::c_char,
    pub c_type: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_ulonglong,
    pub src: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_anal_func_arg_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_func_arg_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_anal_func_arg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_func_arg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_func_arg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_func_arg_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_func_arg_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_func_arg_t>())).fmt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_func_arg_t),
            "::",
            stringify!(fmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_func_arg_t>())).cc_source as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_func_arg_t),
            "::",
            stringify!(cc_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_func_arg_t>())).orig_c_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_func_arg_t),
            "::",
            stringify!(orig_c_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_func_arg_t>())).c_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_func_arg_t),
            "::",
            stringify!(c_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_func_arg_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_func_arg_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_func_arg_t>())).src as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_func_arg_t),
            "::",
            stringify!(src)
        )
    );
}
pub type RAnalFuncArg = r_anal_func_arg_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_type_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub content: *mut RList,
}
#[test]
fn bindgen_test_layout_r_anal_type_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_type_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_type_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_t>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_type_t>())).content as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_type_t),
            "::",
            stringify!(content)
        )
    );
}
pub const RAnalMetaType_R_META_TYPE_ANY: RAnalMetaType = -1;
pub const RAnalMetaType_R_META_TYPE_DATA: RAnalMetaType = 100;
pub const RAnalMetaType_R_META_TYPE_CODE: RAnalMetaType = 99;
pub const RAnalMetaType_R_META_TYPE_STRING: RAnalMetaType = 115;
pub const RAnalMetaType_R_META_TYPE_FORMAT: RAnalMetaType = 102;
pub const RAnalMetaType_R_META_TYPE_MAGIC: RAnalMetaType = 109;
pub const RAnalMetaType_R_META_TYPE_HIDE: RAnalMetaType = 104;
pub const RAnalMetaType_R_META_TYPE_COMMENT: RAnalMetaType = 67;
pub const RAnalMetaType_R_META_TYPE_RUN: RAnalMetaType = 114;
pub const RAnalMetaType_R_META_TYPE_HIGHLIGHT: RAnalMetaType = 72;
pub const RAnalMetaType_R_META_TYPE_VARTYPE: RAnalMetaType = 116;
pub type RAnalMetaType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_meta_item_t {
    pub type_: RAnalMetaType,
    pub subtype: ::std::os::raw::c_int,
    pub str_: *mut ::std::os::raw::c_char,
    pub space: *const RSpace,
}
#[test]
fn bindgen_test_layout_r_anal_meta_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_meta_item_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_meta_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_meta_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_meta_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_meta_item_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_meta_item_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_meta_item_t>())).subtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_meta_item_t),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_meta_item_t>())).str_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_meta_item_t),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_meta_item_t>())).space as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_meta_item_t),
            "::",
            stringify!(space)
        )
    );
}
pub type RAnalMetaItem = r_anal_meta_item_t;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_UNKNOWN: RAnalOpFamily = -1;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_CPU: RAnalOpFamily = 0;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_FPU: RAnalOpFamily = 1;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_MMX: RAnalOpFamily = 2;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_SSE: RAnalOpFamily = 3;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_PRIV: RAnalOpFamily = 4;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_CRYPTO: RAnalOpFamily = 5;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_THREAD: RAnalOpFamily = 6;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_VIRT: RAnalOpFamily = 7;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_SECURITY: RAnalOpFamily = 8;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_IO: RAnalOpFamily = 9;
pub const RAnalOpFamily_R_ANAL_OP_FAMILY_LAST: RAnalOpFamily = 10;
pub type RAnalOpFamily = ::std::os::raw::c_int;
pub const RAnalOpPrefix_R_ANAL_OP_PREFIX_COND: RAnalOpPrefix = 1;
pub const RAnalOpPrefix_R_ANAL_OP_PREFIX_REP: RAnalOpPrefix = 2;
pub const RAnalOpPrefix_R_ANAL_OP_PREFIX_REPNE: RAnalOpPrefix = 4;
pub const RAnalOpPrefix_R_ANAL_OP_PREFIX_LOCK: RAnalOpPrefix = 8;
pub const RAnalOpPrefix_R_ANAL_OP_PREFIX_LIKELY: RAnalOpPrefix = 16;
pub const RAnalOpPrefix_R_ANAL_OP_PREFIX_UNLIKELY: RAnalOpPrefix = 32;
pub type RAnalOpPrefix = ::std::os::raw::c_uint;
pub const _RAnalOpType_R_ANAL_OP_TYPE_COND: _RAnalOpType = 2147483648;
pub const _RAnalOpType_R_ANAL_OP_TYPE_REP: _RAnalOpType = 1073741824;
pub const _RAnalOpType_R_ANAL_OP_TYPE_MEM: _RAnalOpType = 536870912;
pub const _RAnalOpType_R_ANAL_OP_TYPE_REG: _RAnalOpType = 268435456;
pub const _RAnalOpType_R_ANAL_OP_TYPE_IND: _RAnalOpType = 134217728;
pub const _RAnalOpType_R_ANAL_OP_TYPE_NULL: _RAnalOpType = 0;
pub const _RAnalOpType_R_ANAL_OP_TYPE_JMP: _RAnalOpType = 1;
pub const _RAnalOpType_R_ANAL_OP_TYPE_UJMP: _RAnalOpType = 2;
pub const _RAnalOpType_R_ANAL_OP_TYPE_RJMP: _RAnalOpType = 268435458;
pub const _RAnalOpType_R_ANAL_OP_TYPE_IJMP: _RAnalOpType = 134217730;
pub const _RAnalOpType_R_ANAL_OP_TYPE_IRJMP: _RAnalOpType = 402653186;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CJMP: _RAnalOpType = 2147483649;
pub const _RAnalOpType_R_ANAL_OP_TYPE_RCJMP: _RAnalOpType = 2415919105;
pub const _RAnalOpType_R_ANAL_OP_TYPE_MJMP: _RAnalOpType = 536870913;
pub const _RAnalOpType_R_ANAL_OP_TYPE_MCJMP: _RAnalOpType = 2684354561;
pub const _RAnalOpType_R_ANAL_OP_TYPE_UCJMP: _RAnalOpType = 2147483650;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CALL: _RAnalOpType = 3;
pub const _RAnalOpType_R_ANAL_OP_TYPE_UCALL: _RAnalOpType = 4;
pub const _RAnalOpType_R_ANAL_OP_TYPE_RCALL: _RAnalOpType = 268435460;
pub const _RAnalOpType_R_ANAL_OP_TYPE_ICALL: _RAnalOpType = 134217732;
pub const _RAnalOpType_R_ANAL_OP_TYPE_IRCALL: _RAnalOpType = 402653188;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CCALL: _RAnalOpType = 2147483651;
pub const _RAnalOpType_R_ANAL_OP_TYPE_UCCALL: _RAnalOpType = 2147483652;
pub const _RAnalOpType_R_ANAL_OP_TYPE_RET: _RAnalOpType = 5;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CRET: _RAnalOpType = 2147483653;
pub const _RAnalOpType_R_ANAL_OP_TYPE_ILL: _RAnalOpType = 6;
pub const _RAnalOpType_R_ANAL_OP_TYPE_UNK: _RAnalOpType = 7;
pub const _RAnalOpType_R_ANAL_OP_TYPE_NOP: _RAnalOpType = 8;
pub const _RAnalOpType_R_ANAL_OP_TYPE_MOV: _RAnalOpType = 9;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CMOV: _RAnalOpType = 2147483657;
pub const _RAnalOpType_R_ANAL_OP_TYPE_TRAP: _RAnalOpType = 10;
pub const _RAnalOpType_R_ANAL_OP_TYPE_SWI: _RAnalOpType = 11;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CSWI: _RAnalOpType = 2147483659;
pub const _RAnalOpType_R_ANAL_OP_TYPE_UPUSH: _RAnalOpType = 12;
pub const _RAnalOpType_R_ANAL_OP_TYPE_RPUSH: _RAnalOpType = 268435468;
pub const _RAnalOpType_R_ANAL_OP_TYPE_PUSH: _RAnalOpType = 13;
pub const _RAnalOpType_R_ANAL_OP_TYPE_POP: _RAnalOpType = 14;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CMP: _RAnalOpType = 15;
pub const _RAnalOpType_R_ANAL_OP_TYPE_ACMP: _RAnalOpType = 16;
pub const _RAnalOpType_R_ANAL_OP_TYPE_ADD: _RAnalOpType = 17;
pub const _RAnalOpType_R_ANAL_OP_TYPE_SUB: _RAnalOpType = 18;
pub const _RAnalOpType_R_ANAL_OP_TYPE_IO: _RAnalOpType = 19;
pub const _RAnalOpType_R_ANAL_OP_TYPE_MUL: _RAnalOpType = 20;
pub const _RAnalOpType_R_ANAL_OP_TYPE_DIV: _RAnalOpType = 21;
pub const _RAnalOpType_R_ANAL_OP_TYPE_SHR: _RAnalOpType = 22;
pub const _RAnalOpType_R_ANAL_OP_TYPE_SHL: _RAnalOpType = 23;
pub const _RAnalOpType_R_ANAL_OP_TYPE_SAL: _RAnalOpType = 24;
pub const _RAnalOpType_R_ANAL_OP_TYPE_SAR: _RAnalOpType = 25;
pub const _RAnalOpType_R_ANAL_OP_TYPE_OR: _RAnalOpType = 26;
pub const _RAnalOpType_R_ANAL_OP_TYPE_AND: _RAnalOpType = 27;
pub const _RAnalOpType_R_ANAL_OP_TYPE_XOR: _RAnalOpType = 28;
pub const _RAnalOpType_R_ANAL_OP_TYPE_NOR: _RAnalOpType = 29;
pub const _RAnalOpType_R_ANAL_OP_TYPE_NOT: _RAnalOpType = 30;
pub const _RAnalOpType_R_ANAL_OP_TYPE_STORE: _RAnalOpType = 31;
pub const _RAnalOpType_R_ANAL_OP_TYPE_LOAD: _RAnalOpType = 32;
pub const _RAnalOpType_R_ANAL_OP_TYPE_LEA: _RAnalOpType = 33;
pub const _RAnalOpType_R_ANAL_OP_TYPE_LEAVE: _RAnalOpType = 34;
pub const _RAnalOpType_R_ANAL_OP_TYPE_ROR: _RAnalOpType = 35;
pub const _RAnalOpType_R_ANAL_OP_TYPE_ROL: _RAnalOpType = 36;
pub const _RAnalOpType_R_ANAL_OP_TYPE_XCHG: _RAnalOpType = 37;
pub const _RAnalOpType_R_ANAL_OP_TYPE_MOD: _RAnalOpType = 38;
pub const _RAnalOpType_R_ANAL_OP_TYPE_SWITCH: _RAnalOpType = 39;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CASE: _RAnalOpType = 40;
pub const _RAnalOpType_R_ANAL_OP_TYPE_LENGTH: _RAnalOpType = 41;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CAST: _RAnalOpType = 42;
pub const _RAnalOpType_R_ANAL_OP_TYPE_NEW: _RAnalOpType = 43;
pub const _RAnalOpType_R_ANAL_OP_TYPE_ABS: _RAnalOpType = 44;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CPL: _RAnalOpType = 45;
pub const _RAnalOpType_R_ANAL_OP_TYPE_CRYPTO: _RAnalOpType = 46;
pub const _RAnalOpType_R_ANAL_OP_TYPE_SYNC: _RAnalOpType = 47;
pub type _RAnalOpType = ::std::os::raw::c_uint;
pub const RAnalOpMask_R_ANAL_OP_MASK_BASIC: RAnalOpMask = 0;
pub const RAnalOpMask_R_ANAL_OP_MASK_ESIL: RAnalOpMask = 1;
pub const RAnalOpMask_R_ANAL_OP_MASK_VAL: RAnalOpMask = 2;
pub const RAnalOpMask_R_ANAL_OP_MASK_HINT: RAnalOpMask = 4;
pub const RAnalOpMask_R_ANAL_OP_MASK_OPEX: RAnalOpMask = 8;
pub const RAnalOpMask_R_ANAL_OP_MASK_DISASM: RAnalOpMask = 16;
pub const RAnalOpMask_R_ANAL_OP_MASK_ALL: RAnalOpMask = 31;
pub type RAnalOpMask = ::std::os::raw::c_uint;
pub const _RAnalCond_R_ANAL_COND_AL: _RAnalCond = 0;
pub const _RAnalCond_R_ANAL_COND_EQ: _RAnalCond = 1;
pub const _RAnalCond_R_ANAL_COND_NE: _RAnalCond = 2;
pub const _RAnalCond_R_ANAL_COND_GE: _RAnalCond = 3;
pub const _RAnalCond_R_ANAL_COND_GT: _RAnalCond = 4;
pub const _RAnalCond_R_ANAL_COND_LE: _RAnalCond = 5;
pub const _RAnalCond_R_ANAL_COND_LT: _RAnalCond = 6;
pub const _RAnalCond_R_ANAL_COND_NV: _RAnalCond = 7;
pub const _RAnalCond_R_ANAL_COND_HS: _RAnalCond = 8;
pub const _RAnalCond_R_ANAL_COND_LO: _RAnalCond = 9;
pub const _RAnalCond_R_ANAL_COND_MI: _RAnalCond = 10;
pub const _RAnalCond_R_ANAL_COND_PL: _RAnalCond = 11;
pub const _RAnalCond_R_ANAL_COND_VS: _RAnalCond = 12;
pub const _RAnalCond_R_ANAL_COND_VC: _RAnalCond = 13;
pub const _RAnalCond_R_ANAL_COND_HI: _RAnalCond = 14;
pub const _RAnalCond_R_ANAL_COND_LS: _RAnalCond = 15;
pub type _RAnalCond = ::std::os::raw::c_uint;
pub const _RAnalVarScope_R_ANAL_VAR_SCOPE_LOCAL: _RAnalVarScope = 1;
pub type _RAnalVarScope = ::std::os::raw::c_uint;
pub const RAnalStackOp_R_ANAL_STACK_NULL: RAnalStackOp = 0;
pub const RAnalStackOp_R_ANAL_STACK_NOP: RAnalStackOp = 1;
pub const RAnalStackOp_R_ANAL_STACK_INC: RAnalStackOp = 2;
pub const RAnalStackOp_R_ANAL_STACK_GET: RAnalStackOp = 3;
pub const RAnalStackOp_R_ANAL_STACK_SET: RAnalStackOp = 4;
pub const RAnalStackOp_R_ANAL_STACK_RESET: RAnalStackOp = 5;
pub const RAnalStackOp_R_ANAL_STACK_ALIGN: RAnalStackOp = 6;
pub type RAnalStackOp = ::std::os::raw::c_uint;
pub const R_ANAL_REFLINE_TYPE_UTF8: ::std::os::raw::c_uint = 1;
pub const R_ANAL_REFLINE_TYPE_WIDE: ::std::os::raw::c_uint = 2;
pub const R_ANAL_REFLINE_TYPE_MIDDLE_BEFORE: ::std::os::raw::c_uint = 4;
pub const R_ANAL_REFLINE_TYPE_MIDDLE_AFTER: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const R_ANAL_RET_NOP: ::std::os::raw::c_int = 0;
pub const R_ANAL_RET_ERROR: ::std::os::raw::c_int = -1;
pub const R_ANAL_RET_DUP: ::std::os::raw::c_int = -2;
pub const R_ANAL_RET_NEW: ::std::os::raw::c_int = -3;
pub const R_ANAL_RET_END: ::std::os::raw::c_int = -4;
pub type _bindgen_ty_24 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_case_obj_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub jump: ::std::os::raw::c_ulonglong,
    pub value: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_anal_case_obj_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_case_obj_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_case_obj_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_case_obj_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_case_obj_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_case_obj_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_case_obj_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_case_obj_t>())).jump as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_case_obj_t),
            "::",
            stringify!(jump)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_case_obj_t>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_case_obj_t),
            "::",
            stringify!(value)
        )
    );
}
pub type RAnalCaseOp = r_anal_case_obj_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_switch_obj_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub min_val: ::std::os::raw::c_ulonglong,
    pub def_val: ::std::os::raw::c_ulonglong,
    pub max_val: ::std::os::raw::c_ulonglong,
    pub cases: *mut RList,
}
#[test]
fn bindgen_test_layout_r_anal_switch_obj_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_switch_obj_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_anal_switch_obj_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_switch_obj_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_switch_obj_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_switch_obj_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_switch_obj_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_switch_obj_t>())).min_val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_switch_obj_t),
            "::",
            stringify!(min_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_switch_obj_t>())).def_val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_switch_obj_t),
            "::",
            stringify!(def_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_switch_obj_t>())).max_val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_switch_obj_t),
            "::",
            stringify!(max_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_switch_obj_t>())).cases as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_switch_obj_t),
            "::",
            stringify!(cases)
        )
    );
}
pub type RAnalSwitchOp = r_anal_switch_obj_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_callbacks_t {
    pub on_fcn_new: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut r_anal_t,
            user: *mut ::std::os::raw::c_void,
            fcn: *mut RAnalFunction,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_fcn_delete: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut r_anal_t,
            user: *mut ::std::os::raw::c_void,
            fcn: *mut RAnalFunction,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_fcn_rename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut r_anal_t,
            user: *mut ::std::os::raw::c_void,
            fcn: *mut RAnalFunction,
            oldname: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_fcn_bb_new: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut r_anal_t,
            user: *mut ::std::os::raw::c_void,
            fcn: *mut RAnalFunction,
            bb: *mut r_anal_bb_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_r_anal_callbacks_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_callbacks_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_callbacks_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_callbacks_t>())).on_fcn_new as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_callbacks_t),
            "::",
            stringify!(on_fcn_new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_callbacks_t>())).on_fcn_delete as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_callbacks_t),
            "::",
            stringify!(on_fcn_delete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_callbacks_t>())).on_fcn_rename as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_callbacks_t),
            "::",
            stringify!(on_fcn_rename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_callbacks_t>())).on_fcn_bb_new as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_callbacks_t),
            "::",
            stringify!(on_fcn_bb_new)
        )
    );
}
pub type RAnalCallbacks = r_anal_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_options_t {
    pub depth: ::std::os::raw::c_int,
    pub graph_depth: ::std::os::raw::c_int,
    pub vars: bool,
    pub varname_stack: bool,
    pub cjmpref: ::std::os::raw::c_int,
    pub jmpref: ::std::os::raw::c_int,
    pub jmpabove: ::std::os::raw::c_int,
    pub ijmp: bool,
    pub jmpmid: bool,
    pub loads: bool,
    pub ignbithints: bool,
    pub followdatarefs: ::std::os::raw::c_int,
    pub searchstringrefs: ::std::os::raw::c_int,
    pub followbrokenfcnsrefs: ::std::os::raw::c_int,
    pub bb_max_size: ::std::os::raw::c_int,
    pub trycatch: bool,
    pub norevisit: bool,
    pub recont: ::std::os::raw::c_int,
    pub noncode: ::std::os::raw::c_int,
    pub nopskip: ::std::os::raw::c_int,
    pub hpskip: ::std::os::raw::c_int,
    pub jmptbl: ::std::os::raw::c_int,
    pub nonull: ::std::os::raw::c_int,
    pub pushret: bool,
    pub armthumb: bool,
    pub endsize: bool,
    pub delay: bool,
    pub tailcall: ::std::os::raw::c_int,
    pub retpoline: bool,
}
#[test]
fn bindgen_test_layout_r_anal_options_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_options_t>(),
        84usize,
        concat!("Size of: ", stringify!(r_anal_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_options_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_anal_options_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).depth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).graph_depth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(graph_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).vars as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).varname_stack as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(varname_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).cjmpref as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(cjmpref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).jmpref as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(jmpref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).jmpabove as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(jmpabove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).ijmp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(ijmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).jmpmid as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(jmpmid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).loads as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(loads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).ignbithints as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(ignbithints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).followdatarefs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(followdatarefs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_options_t>())).searchstringrefs as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(searchstringrefs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_options_t>())).followbrokenfcnsrefs as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(followbrokenfcnsrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).bb_max_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(bb_max_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).trycatch as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(trycatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).norevisit as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(norevisit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).recont as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(recont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).noncode as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(noncode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).nopskip as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(nopskip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).hpskip as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(hpskip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).jmptbl as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(jmptbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).nonull as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(nonull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).pushret as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(pushret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).armthumb as *const _ as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(armthumb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).endsize as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(endsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).delay as *const _ as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).tailcall as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(tailcall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_options_t>())).retpoline as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_options_t),
            "::",
            stringify!(retpoline)
        )
    );
}
pub type RAnalOptions = r_anal_options_t;
pub const RAnalCPPABI_R_ANAL_CPP_ABI_ITANIUM: RAnalCPPABI = 0;
pub const RAnalCPPABI_R_ANAL_CPP_ABI_MSVC: RAnalCPPABI = 1;
pub type RAnalCPPABI = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_hint_cb_t {
    pub on_bits: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut r_anal_t,
            addr: ::std::os::raw::c_ulonglong,
            bits: ::std::os::raw::c_int,
            set: bool,
        ),
    >,
}
#[test]
fn bindgen_test_layout_r_anal_hint_cb_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_hint_cb_t>(),
        8usize,
        concat!("Size of: ", stringify!(r_anal_hint_cb_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_hint_cb_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_hint_cb_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_cb_t>())).on_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_cb_t),
            "::",
            stringify!(on_bits)
        )
    );
}
pub type RHintCb = r_anal_hint_cb_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_t {
    pub cpu: *mut ::std::os::raw::c_char,
    pub os: *mut ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
    pub lineswidth: ::std::os::raw::c_int,
    pub big_endian: ::std::os::raw::c_int,
    pub sleep: ::std::os::raw::c_int,
    pub cpp_abi: RAnalCPPABI,
    pub user: *mut ::std::os::raw::c_void,
    pub gp: ::std::os::raw::c_ulonglong,
    pub bb_tree: RBTree,
    pub fcns: *mut RList,
    pub ht_addr_fun: *mut HtUP,
    pub ht_name_fun: *mut HtPP,
    pub reg: *mut RReg,
    pub last_disasm_reg: *mut ::std::os::raw::c_uchar,
    pub syscall: *mut RSyscall,
    pub diff_ops: ::std::os::raw::c_int,
    pub diff_thbb: f64,
    pub diff_thfcn: f64,
    pub iob: RIOBind,
    pub flb: RFlagBind,
    pub flg_class_set: RFlagSet,
    pub flg_class_get: RFlagGet,
    pub flg_fcn_set: RFlagSet,
    pub binb: RBinBind,
    pub coreb: RCoreBind,
    pub maxreflines: ::std::os::raw::c_int,
    pub esil_goto_limit: ::std::os::raw::c_int,
    pub pcalign: ::std::os::raw::c_int,
    pub esil: *mut r_anal_esil_t,
    pub cur: *mut r_anal_plugin_t,
    pub esil_cur: *mut r_anal_esil_plugin_t,
    pub limit: *mut RAnalRange,
    pub plugins: *mut RList,
    pub esil_plugins: *mut RList,
    pub sdb_types: *mut Sdb,
    pub sdb_fmts: *mut Sdb,
    pub sdb_zigns: *mut Sdb,
    pub dict_refs: *mut HtUP,
    pub dict_xrefs: *mut HtUP,
    pub recursive_noreturn: bool,
    pub zign_spaces: RSpaces,
    pub zign_path: *mut ::std::os::raw::c_char,
    pub cb_printf: PrintfCallback,
    pub sdb: *mut Sdb,
    pub sdb_pins: *mut Sdb,
    pub addr_hints: *mut HtUP,
    pub arch_hints: RBTree,
    pub bits_hints: RBTree,
    pub hint_cbs: RHintCb,
    pub meta: RIntervalTree,
    pub meta_spaces: RSpaces,
    pub sdb_cc: *mut Sdb,
    pub sdb_classes: *mut Sdb,
    pub sdb_classes_attrs: *mut Sdb,
    pub cb: RAnalCallbacks,
    pub opt: RAnalOptions,
    pub reflines: *mut RList,
    pub columnSort: RListComparator,
    pub stackptr: ::std::os::raw::c_int,
    pub log: ::std::option::Option<
        unsafe extern "C" fn(anal: *mut r_anal_t, msg: *const ::std::os::raw::c_char) -> bool,
    >,
    pub read_at: ::std::option::Option<
        unsafe extern "C" fn(
            anal: *mut r_anal_t,
            addr: ::std::os::raw::c_ulonglong,
            buf: *mut ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub verbose: bool,
    pub seggrn: ::std::os::raw::c_int,
    pub flag_get: RFlagGetAtAddr,
    pub ev: *mut REvent,
    pub imports: *mut RList,
    pub visited: *mut SetU,
    pub constpool: RStrConstPool,
    pub leaddrs: *mut RList,
    pub pincmd: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_anal_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_t>(),
        1248usize,
        concat!("Size of: ", stringify!(r_anal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).cpu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).os as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).bits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).lineswidth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(lineswidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).big_endian as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(big_endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).sleep as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(sleep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).cpp_abi as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(cpp_abi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).user as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).gp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).bb_tree as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(bb_tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).fcns as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(fcns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).ht_addr_fun as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(ht_addr_fun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).ht_name_fun as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(ht_name_fun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).reg as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).last_disasm_reg as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(last_disasm_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).syscall as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(syscall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).diff_ops as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(diff_ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).diff_thbb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(diff_thbb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).diff_thfcn as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(diff_thfcn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).iob as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(iob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).flb as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(flb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).flg_class_set as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(flg_class_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).flg_class_get as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(flg_class_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).flg_fcn_set as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(flg_fcn_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).binb as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(binb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).coreb as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(coreb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).maxreflines as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(maxreflines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).esil_goto_limit as *const _ as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(esil_goto_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).pcalign as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(pcalign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).esil as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(esil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).cur as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).esil_cur as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(esil_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).limit as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).plugins as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).esil_plugins as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(esil_plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).sdb_types as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(sdb_types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).sdb_fmts as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(sdb_fmts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).sdb_zigns as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(sdb_zigns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).dict_refs as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(dict_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).dict_xrefs as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(dict_xrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).recursive_noreturn as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(recursive_noreturn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).zign_spaces as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(zign_spaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).zign_path as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(zign_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).cb_printf as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).sdb as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(sdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).sdb_pins as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(sdb_pins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).addr_hints as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(addr_hints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).arch_hints as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(arch_hints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).bits_hints as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(bits_hints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).hint_cbs as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(hint_cbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).meta as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).meta_spaces as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(meta_spaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).sdb_cc as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(sdb_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).sdb_classes as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(sdb_classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).sdb_classes_attrs as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(sdb_classes_attrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).cb as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).opt as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).reflines as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(reflines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).columnSort as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(columnSort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).stackptr as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(stackptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).log as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).read_at as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(read_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).verbose as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).seggrn as *const _ as usize },
        1188usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(seggrn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).flag_get as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(flag_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).ev as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(ev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).imports as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(imports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).visited as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(visited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).constpool as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(constpool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).leaddrs as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(leaddrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_t>())).pincmd as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_t),
            "::",
            stringify!(pincmd)
        )
    );
}
pub type RAnal = r_anal_t;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_IMMBASE: r_anal_addr_hint_type_t = 0;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_JUMP: r_anal_addr_hint_type_t = 1;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_FAIL: r_anal_addr_hint_type_t = 2;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_STACKFRAME: r_anal_addr_hint_type_t = 3;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_PTR: r_anal_addr_hint_type_t = 4;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_NWORD: r_anal_addr_hint_type_t = 5;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_RET: r_anal_addr_hint_type_t = 6;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_NEW_BITS: r_anal_addr_hint_type_t = 7;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_SIZE: r_anal_addr_hint_type_t = 8;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_SYNTAX: r_anal_addr_hint_type_t = 9;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_OPTYPE: r_anal_addr_hint_type_t = 10;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_OPCODE: r_anal_addr_hint_type_t = 11;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_TYPE_OFFSET: r_anal_addr_hint_type_t = 12;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_ESIL: r_anal_addr_hint_type_t = 13;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_HIGH: r_anal_addr_hint_type_t = 14;
pub const r_anal_addr_hint_type_t_R_ANAL_ADDR_HINT_TYPE_VAL: r_anal_addr_hint_type_t = 15;
pub type r_anal_addr_hint_type_t = ::std::os::raw::c_uint;
pub use self::r_anal_addr_hint_type_t as RAnalAddrHintType;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_anal_addr_hint_record_t {
    pub type_: RAnalAddrHintType,
    pub __bindgen_anon_1: r_anal_addr_hint_record_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union r_anal_addr_hint_record_t__bindgen_ty_1 {
    pub type_offset: *mut ::std::os::raw::c_char,
    pub nword: ::std::os::raw::c_int,
    pub jump: ::std::os::raw::c_ulonglong,
    pub fail: ::std::os::raw::c_ulonglong,
    pub newbits: ::std::os::raw::c_int,
    pub immbase: ::std::os::raw::c_int,
    pub ptr: ::std::os::raw::c_ulonglong,
    pub retval: ::std::os::raw::c_ulonglong,
    pub syntax: *mut ::std::os::raw::c_char,
    pub opcode: *mut ::std::os::raw::c_char,
    pub esil: *mut ::std::os::raw::c_char,
    pub optype: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_ulonglong,
    pub stackframe: ::std::os::raw::c_ulonglong,
    pub val: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_anal_addr_hint_record_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_addr_hint_record_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_addr_hint_record_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).type_offset
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(type_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).nword as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(nword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).jump as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(jump)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).fail as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(fail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).newbits as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(newbits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).immbase as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(immbase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).ptr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).retval as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(retval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).syntax as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(syntax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).opcode as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).esil as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(esil)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).optype as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(optype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).stackframe
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(stackframe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_addr_hint_record_t__bindgen_ty_1>())).val as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t__bindgen_ty_1),
            "::",
            stringify!(val)
        )
    );
}
#[test]
fn bindgen_test_layout_r_anal_addr_hint_record_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_addr_hint_record_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_addr_hint_record_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_addr_hint_record_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_addr_hint_record_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_addr_hint_record_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_addr_hint_record_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type RAnalAddrHintRecord = r_anal_addr_hint_record_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_hint_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub ptr: ::std::os::raw::c_ulonglong,
    pub val: ::std::os::raw::c_ulonglong,
    pub jump: ::std::os::raw::c_ulonglong,
    pub fail: ::std::os::raw::c_ulonglong,
    pub ret: ::std::os::raw::c_ulonglong,
    pub arch: *mut ::std::os::raw::c_char,
    pub opcode: *mut ::std::os::raw::c_char,
    pub syntax: *mut ::std::os::raw::c_char,
    pub esil: *mut ::std::os::raw::c_char,
    pub offset: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_ulonglong,
    pub bits: ::std::os::raw::c_int,
    pub new_bits: ::std::os::raw::c_int,
    pub immbase: ::std::os::raw::c_int,
    pub high: bool,
    pub nword: ::std::os::raw::c_int,
    pub stackframe: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_anal_hint_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_hint_t>(),
        136usize,
        concat!("Size of: ", stringify!(r_anal_hint_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_hint_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_hint_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).jump as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(jump)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).fail as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(fail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).ret as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).arch as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).opcode as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).syntax as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(syntax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).esil as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(esil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).offset as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).type_ as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).bits as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).new_bits as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(new_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).immbase as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(immbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).high as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(high)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).nword as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(nword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_hint_t>())).stackframe as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_hint_t),
            "::",
            stringify!(stackframe)
        )
    );
}
pub type RAnalHint = r_anal_hint_t;
pub type RAnalLabelAt = ::std::option::Option<
    unsafe extern "C" fn(
        fcn: *mut RAnalFunction,
        arg1: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char,
>;
pub const RAnalVarKind_R_ANAL_VAR_KIND_REG: RAnalVarKind = 114;
pub const RAnalVarKind_R_ANAL_VAR_KIND_BPV: RAnalVarKind = 98;
pub const RAnalVarKind_R_ANAL_VAR_KIND_SPV: RAnalVarKind = 115;
pub type RAnalVarKind = ::std::os::raw::c_uint;
pub const RAnalVarAccessType_R_ANAL_VAR_ACCESS_TYPE_PTR: RAnalVarAccessType = 0;
pub const RAnalVarAccessType_R_ANAL_VAR_ACCESS_TYPE_READ: RAnalVarAccessType = 1;
pub const RAnalVarAccessType_R_ANAL_VAR_ACCESS_TYPE_WRITE: RAnalVarAccessType = 2;
pub type RAnalVarAccessType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_var_access_t {
    pub reg: *const ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_longlong,
    pub stackptr: ::std::os::raw::c_longlong,
    pub type_: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_r_anal_var_access_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_var_access_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_var_access_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_var_access_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_var_access_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_access_t>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_access_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_access_t>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_access_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_access_t>())).stackptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_access_t),
            "::",
            stringify!(stackptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_access_t>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_access_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type RAnalVarAccess = r_anal_var_access_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_var_constraint_t {
    pub cond: _RAnalCond,
    pub val: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_anal_var_constraint_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_var_constraint_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_var_constraint_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_var_constraint_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_var_constraint_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_constraint_t>())).cond as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_constraint_t),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_constraint_t>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_constraint_t),
            "::",
            stringify!(val)
        )
    );
}
pub type RAnalVarConstraint = r_anal_var_constraint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_var_t {
    pub fcn: *mut RAnalFunction,
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut ::std::os::raw::c_char,
    pub kind: RAnalVarKind,
    pub isarg: bool,
    pub delta: ::std::os::raw::c_int,
    pub regname: *mut ::std::os::raw::c_char,
    pub accesses: RVector,
    pub comment: *mut ::std::os::raw::c_char,
    pub constraints: RVector,
    pub argnum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_anal_var_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_var_t>(),
        160usize,
        concat!("Size of: ", stringify!(r_anal_var_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_var_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_var_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).fcn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(fcn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).kind as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).isarg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(isarg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).delta as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).regname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(regname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).accesses as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(accesses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).comment as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).constraints as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(constraints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_t>())).argnum as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_t),
            "::",
            stringify!(argnum)
        )
    );
}
pub type RAnalVar = r_anal_var_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_var_field_t {
    pub name: *mut ::std::os::raw::c_char,
    pub delta: ::std::os::raw::c_longlong,
    pub field: bool,
}
#[test]
fn bindgen_test_layout_r_anal_var_field_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_var_field_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_var_field_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_var_field_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_var_field_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_field_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_field_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_field_t>())).delta as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_field_t),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_var_field_t>())).field as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_var_field_t),
            "::",
            stringify!(field)
        )
    );
}
pub type RAnalVarField = r_anal_var_field_t;
pub const RAnalValueAccess_R_ANAL_ACC_UNKNOWN: RAnalValueAccess = 0;
pub const RAnalValueAccess_R_ANAL_ACC_R: RAnalValueAccess = 1;
pub const RAnalValueAccess_R_ANAL_ACC_W: RAnalValueAccess = 2;
pub type RAnalValueAccess = ::std::os::raw::c_uint;
pub const RAnalValueType_R_ANAL_VAL_REG: RAnalValueType = 0;
pub const RAnalValueType_R_ANAL_VAL_MEM: RAnalValueType = 1;
pub const RAnalValueType_R_ANAL_VAL_IMM: RAnalValueType = 2;
pub type RAnalValueType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_value_t {
    pub type_: RAnalValueType,
    pub access: RAnalValueAccess,
    pub absolute: ::std::os::raw::c_int,
    pub memref: ::std::os::raw::c_int,
    pub base: ::std::os::raw::c_ulonglong,
    pub delta: ::std::os::raw::c_longlong,
    pub imm: ::std::os::raw::c_longlong,
    pub mul: ::std::os::raw::c_int,
    pub seg: *mut RRegItem,
    pub reg: *mut RRegItem,
    pub regdelta: *mut RRegItem,
}
#[test]
fn bindgen_test_layout_r_anal_value_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_value_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_anal_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).access as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).absolute as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).memref as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(memref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).base as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).delta as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).imm as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).mul as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).seg as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(seg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).reg as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_value_t>())).regdelta as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_value_t),
            "::",
            stringify!(regdelta)
        )
    );
}
pub type RAnalValue = r_anal_value_t;
pub const RAnalOpDirection_R_ANAL_OP_DIR_READ: RAnalOpDirection = 1;
pub const RAnalOpDirection_R_ANAL_OP_DIR_WRITE: RAnalOpDirection = 2;
pub const RAnalOpDirection_R_ANAL_OP_DIR_EXEC: RAnalOpDirection = 4;
pub const RAnalOpDirection_R_ANAL_OP_DIR_REF: RAnalOpDirection = 8;
pub type RAnalOpDirection = ::std::os::raw::c_uint;
pub const r_anal_data_type_t_R_ANAL_DATATYPE_NULL: r_anal_data_type_t = 0;
pub const r_anal_data_type_t_R_ANAL_DATATYPE_ARRAY: r_anal_data_type_t = 1;
pub const r_anal_data_type_t_R_ANAL_DATATYPE_OBJECT: r_anal_data_type_t = 2;
pub const r_anal_data_type_t_R_ANAL_DATATYPE_STRING: r_anal_data_type_t = 3;
pub const r_anal_data_type_t_R_ANAL_DATATYPE_CLASS: r_anal_data_type_t = 4;
pub const r_anal_data_type_t_R_ANAL_DATATYPE_BOOLEAN: r_anal_data_type_t = 5;
pub const r_anal_data_type_t_R_ANAL_DATATYPE_INT16: r_anal_data_type_t = 6;
pub const r_anal_data_type_t_R_ANAL_DATATYPE_INT32: r_anal_data_type_t = 7;
pub const r_anal_data_type_t_R_ANAL_DATATYPE_INT64: r_anal_data_type_t = 8;
pub const r_anal_data_type_t_R_ANAL_DATATYPE_FLOAT: r_anal_data_type_t = 9;
pub type r_anal_data_type_t = ::std::os::raw::c_uint;
pub use self::r_anal_data_type_t as RAnalDataType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_op_t {
    pub mnemonic: *mut ::std::os::raw::c_char,
    pub addr: ::std::os::raw::c_ulonglong,
    pub type_: ::std::os::raw::c_uint,
    pub prefix: RAnalOpPrefix,
    pub type2: ::std::os::raw::c_uint,
    pub stackop: RAnalStackOp,
    pub cond: _RAnalCond,
    pub size: ::std::os::raw::c_int,
    pub nopcode: ::std::os::raw::c_int,
    pub cycles: ::std::os::raw::c_int,
    pub failcycles: ::std::os::raw::c_int,
    pub family: RAnalOpFamily,
    pub id: ::std::os::raw::c_int,
    pub eob: bool,
    pub sign: bool,
    pub delay: ::std::os::raw::c_int,
    pub jump: ::std::os::raw::c_ulonglong,
    pub fail: ::std::os::raw::c_ulonglong,
    pub direction: RAnalOpDirection,
    pub ptr: ::std::os::raw::c_longlong,
    pub val: ::std::os::raw::c_ulonglong,
    pub ptrsize: ::std::os::raw::c_int,
    pub stackptr: ::std::os::raw::c_longlong,
    pub refptr: ::std::os::raw::c_int,
    pub src: [*mut RAnalValue; 3usize],
    pub dst: *mut RAnalValue,
    pub access: *mut RList,
    pub esil: RStrBuf,
    pub opex: RStrBuf,
    pub reg: *const ::std::os::raw::c_char,
    pub ireg: *const ::std::os::raw::c_char,
    pub scale: ::std::os::raw::c_int,
    pub disp: ::std::os::raw::c_ulonglong,
    pub switch_op: *mut RAnalSwitchOp,
    pub hint: RAnalHint,
    pub datatype: RAnalDataType,
}
#[test]
fn bindgen_test_layout_r_anal_op_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_op_t>(),
        488usize,
        concat!("Size of: ", stringify!(r_anal_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_op_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).mnemonic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(mnemonic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).prefix as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).type2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(type2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).stackop as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(stackop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).cond as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).size as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).nopcode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(nopcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).cycles as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).failcycles as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(failcycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).family as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).id as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).eob as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(eob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).sign as *const _ as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).delay as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).jump as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(jump)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).fail as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(fail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).direction as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).ptr as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).val as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).ptrsize as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(ptrsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).stackptr as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(stackptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).refptr as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(refptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).src as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).dst as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).access as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).esil as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(esil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).opex as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(opex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).reg as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).ireg as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(ireg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).scale as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).disp as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).switch_op as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(switch_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).hint as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_op_t>())).datatype as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_op_t),
            "::",
            stringify!(datatype)
        )
    );
}
pub type RAnalOp = r_anal_op_t;
pub type RAnalGetFcnIn = ::std::option::Option<
    unsafe extern "C" fn(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        type_: ::std::os::raw::c_int,
    ) -> *mut RAnalFunction,
>;
pub type RAnalGetHint = ::std::option::Option<
    unsafe extern "C" fn(anal: *mut RAnal, addr: ::std::os::raw::c_ulonglong) -> *mut RAnalHint,
>;
pub type RAnalDecode = ::std::option::Option<
    unsafe extern "C" fn(
        anal: *mut RAnal,
        op: *mut RAnalOp,
        addr: ::std::os::raw::c_ulonglong,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        mask: RAnalOpMask,
    ) -> ::std::os::raw::c_int,
>;
pub type RAnalOpInit = ::std::option::Option<unsafe extern "C" fn(op: *mut RAnalOp)>;
pub type RAnalOpFini = ::std::option::Option<unsafe extern "C" fn(op: *mut RAnalOp)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_bind_t {
    pub anal: *mut RAnal,
    pub get_fcn_in: RAnalGetFcnIn,
    pub get_hint: RAnalGetHint,
    pub decode: RAnalDecode,
    pub opinit: RAnalOpInit,
    pub opfini: RAnalOpFini,
}
#[test]
fn bindgen_test_layout_r_anal_bind_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_bind_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_anal_bind_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_bind_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_bind_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bind_t>())).anal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bind_t),
            "::",
            stringify!(anal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bind_t>())).get_fcn_in as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bind_t),
            "::",
            stringify!(get_fcn_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bind_t>())).get_hint as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bind_t),
            "::",
            stringify!(get_hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bind_t>())).decode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bind_t),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bind_t>())).opinit as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bind_t),
            "::",
            stringify!(opinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bind_t>())).opfini as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bind_t),
            "::",
            stringify!(opfini)
        )
    );
}
pub type RAnalBind = r_anal_bind_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_cond_t {
    pub type_: ::std::os::raw::c_int,
    pub arg: [*mut RAnalValue; 2usize],
}
#[test]
fn bindgen_test_layout_r_anal_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_cond_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_cond_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_cond_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_cond_t>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_cond_t),
            "::",
            stringify!(arg)
        )
    );
}
pub type RAnalCond = r_anal_cond_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_bb_t {
    pub _rb: RBNode,
    pub _max_end: ::std::os::raw::c_ulonglong,
    pub addr: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_ulonglong,
    pub jump: ::std::os::raw::c_ulonglong,
    pub fail: ::std::os::raw::c_ulonglong,
    pub traced: bool,
    pub folded: bool,
    pub color: RColor,
    pub fingerprint: *mut ::std::os::raw::c_uchar,
    pub diff: *mut RAnalDiff,
    pub cond: *mut RAnalCond,
    pub switch_op: *mut RAnalSwitchOp,
    pub op_pos: *mut ::std::os::raw::c_ushort,
    pub op_bytes: *mut ::std::os::raw::c_uchar,
    pub parent_reg_arena: *mut ::std::os::raw::c_uchar,
    pub op_pos_size: ::std::os::raw::c_int,
    pub ninstr: ::std::os::raw::c_int,
    pub stackptr: ::std::os::raw::c_int,
    pub parent_stackptr: ::std::os::raw::c_int,
    pub cmpval: ::std::os::raw::c_ulonglong,
    pub cmpreg: *const ::std::os::raw::c_char,
    pub bbhash: ::std::os::raw::c_uint,
    pub fcns: *mut RList,
    pub anal: *mut RAnal,
    pub ref_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_anal_bb_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_bb_t>(),
        208usize,
        concat!("Size of: ", stringify!(r_anal_bb_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_bb_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_bb_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>()))._rb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(_rb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>()))._max_end as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(_max_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).addr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).jump as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(jump)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).fail as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(fail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).traced as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(traced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).folded as *const _ as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(folded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).color as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).fingerprint as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(fingerprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).diff as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(diff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).cond as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).switch_op as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(switch_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).op_pos as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(op_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).op_bytes as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(op_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).parent_reg_arena as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(parent_reg_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).op_pos_size as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(op_pos_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).ninstr as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(ninstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).stackptr as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(stackptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).parent_stackptr as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(parent_stackptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).cmpval as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(cmpval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).cmpreg as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(cmpreg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).bbhash as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(bbhash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).fcns as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(fcns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).anal as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(anal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_bb_t>())).ref_ as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_bb_t),
            "::",
            stringify!(ref_)
        )
    );
}
pub type RAnalBlock = r_anal_bb_t;
pub const RAnalRefType_R_ANAL_REF_TYPE_NULL: RAnalRefType = 0;
pub const RAnalRefType_R_ANAL_REF_TYPE_CODE: RAnalRefType = 99;
pub const RAnalRefType_R_ANAL_REF_TYPE_CALL: RAnalRefType = 67;
pub const RAnalRefType_R_ANAL_REF_TYPE_DATA: RAnalRefType = 100;
pub const RAnalRefType_R_ANAL_REF_TYPE_STRING: RAnalRefType = 115;
pub type RAnalRefType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_ref_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub at: ::std::os::raw::c_ulonglong,
    pub type_: RAnalRefType,
}
#[test]
fn bindgen_test_layout_r_anal_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_ref_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_ref_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_ref_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_ref_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_ref_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_ref_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_ref_t>())).at as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_ref_t),
            "::",
            stringify!(at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_ref_t>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_ref_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type RAnalRef = r_anal_ref_t;
extern "C" {
    pub fn r_anal_ref_type_tostring(t: RAnalRefType) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_refline_t {
    pub from: ::std::os::raw::c_ulonglong,
    pub to: ::std::os::raw::c_ulonglong,
    pub index: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub direction: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_anal_refline_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_refline_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_refline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_refline_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_refline_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_refline_t>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_refline_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_refline_t>())).to as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_refline_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_refline_t>())).index as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_refline_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_refline_t>())).level as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_refline_t),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_refline_t>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_refline_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_refline_t>())).direction as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_refline_t),
            "::",
            stringify!(direction)
        )
    );
}
pub type RAnalRefline = r_anal_refline_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_cycle_frame_t {
    pub naddr: ::std::os::raw::c_ulonglong,
    pub hooks: *mut RList,
    pub prev: *mut r_anal_cycle_frame_t,
}
#[test]
fn bindgen_test_layout_r_anal_cycle_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_cycle_frame_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_cycle_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_cycle_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_cycle_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_cycle_frame_t>())).naddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_cycle_frame_t),
            "::",
            stringify!(naddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_cycle_frame_t>())).hooks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_cycle_frame_t),
            "::",
            stringify!(hooks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_cycle_frame_t>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_cycle_frame_t),
            "::",
            stringify!(prev)
        )
    );
}
pub type RAnalCycleFrame = r_anal_cycle_frame_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_cycle_hook_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub cycles: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_anal_cycle_hook_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_cycle_hook_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_cycle_hook_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_cycle_hook_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_cycle_hook_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_cycle_hook_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_cycle_hook_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_cycle_hook_t>())).cycles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_cycle_hook_t),
            "::",
            stringify!(cycles)
        )
    );
}
pub type RAnalCycleHook = r_anal_cycle_hook_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_word_t {
    pub type_: ::std::os::raw::c_int,
    pub str_: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_anal_esil_word_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_word_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_esil_word_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_word_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_word_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_word_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_word_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_word_t>())).str_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_word_t),
            "::",
            stringify!(str_)
        )
    );
}
pub type RAnalEsilWord = r_anal_esil_word_t;
pub const R_ANAL_ESIL_FLAG_ZERO: ::std::os::raw::c_uint = 1;
pub const R_ANAL_ESIL_FLAG_CARRY: ::std::os::raw::c_uint = 2;
pub const R_ANAL_ESIL_FLAG_OVERFLOW: ::std::os::raw::c_uint = 4;
pub const R_ANAL_ESIL_FLAG_PARITY: ::std::os::raw::c_uint = 8;
pub const R_ANAL_ESIL_FLAG_SIGN: ::std::os::raw::c_uint = 16;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const R_ANAL_TRAP_NONE: ::std::os::raw::c_uint = 0;
pub const R_ANAL_TRAP_UNHANDLED: ::std::os::raw::c_uint = 1;
pub const R_ANAL_TRAP_BREAKPOINT: ::std::os::raw::c_uint = 2;
pub const R_ANAL_TRAP_DIVBYZERO: ::std::os::raw::c_uint = 3;
pub const R_ANAL_TRAP_WRITE_ERR: ::std::os::raw::c_uint = 4;
pub const R_ANAL_TRAP_READ_ERR: ::std::os::raw::c_uint = 5;
pub const R_ANAL_TRAP_EXEC_ERR: ::std::os::raw::c_uint = 6;
pub const R_ANAL_TRAP_INVALID: ::std::os::raw::c_uint = 7;
pub const R_ANAL_TRAP_UNALIGNED: ::std::os::raw::c_uint = 8;
pub const R_ANAL_TRAP_TODO: ::std::os::raw::c_uint = 9;
pub const R_ANAL_TRAP_HALT: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
pub const R_ANAL_ESIL_PARM_INVALID: ::std::os::raw::c_uint = 0;
pub const R_ANAL_ESIL_PARM_REG: ::std::os::raw::c_uint = 1;
pub const R_ANAL_ESIL_PARM_NUM: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
pub const RAnalReilOpcode_REIL_NOP: RAnalReilOpcode = 0;
pub const RAnalReilOpcode_REIL_UNK: RAnalReilOpcode = 1;
pub const RAnalReilOpcode_REIL_JCC: RAnalReilOpcode = 2;
pub const RAnalReilOpcode_REIL_STR: RAnalReilOpcode = 3;
pub const RAnalReilOpcode_REIL_STM: RAnalReilOpcode = 4;
pub const RAnalReilOpcode_REIL_LDM: RAnalReilOpcode = 5;
pub const RAnalReilOpcode_REIL_ADD: RAnalReilOpcode = 6;
pub const RAnalReilOpcode_REIL_SUB: RAnalReilOpcode = 7;
pub const RAnalReilOpcode_REIL_NEG: RAnalReilOpcode = 8;
pub const RAnalReilOpcode_REIL_MUL: RAnalReilOpcode = 9;
pub const RAnalReilOpcode_REIL_DIV: RAnalReilOpcode = 10;
pub const RAnalReilOpcode_REIL_MOD: RAnalReilOpcode = 11;
pub const RAnalReilOpcode_REIL_SMUL: RAnalReilOpcode = 12;
pub const RAnalReilOpcode_REIL_SDIV: RAnalReilOpcode = 13;
pub const RAnalReilOpcode_REIL_SMOD: RAnalReilOpcode = 14;
pub const RAnalReilOpcode_REIL_SHL: RAnalReilOpcode = 15;
pub const RAnalReilOpcode_REIL_SHR: RAnalReilOpcode = 16;
pub const RAnalReilOpcode_REIL_AND: RAnalReilOpcode = 17;
pub const RAnalReilOpcode_REIL_OR: RAnalReilOpcode = 18;
pub const RAnalReilOpcode_REIL_XOR: RAnalReilOpcode = 19;
pub const RAnalReilOpcode_REIL_NOT: RAnalReilOpcode = 20;
pub const RAnalReilOpcode_REIL_EQ: RAnalReilOpcode = 21;
pub const RAnalReilOpcode_REIL_LT: RAnalReilOpcode = 22;
pub type RAnalReilOpcode = ::std::os::raw::c_uint;
pub const RAnalReilArgType_ARG_REG: RAnalReilArgType = 0;
pub const RAnalReilArgType_ARG_TEMP: RAnalReilArgType = 1;
pub const RAnalReilArgType_ARG_CONST: RAnalReilArgType = 2;
pub const RAnalReilArgType_ARG_ESIL_INTERNAL: RAnalReilArgType = 3;
pub const RAnalReilArgType_ARG_NONE: RAnalReilArgType = 4;
pub type RAnalReilArgType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_reil_arg {
    pub type_: RAnalReilArgType,
    pub size: ::std::os::raw::c_uchar,
    pub name: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_r_anal_reil_arg() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_reil_arg>(),
        40usize,
        concat!("Size of: ", stringify!(r_anal_reil_arg))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_reil_arg>(),
        4usize,
        concat!("Alignment of ", stringify!(r_anal_reil_arg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil_arg>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil_arg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil_arg>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil_arg),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil_arg>())).name as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil_arg),
            "::",
            stringify!(name)
        )
    );
}
pub type RAnalReilArg = r_anal_reil_arg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_ref_char {
    pub str_: *mut ::std::os::raw::c_char,
    pub cols: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_anal_ref_char() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_ref_char>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_ref_char))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_ref_char>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_ref_char))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_ref_char>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_ref_char),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_ref_char>())).cols as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_ref_char),
            "::",
            stringify!(cols)
        )
    );
}
pub type RAnalRefStr = r_anal_ref_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_reil_inst {
    pub opcode: RAnalReilOpcode,
    pub arg: [*mut RAnalReilArg; 3usize],
}
#[test]
fn bindgen_test_layout_r_anal_reil_inst() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_reil_inst>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_reil_inst))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_reil_inst>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_reil_inst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil_inst>())).opcode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil_inst),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil_inst>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil_inst),
            "::",
            stringify!(arg)
        )
    );
}
pub type RAnalReilInst = r_anal_reil_inst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_reil {
    pub old: [::std::os::raw::c_char; 32usize],
    pub cur: [::std::os::raw::c_char; 32usize],
    pub lastsz: ::std::os::raw::c_uchar,
    pub reilNextTemp: ::std::os::raw::c_ulonglong,
    pub addr: ::std::os::raw::c_ulonglong,
    pub seq_num: ::std::os::raw::c_uchar,
    pub skip: ::std::os::raw::c_int,
    pub cmd_count: ::std::os::raw::c_int,
    pub if_buf: [::std::os::raw::c_char; 64usize],
    pub pc: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_r_anal_reil() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_reil>(),
        176usize,
        concat!("Size of: ", stringify!(r_anal_reil))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_reil>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_reil))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil>())).old as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil),
            "::",
            stringify!(old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil>())).cur as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil>())).lastsz as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil),
            "::",
            stringify!(lastsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil>())).reilNextTemp as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil),
            "::",
            stringify!(reilNextTemp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil>())).addr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil>())).seq_num as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil),
            "::",
            stringify!(seq_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil>())).skip as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil>())).cmd_count as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil),
            "::",
            stringify!(cmd_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil>())).if_buf as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil),
            "::",
            stringify!(if_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_reil>())).pc as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_reil),
            "::",
            stringify!(pc)
        )
    );
}
pub type RAnalReil = r_anal_reil;
pub type RAnalEsilHandlerCB = ::std::option::Option<
    unsafe extern "C" fn(
        esil: *mut r_anal_esil_t,
        h: ::std::os::raw::c_uint,
        user: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_handler_t {
    pub cb: RAnalEsilHandlerCB,
    pub user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_anal_esil_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_handler_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_esil_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_handler_t>())).cb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_handler_t),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_handler_t>())).user as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_handler_t),
            "::",
            stringify!(user)
        )
    );
}
pub type RAnalEsilHandler = r_anal_esil_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_change_reg_t {
    pub idx: ::std::os::raw::c_int,
    pub data: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_anal_esil_change_reg_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_change_reg_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_esil_change_reg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_change_reg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_change_reg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_change_reg_t>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_change_reg_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_change_reg_t>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_change_reg_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RAnalEsilRegChange = r_anal_esil_change_reg_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_change_mem_t {
    pub idx: ::std::os::raw::c_int,
    pub data: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_r_anal_esil_change_mem_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_change_mem_t>(),
        8usize,
        concat!("Size of: ", stringify!(r_anal_esil_change_mem_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_change_mem_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_anal_esil_change_mem_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_change_mem_t>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_change_mem_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_change_mem_t>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_change_mem_t),
            "::",
            stringify!(data)
        )
    );
}
pub type RAnalEsilMemChange = r_anal_esil_change_mem_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_trace_t {
    pub idx: ::std::os::raw::c_int,
    pub end_idx: ::std::os::raw::c_int,
    pub registers: *mut HtUP,
    pub memory: *mut HtUP,
    pub arena: [*mut RRegArena; 8usize],
    pub stack_addr: ::std::os::raw::c_ulonglong,
    pub stack_size: ::std::os::raw::c_ulonglong,
    pub stack_data: *mut ::std::os::raw::c_uchar,
    pub db: *mut Sdb,
}
#[test]
fn bindgen_test_layout_r_anal_esil_trace_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_trace_t>(),
        120usize,
        concat!("Size of: ", stringify!(r_anal_esil_trace_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_trace_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_trace_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_trace_t>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_trace_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_trace_t>())).end_idx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_trace_t),
            "::",
            stringify!(end_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_trace_t>())).registers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_trace_t),
            "::",
            stringify!(registers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_trace_t>())).memory as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_trace_t),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_trace_t>())).arena as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_trace_t),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_trace_t>())).stack_addr as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_trace_t),
            "::",
            stringify!(stack_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_trace_t>())).stack_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_trace_t),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_trace_t>())).stack_data as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_trace_t),
            "::",
            stringify!(stack_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_trace_t>())).db as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_trace_t),
            "::",
            stringify!(db)
        )
    );
}
pub type RAnalEsilTrace = r_anal_esil_trace_t;
pub type RAnalEsilHookRegWriteCB = ::std::option::Option<
    unsafe extern "C" fn(
        esil: *mut r_anal_esil_t,
        name: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_ulonglong,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_callbacks_t {
    pub user: *mut ::std::os::raw::c_void,
    pub hook_flag_read: ::std::option::Option<
        unsafe extern "C" fn(
            esil: *mut r_anal_esil_t,
            flag: *const ::std::os::raw::c_char,
            num: *mut ::std::os::raw::c_ulonglong,
        ) -> bool,
    >,
    pub hook_command: ::std::option::Option<
        unsafe extern "C" fn(esil: *mut r_anal_esil_t, op: *const ::std::os::raw::c_char) -> bool,
    >,
    pub hook_mem_read: ::std::option::Option<
        unsafe extern "C" fn(
            esil: *mut r_anal_esil_t,
            addr: ::std::os::raw::c_ulonglong,
            buf: *mut ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub mem_read: ::std::option::Option<
        unsafe extern "C" fn(
            esil: *mut r_anal_esil_t,
            addr: ::std::os::raw::c_ulonglong,
            buf: *mut ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub hook_mem_write: ::std::option::Option<
        unsafe extern "C" fn(
            esil: *mut r_anal_esil_t,
            addr: ::std::os::raw::c_ulonglong,
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub mem_write: ::std::option::Option<
        unsafe extern "C" fn(
            esil: *mut r_anal_esil_t,
            addr: ::std::os::raw::c_ulonglong,
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub hook_reg_read: ::std::option::Option<
        unsafe extern "C" fn(
            esil: *mut r_anal_esil_t,
            name: *const ::std::os::raw::c_char,
            res: *mut ::std::os::raw::c_ulonglong,
            size: *mut ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub reg_read: ::std::option::Option<
        unsafe extern "C" fn(
            esil: *mut r_anal_esil_t,
            name: *const ::std::os::raw::c_char,
            res: *mut ::std::os::raw::c_ulonglong,
            size: *mut ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub hook_reg_write: RAnalEsilHookRegWriteCB,
    pub reg_write: ::std::option::Option<
        unsafe extern "C" fn(
            esil: *mut r_anal_esil_t,
            name: *const ::std::os::raw::c_char,
            val: ::std::os::raw::c_ulonglong,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_r_anal_esil_callbacks_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_callbacks_t>(),
        88usize,
        concat!("Size of: ", stringify!(r_anal_esil_callbacks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_callbacks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_callbacks_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).hook_flag_read as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(hook_flag_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).hook_command as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(hook_command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).hook_mem_read as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(hook_mem_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).mem_read as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(mem_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).hook_mem_write as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(hook_mem_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).mem_write as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(mem_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).hook_reg_read as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(hook_reg_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).reg_read as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(reg_read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).hook_reg_write as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(hook_reg_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_callbacks_t>())).reg_write as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_callbacks_t),
            "::",
            stringify!(reg_write)
        )
    );
}
pub type RAnalEsilCallbacks = r_anal_esil_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_t {
    pub anal: *mut RAnal,
    pub stack: *mut *mut ::std::os::raw::c_char,
    pub addrmask: ::std::os::raw::c_ulonglong,
    pub stacksize: ::std::os::raw::c_int,
    pub stackptr: ::std::os::raw::c_int,
    pub skip: ::std::os::raw::c_uint,
    pub nowrite: ::std::os::raw::c_int,
    pub iotrap: ::std::os::raw::c_int,
    pub exectrap: ::std::os::raw::c_int,
    pub parse_stop: ::std::os::raw::c_int,
    pub parse_goto: ::std::os::raw::c_int,
    pub parse_goto_count: ::std::os::raw::c_int,
    pub verbose: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_ulonglong,
    pub address: ::std::os::raw::c_ulonglong,
    pub stack_addr: ::std::os::raw::c_ulonglong,
    pub stack_size: ::std::os::raw::c_uint,
    pub delay: ::std::os::raw::c_int,
    pub jump_target: ::std::os::raw::c_ulonglong,
    pub jump_target_set: ::std::os::raw::c_int,
    pub trap: ::std::os::raw::c_int,
    pub trap_code: ::std::os::raw::c_uint,
    pub old: ::std::os::raw::c_ulonglong,
    pub cur: ::std::os::raw::c_ulonglong,
    pub lastsz: ::std::os::raw::c_uchar,
    pub ops: *mut HtPP,
    pub current_opstr: *mut ::std::os::raw::c_char,
    pub interrupts: *mut SdbMini,
    pub syscalls: *mut SdbMini,
    pub intr0: *mut RAnalEsilHandler,
    pub sysc0: *mut RAnalEsilHandler,
    pub plugins: *mut RList,
    pub active_plugins: *mut RList,
    pub stats: *mut Sdb,
    pub trace: *mut RAnalEsilTrace,
    pub cb: RAnalEsilCallbacks,
    pub Reil: *mut RAnalReil,
    pub pending: *mut ::std::os::raw::c_char,
    pub cmd_step: *mut ::std::os::raw::c_char,
    pub cmd_step_out: *mut ::std::os::raw::c_char,
    pub cmd_intr: *mut ::std::os::raw::c_char,
    pub cmd_trap: *mut ::std::os::raw::c_char,
    pub cmd_mdev: *mut ::std::os::raw::c_char,
    pub cmd_todo: *mut ::std::os::raw::c_char,
    pub cmd_ioer: *mut ::std::os::raw::c_char,
    pub mdev_range: *mut ::std::os::raw::c_char,
    pub cmd: ::std::option::Option<
        unsafe extern "C" fn(
            esil: *mut r_anal_esil_t,
            name: *const ::std::os::raw::c_char,
            a0: ::std::os::raw::c_ulonglong,
            a1: ::std::os::raw::c_ulonglong,
        ) -> bool,
    >,
    pub user: *mut ::std::os::raw::c_void,
    pub stack_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_anal_esil_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_t>(),
        416usize,
        concat!("Size of: ", stringify!(r_anal_esil_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).anal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(anal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).addrmask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(addrmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).stacksize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(stacksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).stackptr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(stackptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).skip as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).nowrite as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(nowrite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).iotrap as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(iotrap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).exectrap as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(exectrap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).parse_stop as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(parse_stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).parse_goto as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(parse_goto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).parse_goto_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(parse_goto_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).verbose as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).address as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).stack_addr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(stack_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).stack_size as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).delay as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).jump_target as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(jump_target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).jump_target_set as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(jump_target_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).trap as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(trap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).trap_code as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(trap_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).old as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).cur as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).lastsz as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(lastsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).ops as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).current_opstr as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(current_opstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).interrupts as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(interrupts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).syscalls as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(syscalls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).intr0 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(intr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).sysc0 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(sysc0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).plugins as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).active_plugins as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(active_plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).stats as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).trace as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(trace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).cb as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).Reil as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(Reil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).pending as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).cmd_step as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(cmd_step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).cmd_step_out as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(cmd_step_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).cmd_intr as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(cmd_intr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).cmd_trap as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(cmd_trap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).cmd_mdev as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(cmd_mdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).cmd_todo as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(cmd_todo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).cmd_ioer as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(cmd_ioer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).mdev_range as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(mdev_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).cmd as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).user as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_t>())).stack_fd as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_t),
            "::",
            stringify!(stack_fd)
        )
    );
}
pub type RAnalEsil = r_anal_esil_t;
pub const R_ANAL_ESIL_OP_TYPE_UNKNOWN: ::std::os::raw::c_uint = 1;
pub const R_ANAL_ESIL_OP_TYPE_CONTROL_FLOW: ::std::os::raw::c_uint = 2;
pub const R_ANAL_ESIL_OP_TYPE_MEM_READ: ::std::os::raw::c_uint = 4;
pub const R_ANAL_ESIL_OP_TYPE_MEM_WRITE: ::std::os::raw::c_uint = 8;
pub const R_ANAL_ESIL_OP_TYPE_REG_WRITE: ::std::os::raw::c_uint = 16;
pub const R_ANAL_ESIL_OP_TYPE_MATH: ::std::os::raw::c_uint = 32;
pub const R_ANAL_ESIL_OP_TYPE_CUSTOM: ::std::os::raw::c_uint = 64;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
pub type RAnalEsilOpCb = ::std::option::Option<unsafe extern "C" fn(esil: *mut RAnalEsil) -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_operation_t {
    pub code: RAnalEsilOpCb,
    pub push: ::std::os::raw::c_uint,
    pub pop: ::std::os::raw::c_uint,
    pub type_: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_anal_esil_operation_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_operation_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_esil_operation_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_operation_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_operation_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_operation_t>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_operation_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_operation_t>())).push as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_operation_t),
            "::",
            stringify!(push)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_operation_t>())).pop as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_operation_t),
            "::",
            stringify!(pop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_operation_t>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_operation_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type RAnalEsilOp = r_anal_esil_operation_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_expr_offset_t {
    pub off: ::std::os::raw::c_ulonglong,
    pub idx: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_r_anal_esil_expr_offset_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_expr_offset_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_esil_expr_offset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_expr_offset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_expr_offset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_expr_offset_t>())).off as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_expr_offset_t),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_expr_offset_t>())).idx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_expr_offset_t),
            "::",
            stringify!(idx)
        )
    );
}
pub type RAnalEsilEOffset = r_anal_esil_expr_offset_t;
pub const RAnalEsilBlockEnterType_R_ANAL_ESIL_BLOCK_ENTER_NORMAL: RAnalEsilBlockEnterType = 0;
pub const RAnalEsilBlockEnterType_R_ANAL_ESIL_BLOCK_ENTER_TRUE: RAnalEsilBlockEnterType = 1;
pub const RAnalEsilBlockEnterType_R_ANAL_ESIL_BLOCK_ENTER_FALSE: RAnalEsilBlockEnterType = 2;
pub const RAnalEsilBlockEnterType_R_ANAL_ESIL_BLOCK_ENTER_GLUE: RAnalEsilBlockEnterType = 3;
pub type RAnalEsilBlockEnterType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_basic_block_t {
    pub first: RAnalEsilEOffset,
    pub last: RAnalEsilEOffset,
    pub expr: *mut ::std::os::raw::c_char,
    pub enter: RAnalEsilBlockEnterType,
}
#[test]
fn bindgen_test_layout_r_anal_esil_basic_block_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_basic_block_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_anal_esil_basic_block_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_basic_block_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_basic_block_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_basic_block_t>())).first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_basic_block_t),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_basic_block_t>())).last as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_basic_block_t),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_basic_block_t>())).expr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_basic_block_t),
            "::",
            stringify!(expr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_basic_block_t>())).enter as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_basic_block_t),
            "::",
            stringify!(enter)
        )
    );
}
pub type RAnalEsilBB = r_anal_esil_basic_block_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_cfg_t {
    pub start: *mut RGraphNode,
    pub end: *mut RGraphNode,
    pub g: *mut RGraph,
}
#[test]
fn bindgen_test_layout_r_anal_esil_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_cfg_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_esil_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_cfg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_cfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_cfg_t>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_cfg_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_cfg_t>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_cfg_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_cfg_t>())).g as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_cfg_t),
            "::",
            stringify!(g)
        )
    );
}
pub type RAnalEsilCFG = r_anal_esil_cfg_t;
pub const R_ANAL_ESIL_DFG_BLOCK_CONST: ::std::os::raw::c_uint = 1;
pub const R_ANAL_ESIL_DFG_BLOCK_VAR: ::std::os::raw::c_uint = 2;
pub const R_ANAL_ESIL_DFG_BLOCK_PTR: ::std::os::raw::c_uint = 4;
pub const R_ANAL_ESIL_DFG_BLOCK_RESULT: ::std::os::raw::c_uint = 8;
pub const R_ANAL_ESIL_DFG_BLOCK_GENERATIVE: ::std::os::raw::c_uint = 16;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_dfg_t {
    pub idx: ::std::os::raw::c_uint,
    pub regs: *mut Sdb,
    pub reg_vars: *mut RContRBTree,
    pub todo: *mut RQueue,
    pub insert: *mut ::std::os::raw::c_void,
    pub flow: *mut RGraph,
    pub cur: *mut RGraphNode,
    pub old: *mut RGraphNode,
    pub malloc_failed: bool,
}
#[test]
fn bindgen_test_layout_r_anal_esil_dfg_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_dfg_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_anal_esil_dfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_dfg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_dfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_t>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_t>())).regs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_t),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_t>())).reg_vars as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_t),
            "::",
            stringify!(reg_vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_t>())).todo as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_t),
            "::",
            stringify!(todo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_t>())).insert as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_t),
            "::",
            stringify!(insert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_t>())).flow as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_t),
            "::",
            stringify!(flow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_t>())).cur as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_t>())).old as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_t),
            "::",
            stringify!(old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_t>())).malloc_failed as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_t),
            "::",
            stringify!(malloc_failed)
        )
    );
}
pub type RAnalEsilDFG = r_anal_esil_dfg_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_dfg_node_t {
    pub idx: ::std::os::raw::c_uint,
    pub content: *mut RStrBuf,
    pub type_: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_anal_esil_dfg_node_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_dfg_node_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_esil_dfg_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_dfg_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_dfg_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_node_t>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_node_t),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_node_t>())).content as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_node_t),
            "::",
            stringify!(content)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_dfg_node_t>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_dfg_node_t),
            "::",
            stringify!(type_)
        )
    );
}
pub type RAnalEsilDFGNode = r_anal_esil_dfg_node_t;
pub type RAnalCmdExt = ::std::option::Option<
    unsafe extern "C" fn(
        anal: *mut RAnal,
        input: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type RAnalOpCallback = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut RAnal,
        op: *mut RAnalOp,
        addr: ::std::os::raw::c_ulonglong,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        mask: RAnalOpMask,
    ) -> ::std::os::raw::c_int,
>;
pub type RAnalRegProfCallback = ::std::option::Option<unsafe extern "C" fn(a: *mut RAnal) -> bool>;
pub type RAnalRegProfGetCallback =
    ::std::option::Option<unsafe extern "C" fn(a: *mut RAnal) -> *mut ::std::os::raw::c_char>;
pub type RAnalFPBBCallback = ::std::option::Option<
    unsafe extern "C" fn(a: *mut RAnal, bb: *mut RAnalBlock) -> ::std::os::raw::c_int,
>;
pub type RAnalFPFcnCallback = ::std::option::Option<
    unsafe extern "C" fn(a: *mut RAnal, fcn: *mut RAnalFunction) -> ::std::os::raw::c_int,
>;
pub type RAnalDiffBBCallback = ::std::option::Option<
    unsafe extern "C" fn(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        fcn2: *mut RAnalFunction,
    ) -> ::std::os::raw::c_int,
>;
pub type RAnalDiffFcnCallback = ::std::option::Option<
    unsafe extern "C" fn(
        anal: *mut RAnal,
        fcns: *mut RList,
        fcns2: *mut RList,
    ) -> ::std::os::raw::c_int,
>;
pub type RAnalDiffEvalCallback =
    ::std::option::Option<unsafe extern "C" fn(anal: *mut RAnal) -> ::std::os::raw::c_int>;
pub type RAnalEsilCB =
    ::std::option::Option<unsafe extern "C" fn(esil: *mut RAnalEsil) -> ::std::os::raw::c_int>;
pub type RAnalEsilLoopCB = ::std::option::Option<
    unsafe extern "C" fn(esil: *mut RAnalEsil, op: *mut RAnalOp) -> ::std::os::raw::c_int,
>;
pub type RAnalEsilTrapCB = ::std::option::Option<
    unsafe extern "C" fn(
        esil: *mut RAnalEsil,
        trap_type: ::std::os::raw::c_int,
        trap_code: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_plugin_t {
    pub name: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub license: *mut ::std::os::raw::c_char,
    pub arch: *mut ::std::os::raw::c_char,
    pub author: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
    pub esil: ::std::os::raw::c_int,
    pub fileformat_type: ::std::os::raw::c_int,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub fini: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub archinfo: ::std::option::Option<
        unsafe extern "C" fn(
            anal: *mut RAnal,
            query: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub anal_mask: ::std::option::Option<
        unsafe extern "C" fn(
            anal: *mut RAnal,
            size: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_uchar,
            at: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_uchar,
    >,
    pub preludes: ::std::option::Option<unsafe extern "C" fn(anal: *mut RAnal) -> *mut RList>,
    pub op: RAnalOpCallback,
    pub cmd_ext: RAnalCmdExt,
    pub set_reg_profile: RAnalRegProfCallback,
    pub get_reg_profile: RAnalRegProfGetCallback,
    pub fingerprint_bb: RAnalFPBBCallback,
    pub fingerprint_fcn: RAnalFPFcnCallback,
    pub diff_bb: RAnalDiffBBCallback,
    pub diff_fcn: RAnalDiffFcnCallback,
    pub diff_eval: RAnalDiffEvalCallback,
    pub esil_init: RAnalEsilCB,
    pub esil_post_loop: RAnalEsilLoopCB,
    pub esil_trap: RAnalEsilTrapCB,
    pub esil_fini: RAnalEsilCB,
}
#[test]
fn bindgen_test_layout_r_anal_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_plugin_t>(),
        208usize,
        concat!("Size of: ", stringify!(r_anal_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).license as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).arch as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).author as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).version as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).bits as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).esil as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(esil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).fileformat_type as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(fileformat_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).init as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).fini as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).archinfo as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(archinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).anal_mask as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(anal_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).preludes as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(preludes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).op as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).cmd_ext as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(cmd_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).set_reg_profile as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(set_reg_profile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).get_reg_profile as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(get_reg_profile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).fingerprint_bb as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(fingerprint_bb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).fingerprint_fcn as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(fingerprint_fcn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).diff_bb as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(diff_bb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).diff_fcn as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(diff_fcn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).diff_eval as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(diff_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).esil_init as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(esil_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).esil_post_loop as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(esil_post_loop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).esil_trap as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(esil_trap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_plugin_t>())).esil_fini as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_plugin_t),
            "::",
            stringify!(esil_fini)
        )
    );
}
pub type RAnalPlugin = r_anal_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_plugin_t {
    pub name: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub license: *mut ::std::os::raw::c_char,
    pub arch: *mut ::std::os::raw::c_char,
    pub author: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(esil: *mut RAnalEsil) -> *mut ::std::os::raw::c_void,
    >,
    pub fini: ::std::option::Option<
        unsafe extern "C" fn(esil: *mut RAnalEsil, user: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_r_anal_esil_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_plugin_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_anal_esil_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_plugin_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_plugin_t>())).license as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_plugin_t>())).arch as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_plugin_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_plugin_t>())).author as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_plugin_t),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_plugin_t>())).version as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_plugin_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_plugin_t>())).init as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_esil_plugin_t>())).fini as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_plugin_t),
            "::",
            stringify!(fini)
        )
    );
}
pub type RAnalEsilPlugin = r_anal_esil_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_esil_active_plugin_t {
    pub plugin: *mut RAnalEsilPlugin,
    pub user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_anal_esil_active_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_esil_active_plugin_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_anal_esil_active_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_esil_active_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_esil_active_plugin_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_active_plugin_t>())).plugin as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_active_plugin_t),
            "::",
            stringify!(plugin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_anal_esil_active_plugin_t>())).user as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_esil_active_plugin_t),
            "::",
            stringify!(user)
        )
    );
}
pub type RAnalEsilActivePlugin = r_anal_esil_active_plugin_t;
extern "C" {
    pub fn r_anal_compare(arg1: RAnalFunction, arg2: RAnalFunction) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_listrange_new() -> *mut RListRange;
}
extern "C" {
    pub fn r_listrange_free(s: *mut RListRange);
}
extern "C" {
    pub fn r_listrange_add(s: *mut RListRange, f: *mut RAnalFunction);
}
extern "C" {
    pub fn r_listrange_del(s: *mut RListRange, f: *mut RAnalFunction);
}
extern "C" {
    pub fn r_listrange_resize(
        s: *mut RListRange,
        f: *mut RAnalFunction,
        newsize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_listrange_find_in_range(
        s: *mut RListRange,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalFunction;
}
extern "C" {
    pub fn r_listrange_find_root(
        s: *mut RListRange,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalFunction;
}
extern "C" {
    pub fn r_anal_type_new() -> *mut RAnalType;
}
extern "C" {
    pub fn r_anal_type_add(l: *mut RAnal, t: *mut RAnalType);
}
extern "C" {
    pub fn r_anal_type_find(a: *mut RAnal, name: *const ::std::os::raw::c_char) -> *mut RAnalType;
}
extern "C" {
    pub fn r_anal_type_list(
        a: *mut RAnal,
        category: ::std::os::raw::c_short,
        enabled: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn r_anal_datatype_to_string(t: RAnalDataType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_str_to_type(a: *mut RAnal, s: *const ::std::os::raw::c_char) -> *mut RAnalType;
}
extern "C" {
    pub fn r_anal_op_nonlinear(t: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_anal_op_ismemref(t: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_anal_optype_to_string(t: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_optype_from_string(type_: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_op_family_to_string(n: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_op_family_from_string(f: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_op_hint(op: *mut RAnalOp, hint: *mut RAnalHint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_type_free(t: *mut RAnalType) -> *mut RAnalType;
}
extern "C" {
    pub fn r_anal_type_loadfile(
        a: *mut RAnal,
        path: *const ::std::os::raw::c_char,
    ) -> *mut RAnalType;
}
pub type RAnalBlockCb = ::std::option::Option<
    unsafe extern "C" fn(block: *mut RAnalBlock, user: *mut ::std::os::raw::c_void) -> bool,
>;
pub type RAnalAddrCb = ::std::option::Option<
    unsafe extern "C" fn(
        addr: ::std::os::raw::c_ulonglong,
        user: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
extern "C" {
    pub fn r_anal_block_ref(bb: *mut RAnalBlock);
}
extern "C" {
    pub fn r_anal_block_unref(bb: *mut RAnalBlock);
}
extern "C" {
    pub fn r_anal_create_block(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalBlock;
}
extern "C" {
    pub fn r_anal_block_split(
        bb: *mut RAnalBlock,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalBlock;
}
extern "C" {
    pub fn r_anal_block_merge(a: *mut RAnalBlock, b: *mut RAnalBlock) -> bool;
}
extern "C" {
    pub fn r_anal_delete_block(bb: *mut RAnalBlock);
}
extern "C" {
    pub fn r_anal_block_set_size(block: *mut RAnalBlock, size: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_block_relocate(
        block: *mut RAnalBlock,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_get_block_at(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalBlock;
}
extern "C" {
    pub fn r_anal_blocks_foreach_in(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        cb: RAnalBlockCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_get_blocks_in(anal: *mut RAnal, addr: ::std::os::raw::c_ulonglong) -> *mut RList;
}
extern "C" {
    pub fn r_anal_blocks_foreach_intersect(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
        cb: RAnalBlockCb,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_anal_get_blocks_intersect(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_anal_block_successor_addrs_foreach(
        block: *mut RAnalBlock,
        cb: RAnalAddrCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_block_recurse(
        block: *mut RAnalBlock,
        cb: RAnalBlockCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_block_recurse_followthrough(
        block: *mut RAnalBlock,
        cb: RAnalBlockCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_block_recurse_depth_first(
        block: *mut RAnalBlock,
        cb: RAnalBlockCb,
        on_exit: RAnalBlockCb,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_block_recurse_list(block: *mut RAnalBlock) -> *mut RList;
}
extern "C" {
    pub fn r_anal_block_shortest_path(
        block: *mut RAnalBlock,
        dst: ::std::os::raw::c_ulonglong,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_anal_block_add_switch_case(
        block: *mut RAnalBlock,
        switch_addr: ::std::os::raw::c_ulonglong,
        case_value: ::std::os::raw::c_ulonglong,
        case_addr: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_block_chop_noreturn(
        block: *mut RAnalBlock,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalBlock;
}
extern "C" {
    pub fn r_anal_block_automerge(blocks: *mut RList);
}
extern "C" {
    pub fn r_anal_block_op_starts_at(
        block: *mut RAnalBlock,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_block_update_hash(block: *mut RAnalBlock);
}
extern "C" {
    pub fn r_anal_block_was_modified(block: *mut RAnalBlock) -> bool;
}
extern "C" {
    pub fn r_anal_function_new(anal: *mut RAnal) -> *mut RAnalFunction;
}
extern "C" {
    pub fn r_anal_function_free(fcn: *mut RAnalFunction);
}
extern "C" {
    pub fn r_anal_add_function(anal: *mut RAnal, fcn: *mut RAnalFunction) -> bool;
}
extern "C" {
    pub fn r_anal_create_function(
        anal: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
        type_: ::std::os::raw::c_int,
        diff: *mut RAnalDiff,
    ) -> *mut RAnalFunction;
}
extern "C" {
    pub fn r_anal_get_functions_in(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_anal_get_function_at(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalFunction;
}
extern "C" {
    pub fn r_anal_function_delete(fcn: *mut RAnalFunction) -> bool;
}
extern "C" {
    pub fn r_anal_function_relocate(
        fcn: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_function_rename(
        fcn: *mut RAnalFunction,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_function_add_block(fcn: *mut RAnalFunction, bb: *mut RAnalBlock);
}
extern "C" {
    pub fn r_anal_function_remove_block(fcn: *mut RAnalFunction, bb: *mut RAnalBlock);
}
extern "C" {
    pub fn r_anal_function_linear_size(fcn: *mut RAnalFunction) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_function_min_addr(fcn: *mut RAnalFunction) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_function_max_addr(fcn: *mut RAnalFunction) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_function_size_from_entry(fcn: *mut RAnalFunction) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_function_realsize(fcn: *const RAnalFunction) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_function_contains(
        fcn: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_function_was_modified(fcn: *mut RAnalFunction) -> bool;
}
extern "C" {
    pub fn r_anal_new() -> *mut RAnal;
}
extern "C" {
    pub fn r_anal_purge(anal: *mut RAnal);
}
extern "C" {
    pub fn r_anal_free(r: *mut RAnal) -> *mut RAnal;
}
extern "C" {
    pub fn r_anal_set_user_ptr(anal: *mut RAnal, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_anal_plugin_free(p: *mut RAnalPlugin);
}
extern "C" {
    pub fn r_anal_add(anal: *mut RAnal, foo: *mut RAnalPlugin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_archinfo(anal: *mut RAnal, query: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_use(anal: *mut RAnal, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_esil_use(anal: *mut RAnal, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_set_reg_profile(anal: *mut RAnal, rp: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_get_reg_profile(anal: *mut RAnal) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_get_bbaddr(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_set_bits(anal: *mut RAnal, bits: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_anal_set_os(anal: *mut RAnal, os: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_set_cpu(anal: *mut RAnal, cpu: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_set_big_endian(anal: *mut RAnal, boolean: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_anal_mask(
        anal: *mut RAnal,
        size: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_uchar,
        at: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_anal_trace_bb(anal: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_fcntype_tostring(type_: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_fcn_bb(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_bind(b: *mut RAnal, bnd: *mut RAnalBind);
}
extern "C" {
    pub fn r_anal_set_triplet(
        anal: *mut RAnal,
        os: *const ::std::os::raw::c_char,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_add_import(anal: *mut RAnal, imp: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_remove_import(anal: *mut RAnal, imp: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_purge_imports(anal: *mut RAnal);
}
extern "C" {
    pub fn r_anal_bb_from_offset(
        anal: *mut RAnal,
        off: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalBlock;
}
extern "C" {
    pub fn r_anal_bb_set_offset(
        bb: *mut RAnalBlock,
        i: ::std::os::raw::c_int,
        v: ::std::os::raw::c_ushort,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_bb_offset_inst(
        bb: *const RAnalBlock,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn r_anal_bb_opaddr_i(
        bb: *mut RAnalBlock,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_bb_opaddr_at(
        bb: *mut RAnalBlock,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_bb_size_i(
        bb: *mut RAnalBlock,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_stackop_tostring(s: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_op_new() -> *mut RAnalOp;
}
extern "C" {
    pub fn r_anal_op_free(op: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_anal_op_init(op: *mut RAnalOp);
}
extern "C" {
    pub fn r_anal_op_fini(op: *mut RAnalOp);
}
extern "C" {
    pub fn r_anal_op_reg_delta(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_op_is_eob(op: *mut RAnalOp) -> bool;
}
extern "C" {
    pub fn r_anal_op_list_new() -> *mut RList;
}
extern "C" {
    pub fn r_anal_op(
        anal: *mut RAnal,
        op: *mut RAnalOp,
        addr: ::std::os::raw::c_ulonglong,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        mask: RAnalOpMask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_op_hexstr(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        hexstr: *const ::std::os::raw::c_char,
    ) -> *mut RAnalOp;
}
extern "C" {
    pub fn r_anal_op_to_string(anal: *mut RAnal, op: *mut RAnalOp) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_esil_new(
        stacksize: ::std::os::raw::c_int,
        iotrap: ::std::os::raw::c_int,
        addrsize: ::std::os::raw::c_uint,
    ) -> *mut RAnalEsil;
}
extern "C" {
    pub fn r_anal_esil_set_pc(esil: *mut RAnalEsil, addr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_anal_esil_setup(
        esil: *mut RAnalEsil,
        anal: *mut RAnal,
        romem: ::std::os::raw::c_int,
        stats: ::std::os::raw::c_int,
        nonull: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_esil_setup_macros(esil: *mut RAnalEsil);
}
extern "C" {
    pub fn r_anal_esil_setup_ops(esil: *mut RAnalEsil);
}
extern "C" {
    pub fn r_anal_esil_free(esil: *mut RAnalEsil);
}
extern "C" {
    pub fn r_anal_esil_runword(esil: *mut RAnalEsil, word: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_esil_parse(esil: *mut RAnalEsil, str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_esil_dumpstack(esil: *mut RAnalEsil) -> bool;
}
extern "C" {
    pub fn r_anal_esil_mem_read(
        esil: *mut RAnalEsil,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_esil_mem_write(
        esil: *mut RAnalEsil,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_esil_reg_read(
        esil: *mut RAnalEsil,
        regname: *const ::std::os::raw::c_char,
        num: *mut ::std::os::raw::c_ulonglong,
        size: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_esil_reg_write(
        esil: *mut RAnalEsil,
        dst: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_esil_pushnum(esil: *mut RAnalEsil, num: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_anal_esil_push(esil: *mut RAnalEsil, str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_esil_pop(esil: *mut RAnalEsil) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_esil_set_op(
        esil: *mut RAnalEsil,
        op: *const ::std::os::raw::c_char,
        code: RAnalEsilOpCb,
        push: ::std::os::raw::c_uint,
        pop: ::std::os::raw::c_uint,
        type_: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_esil_get_op(
        esil: *mut RAnalEsil,
        op: *const ::std::os::raw::c_char,
    ) -> *mut RAnalEsilOp;
}
extern "C" {
    pub fn r_anal_esil_del_op(esil: *mut RAnalEsil, op: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_esil_stack_free(esil: *mut RAnalEsil);
}
extern "C" {
    pub fn r_anal_esil_get_parm_type(
        esil: *mut RAnalEsil,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_esil_get_parm(
        esil: *mut RAnalEsil,
        str_: *const ::std::os::raw::c_char,
        num: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_esil_condition(
        esil: *mut RAnalEsil,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_esil_handlers_init(esil: *mut RAnalEsil);
}
extern "C" {
    pub fn r_anal_esil_set_interrupt(
        esil: *mut RAnalEsil,
        intr_num: ::std::os::raw::c_uint,
        cb: RAnalEsilHandlerCB,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_esil_get_interrupt(
        esil: *mut RAnalEsil,
        intr_num: ::std::os::raw::c_uint,
    ) -> RAnalEsilHandlerCB;
}
extern "C" {
    pub fn r_anal_esil_del_interrupt(esil: *mut RAnalEsil, intr_num: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn r_anal_esil_set_syscall(
        esil: *mut RAnalEsil,
        sysc_num: ::std::os::raw::c_uint,
        cb: RAnalEsilHandlerCB,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_esil_get_syscall(
        esil: *mut RAnalEsil,
        sysc_num: ::std::os::raw::c_uint,
    ) -> RAnalEsilHandlerCB;
}
extern "C" {
    pub fn r_anal_esil_del_syscall(esil: *mut RAnalEsil, sysc_num: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn r_anal_esil_fire_interrupt(
        esil: *mut RAnalEsil,
        intr_num: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_esil_do_syscall(
        esil: *mut RAnalEsil,
        sysc_num: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_esil_handlers_fini(esil: *mut RAnalEsil);
}
extern "C" {
    pub fn r_anal_esil_plugins_init(esil: *mut RAnalEsil);
}
extern "C" {
    pub fn r_anal_esil_plugins_fini(esil: *mut RAnalEsil);
}
extern "C" {
    pub fn r_anal_esil_plugin_add(esil: *mut RAnalEsil, plugin: *mut RAnalEsilPlugin) -> bool;
}
extern "C" {
    pub fn r_anal_esil_plugin_activate(
        esil: *mut RAnalEsil,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_esil_plugin_deactivate(esil: *mut RAnalEsil, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_esil_mem_ro(esil: *mut RAnalEsil, mem_readonly: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_anal_esil_stats(esil: *mut RAnalEsil, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_anal_esil_trace_new(esil: *mut RAnalEsil) -> *mut RAnalEsilTrace;
}
extern "C" {
    pub fn r_anal_esil_trace_free(trace: *mut RAnalEsilTrace);
}
extern "C" {
    pub fn r_anal_esil_trace_op(esil: *mut RAnalEsil, op: *mut RAnalOp);
}
extern "C" {
    pub fn r_anal_esil_trace_list(esil: *mut RAnalEsil);
}
extern "C" {
    pub fn r_anal_esil_trace_show(esil: *mut RAnalEsil, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_anal_esil_trace_restore(esil: *mut RAnalEsil, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_anal_pin_init(a: *mut RAnal);
}
extern "C" {
    pub fn r_anal_pin_fini(a: *mut RAnal);
}
extern "C" {
    pub fn r_anal_pin(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_anal_pin_unset(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_pin_call(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_pin_list(a: *mut RAnal);
}
extern "C" {
    pub fn r_anal_function_cost(fcn: *mut RAnalFunction) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn r_anal_function_count_edges(
        fcn: *const RAnalFunction,
        ebbs: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_get_fcn_in(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        type_: ::std::os::raw::c_int,
    ) -> *mut RAnalFunction;
}
extern "C" {
    pub fn r_anal_get_fcn_in_bounds(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        type_: ::std::os::raw::c_int,
    ) -> *mut RAnalFunction;
}
extern "C" {
    pub fn r_anal_get_function_byname(
        anal: *mut RAnal,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RAnalFunction;
}
extern "C" {
    pub fn r_anal_function(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_ulonglong,
        reftype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_fcn_del(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_fcn_del_locs(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_fcn_add_bb(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
        jump: ::std::os::raw::c_ulonglong,
        fail: ::std::os::raw::c_ulonglong,
        diff: *mut RAnalDiff,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_check_fcn(
        anal: *mut RAnal,
        buf: *mut ::std::os::raw::c_uchar,
        bufsz: ::std::os::raw::c_ushort,
        addr: ::std::os::raw::c_ulonglong,
        low: ::std::os::raw::c_ulonglong,
        high: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_fcn_invalidate_read_ahead_cache();
}
extern "C" {
    pub fn r_anal_function_check_bp_use(fcn: *mut RAnalFunction);
}
extern "C" {
    pub fn r_anal_update_analysis_range(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_function_update_analysis(fcn: *mut RAnalFunction);
}
extern "C" {
    pub fn r_anal_fcn_var_del_byindex(
        a: *mut RAnal,
        fna: ::std::os::raw::c_ulonglong,
        kind: ::std::os::raw::c_char,
        scope: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_var_count(
        a: *mut RAnal,
        fcn: *mut RAnalFunction,
        kind: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_var_display(anal: *mut RAnal, var: *mut RAnalVar) -> bool;
}
extern "C" {
    pub fn r_anal_function_complexity(fcn: *mut RAnalFunction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_function_loops(fcn: *mut RAnalFunction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_trim_jmprefs(anal: *mut RAnal, fcn: *mut RAnalFunction);
}
extern "C" {
    pub fn r_anal_del_jmprefs(anal: *mut RAnal, fcn: *mut RAnalFunction);
}
extern "C" {
    pub fn r_anal_function_get_json(function: *mut RAnalFunction) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_fcn_next(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalFunction;
}
extern "C" {
    pub fn r_anal_function_get_signature(
        function: *mut RAnalFunction,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_str_to_fcn(
        a: *mut RAnal,
        f: *mut RAnalFunction,
        _str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_fcn_count(
        a: *mut RAnal,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_fcn_bbget_in(
        anal: *const RAnal,
        fcn: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalBlock;
}
extern "C" {
    pub fn r_anal_fcn_bbget_at(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalBlock;
}
extern "C" {
    pub fn r_anal_fcn_bbadd(fcn: *mut RAnalFunction, bb: *mut RAnalBlock) -> bool;
}
extern "C" {
    pub fn r_anal_function_resize(
        fcn: *mut RAnalFunction,
        newsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_function_purity(fcn: *mut RAnalFunction) -> bool;
}
pub type RAnalRefCmp = ::std::option::Option<
    unsafe extern "C" fn(ref_: *mut RAnalRef, data: *mut ::std::os::raw::c_void) -> bool,
>;
extern "C" {
    pub fn r_anal_ref_list_new() -> *mut RList;
}
extern "C" {
    pub fn r_anal_xrefs_count(anal: *mut RAnal) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_xrefs_type_tostring(type_: RAnalRefType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_xrefs_type(ch: ::std::os::raw::c_char) -> RAnalRefType;
}
extern "C" {
    pub fn r_anal_xrefs_get(anal: *mut RAnal, to: ::std::os::raw::c_ulonglong) -> *mut RList;
}
extern "C" {
    pub fn r_anal_refs_get(anal: *mut RAnal, to: ::std::os::raw::c_ulonglong) -> *mut RList;
}
extern "C" {
    pub fn r_anal_xrefs_get_from(anal: *mut RAnal, from: ::std::os::raw::c_ulonglong)
        -> *mut RList;
}
extern "C" {
    pub fn r_anal_xrefs_list(anal: *mut RAnal, rad: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_anal_function_get_refs(fcn: *mut RAnalFunction) -> *mut RList;
}
extern "C" {
    pub fn r_anal_function_get_xrefs(fcn: *mut RAnalFunction) -> *mut RList;
}
extern "C" {
    pub fn r_anal_xrefs_from(
        anal: *mut RAnal,
        list: *mut RList,
        kind: *const ::std::os::raw::c_char,
        type_: RAnalRefType,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_xrefs_set(
        anal: *mut RAnal,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        type_: RAnalRefType,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_xrefs_deln(
        anal: *mut RAnal,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        type_: RAnalRefType,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_xref_del(
        anal: *mut RAnal,
        at: ::std::os::raw::c_ulonglong,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_get_fcns(anal: *mut RAnal) -> *mut RList;
}
extern "C" {
    pub fn r_anal_remove_parsed_type(anal: *mut RAnal, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_save_parsed_type(anal: *mut RAnal, parsed: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_function_autoname_var(
        fcn: *mut RAnalFunction,
        kind: ::std::os::raw::c_char,
        pfx: *const ::std::os::raw::c_char,
        ptr: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_function_set_var(
        fcn: *mut RAnalFunction,
        delta: ::std::os::raw::c_int,
        kind: ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        isarg: bool,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RAnalVar;
}
extern "C" {
    pub fn r_anal_function_get_var(
        fcn: *mut RAnalFunction,
        kind: ::std::os::raw::c_char,
        delta: ::std::os::raw::c_int,
    ) -> *mut RAnalVar;
}
extern "C" {
    pub fn r_anal_function_get_var_byname(
        fcn: *mut RAnalFunction,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RAnalVar;
}
extern "C" {
    pub fn r_anal_function_delete_vars_by_kind(fcn: *mut RAnalFunction, kind: RAnalVarKind);
}
extern "C" {
    pub fn r_anal_function_delete_all_vars(fcn: *mut RAnalFunction);
}
extern "C" {
    pub fn r_anal_function_delete_unused_vars(fcn: *mut RAnalFunction);
}
extern "C" {
    pub fn r_anal_function_delete_var(fcn: *mut RAnalFunction, var: *mut RAnalVar);
}
extern "C" {
    pub fn r_anal_function_rebase_vars(a: *mut RAnal, fcn: *mut RAnalFunction) -> bool;
}
extern "C" {
    pub fn r_anal_function_get_var_stackptr_at(
        fcn: *mut RAnalFunction,
        delta: ::std::os::raw::c_longlong,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_anal_function_get_var_reg_at(
        fcn: *mut RAnalFunction,
        delta: ::std::os::raw::c_longlong,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_function_get_vars_used_at(
        fcn: *mut RAnalFunction,
        op_addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RPVector;
}
extern "C" {
    pub fn r_anal_get_used_function_var(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalVar;
}
extern "C" {
    pub fn r_anal_var_rename(
        var: *mut RAnalVar,
        new_name: *const ::std::os::raw::c_char,
        verbose: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_var_set_type(var: *mut RAnalVar, type_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_var_delete(var: *mut RAnalVar);
}
extern "C" {
    pub fn r_anal_var_addr(var: *mut RAnalVar) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_var_set_access(
        var: *mut RAnalVar,
        reg: *const ::std::os::raw::c_char,
        access_addr: ::std::os::raw::c_ulonglong,
        access_type: ::std::os::raw::c_int,
        stackptr: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn r_anal_var_remove_access_at(var: *mut RAnalVar, address: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_var_clear_accesses(var: *mut RAnalVar);
}
extern "C" {
    pub fn r_anal_var_add_constraint(var: *mut RAnalVar, constraint: *mut RAnalVarConstraint);
}
extern "C" {
    pub fn r_anal_var_get_constraints_readable(var: *mut RAnalVar) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_var_get_access_at(
        var: *mut RAnalVar,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalVarAccess;
}
extern "C" {
    pub fn r_anal_var_get_argnum(var: *mut RAnalVar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_extract_vars(anal: *mut RAnal, fcn: *mut RAnalFunction, op: *mut RAnalOp);
}
extern "C" {
    pub fn r_anal_extract_rarg(
        anal: *mut RAnal,
        op: *mut RAnalOp,
        fcn: *mut RAnalFunction,
        reg_set: *mut ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_var_get_dst_var(var: *mut RAnalVar) -> *mut RAnalVar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_fcn_vars_cache {
    pub bvars: *mut RList,
    pub rvars: *mut RList,
    pub svars: *mut RList,
}
#[test]
fn bindgen_test_layout_r_anal_fcn_vars_cache() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_fcn_vars_cache>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_fcn_vars_cache))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_fcn_vars_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_fcn_vars_cache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_fcn_vars_cache>())).bvars as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_fcn_vars_cache),
            "::",
            stringify!(bvars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_fcn_vars_cache>())).rvars as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_fcn_vars_cache),
            "::",
            stringify!(rvars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_fcn_vars_cache>())).svars as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_fcn_vars_cache),
            "::",
            stringify!(svars)
        )
    );
}
pub type RAnalFcnVarsCache = r_anal_fcn_vars_cache;
extern "C" {
    pub fn r_anal_fcn_vars_cache_init(
        anal: *mut RAnal,
        cache: *mut RAnalFcnVarsCache,
        fcn: *mut RAnalFunction,
    );
}
extern "C" {
    pub fn r_anal_fcn_vars_cache_fini(cache: *mut RAnalFcnVarsCache);
}
extern "C" {
    pub fn r_anal_fcn_format_sig(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        fcn_name: *mut ::std::os::raw::c_char,
        reuse_cache: *mut RAnalFcnVarsCache,
        fcn_name_pre: *const ::std::os::raw::c_char,
        fcn_name_post: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_xrefs_init(anal: *mut RAnal) -> bool;
}
extern "C" {
    pub fn r_anal_diff_new() -> *mut RAnalDiff;
}
extern "C" {
    pub fn r_anal_diff_setup(anal: *mut RAnal, doops: ::std::os::raw::c_int, thbb: f64, thfcn: f64);
}
extern "C" {
    pub fn r_anal_diff_setup_i(
        anal: *mut RAnal,
        doops: ::std::os::raw::c_int,
        thbb: ::std::os::raw::c_int,
        thfcn: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_diff_free(diff: *mut RAnalDiff) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_anal_diff_fingerprint_bb(
        anal: *mut RAnal,
        bb: *mut RAnalBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_diff_fingerprint_fcn(anal: *mut RAnal, fcn: *mut RAnalFunction) -> size_t;
}
extern "C" {
    pub fn r_anal_diff_bb(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        fcn2: *mut RAnalFunction,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_diff_fcn(
        anal: *mut RAnal,
        fcns: *mut RList,
        fcns2: *mut RList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_diff_eval(anal: *mut RAnal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_value_new() -> *mut RAnalValue;
}
extern "C" {
    pub fn r_anal_value_copy(ov: *mut RAnalValue) -> *mut RAnalValue;
}
extern "C" {
    pub fn r_anal_value_new_from_string(str_: *const ::std::os::raw::c_char) -> *mut RAnalValue;
}
extern "C" {
    pub fn r_anal_value_eval(value: *mut RAnalValue) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn r_anal_value_to_string(value: *mut RAnalValue) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_value_to_ut64(
        anal: *mut RAnal,
        val: *mut RAnalValue,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_value_set_ut64(
        anal: *mut RAnal,
        val: *mut RAnalValue,
        num: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_value_free(value: *mut RAnalValue);
}
extern "C" {
    pub fn r_anal_cond_new() -> *mut RAnalCond;
}
extern "C" {
    pub fn r_anal_cond_new_from_op(op: *mut RAnalOp) -> *mut RAnalCond;
}
extern "C" {
    pub fn r_anal_cond_fini(c: *mut RAnalCond);
}
extern "C" {
    pub fn r_anal_cond_free(c: *mut RAnalCond);
}
extern "C" {
    pub fn r_anal_cond_to_string(cond: *mut RAnalCond) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_cond_eval(anal: *mut RAnal, cond: *mut RAnalCond) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_cond_new_from_string(str_: *const ::std::os::raw::c_char) -> *mut RAnalCond;
}
extern "C" {
    pub fn r_anal_cond_tostring(cc: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_jmptbl(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        block: *mut RAnalBlock,
        jmpaddr: ::std::os::raw::c_ulonglong,
        table: ::std::os::raw::c_ulonglong,
        tablesize: ::std::os::raw::c_ulonglong,
        default_addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn try_get_delta_jmptbl_info(
        a: *mut RAnal,
        fcn: *mut RAnalFunction,
        jmp_addr: ::std::os::raw::c_ulonglong,
        lea_addr: ::std::os::raw::c_ulonglong,
        table_size: *mut ::std::os::raw::c_ulonglong,
        default_case: *mut ::std::os::raw::c_ulonglong,
        start_casenum_shift: *mut ::std::os::raw::c_longlong,
    ) -> bool;
}
extern "C" {
    pub fn try_walkthrough_jmptbl(
        analysis: *mut RAnal,
        fcn: *mut RAnalFunction,
        block: *mut RAnalBlock,
        depth: ::std::os::raw::c_int,
        ip: ::std::os::raw::c_ulonglong,
        start_casenum_shift: ::std::os::raw::c_longlong,
        jmptbl_loc: ::std::os::raw::c_ulonglong,
        jmptbl_off: ::std::os::raw::c_ulonglong,
        sz: ::std::os::raw::c_ulonglong,
        jmptbl_size: ::std::os::raw::c_ulonglong,
        default_case: ::std::os::raw::c_ulonglong,
        ret0: bool,
    ) -> bool;
}
extern "C" {
    pub fn try_walkthrough_casetbl(
        analysis: *mut RAnal,
        fcn: *mut RAnalFunction,
        block: *mut RAnalBlock,
        depth: ::std::os::raw::c_int,
        ip: ::std::os::raw::c_ulonglong,
        start_casenum_shift: ::std::os::raw::c_longlong,
        jmptbl_loc: ::std::os::raw::c_ulonglong,
        casetbl_loc: ::std::os::raw::c_ulonglong,
        jmptbl_off: ::std::os::raw::c_ulonglong,
        sz: ::std::os::raw::c_ulonglong,
        jmptbl_size: ::std::os::raw::c_ulonglong,
        default_case: ::std::os::raw::c_ulonglong,
        ret0: bool,
    ) -> bool;
}
extern "C" {
    pub fn try_get_jmptbl_info(
        analysis: *mut RAnal,
        fcn: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
        my_bb: *mut RAnalBlock,
        table_size: *mut ::std::os::raw::c_ulonglong,
        default_case: *mut ::std::os::raw::c_ulonglong,
        start_casenum_shift: *mut ::std::os::raw::c_longlong,
    ) -> bool;
}
extern "C" {
    pub fn walkthrough_arm_jmptbl_style(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        block: *mut RAnalBlock,
        depth: ::std::os::raw::c_int,
        ip: ::std::os::raw::c_ulonglong,
        jmptbl_loc: ::std::os::raw::c_ulonglong,
        sz: ::std::os::raw::c_ulonglong,
        jmptbl_size: ::std::os::raw::c_ulonglong,
        default_case: ::std::os::raw::c_ulonglong,
        ret0: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_reflines_get(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
        nlines: ::std::os::raw::c_int,
        linesout: ::std::os::raw::c_int,
        linescall: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_anal_reflines_middle(
        anal: *mut RAnal,
        list: *mut RList,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_reflines_str(
        core: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
        opts: ::std::os::raw::c_int,
    ) -> *mut RAnalRefStr;
}
extern "C" {
    pub fn r_anal_reflines_str_free(refstr: *mut RAnalRefStr);
}
extern "C" {
    pub fn r_anal_var_list_show(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        kind: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        pj: *mut PJ,
    );
}
extern "C" {
    pub fn r_anal_var_list(
        anal: *mut RAnal,
        fcn: *mut RAnalFunction,
        kind: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_anal_var_all_list(anal: *mut RAnal, fcn: *mut RAnalFunction) -> *mut RList;
}
extern "C" {
    pub fn r_anal_function_get_var_fields(
        fcn: *mut RAnalFunction,
        kind: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_anal_cc_exist(anal: *mut RAnal, convention: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_cc_del(anal: *mut RAnal, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_cc_set(anal: *mut RAnal, expr: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_cc_get(
        anal: *mut RAnal,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_cc_once(anal: *mut RAnal) -> bool;
}
extern "C" {
    pub fn r_anal_cc_get_json(anal: *mut RAnal, pj: *mut PJ, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_cc_arg(
        anal: *mut RAnal,
        convention: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_cc_self(
        anal: *mut RAnal,
        convention: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_cc_set_self(
        anal: *mut RAnal,
        convention: *const ::std::os::raw::c_char,
        self_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_anal_cc_error(
        anal: *mut RAnal,
        convention: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_cc_set_error(
        anal: *mut RAnal,
        convention: *const ::std::os::raw::c_char,
        error: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_anal_cc_max_arg(
        anal: *mut RAnal,
        cc: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_cc_ret(
        anal: *mut RAnal,
        convention: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_cc_default(anal: *mut RAnal) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_set_cc_default(anal: *mut RAnal, convention: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_syscc_default(anal: *mut RAnal) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_set_syscc_default(anal: *mut RAnal, convention: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_cc_func(
        anal: *mut RAnal,
        func_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_noreturn_at(anal: *mut RAnal, addr: ::std::os::raw::c_ulonglong) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_data_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub type_: ::std::os::raw::c_int,
    pub ptr: ::std::os::raw::c_ulonglong,
    pub str_: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub buf: *mut ::std::os::raw::c_uchar,
    pub sbuf: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_r_anal_data_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_data_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_anal_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_data_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_data_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_data_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_data_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_data_t>())).ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_data_t),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_data_t>())).str_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_data_t),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_data_t>())).len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_data_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_data_t>())).buf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_data_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_data_t>())).sbuf as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_data_t),
            "::",
            stringify!(sbuf)
        )
    );
}
pub type RAnalData = r_anal_data_t;
extern "C" {
    pub fn r_anal_data(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
        wordsize: ::std::os::raw::c_int,
    ) -> *mut RAnalData;
}
extern "C" {
    pub fn r_anal_data_kind(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_data_new_string(
        addr: ::std::os::raw::c_ulonglong,
        p: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        wide: ::std::os::raw::c_int,
    ) -> *mut RAnalData;
}
extern "C" {
    pub fn r_anal_data_new(
        addr: ::std::os::raw::c_ulonglong,
        type_: ::std::os::raw::c_int,
        n: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut RAnalData;
}
extern "C" {
    pub fn r_anal_data_free(d: *mut RAnalData);
}
extern "C" {
    pub fn r_anal_data_to_string(
        d: *mut RAnalData,
        pal: *mut RConsPrintablePalette,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_meta_set(
        a: *mut RAnal,
        type_: RAnalMetaType,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_meta_set_with_subtype(
        m: *mut RAnal,
        type_: RAnalMetaType,
        subtype: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_meta_del(
        a: *mut RAnal,
        type_: RAnalMetaType,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_meta_set_string(
        a: *mut RAnal,
        type_: RAnalMetaType,
        addr: ::std::os::raw::c_ulonglong,
        s: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_meta_get_string(
        a: *mut RAnal,
        type_: RAnalMetaType,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_meta_set_data_at(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        wordsz: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_meta_get_at(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        type_: RAnalMetaType,
        size: *mut ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalMetaItem;
}
extern "C" {
    pub fn r_meta_get_in(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        type_: RAnalMetaType,
    ) -> *mut RIntervalNode;
}
extern "C" {
    pub fn r_meta_get_all_at(a: *mut RAnal, at: ::std::os::raw::c_ulonglong) -> *mut RPVector;
}
extern "C" {
    pub fn r_meta_get_all_in(
        a: *mut RAnal,
        at: ::std::os::raw::c_ulonglong,
        type_: RAnalMetaType,
    ) -> *mut RPVector;
}
extern "C" {
    pub fn r_meta_get_all_intersect(
        a: *mut RAnal,
        start: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
        type_: RAnalMetaType,
    ) -> *mut RPVector;
}
extern "C" {
    pub fn r_meta_space_unset_for(a: *mut RAnal, space: *const RSpace);
}
extern "C" {
    pub fn r_meta_space_count_for(a: *mut RAnal, space: *const RSpace) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_meta_rebase(anal: *mut RAnal, diff: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_meta_get_size(a: *mut RAnal, type_: RAnalMetaType) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_meta_type_to_string(type_: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_meta_print(
        a: *mut RAnal,
        d: *mut RAnalMetaItem,
        start: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
        rad: ::std::os::raw::c_int,
        pj: *mut PJ,
        show_full: bool,
    );
}
extern "C" {
    pub fn r_meta_print_list_all(
        a: *mut RAnal,
        type_: ::std::os::raw::c_int,
        rad: ::std::os::raw::c_int,
        tq: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_meta_print_list_at(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        rad: ::std::os::raw::c_int,
        tq: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_meta_print_list_in_function(
        a: *mut RAnal,
        type_: ::std::os::raw::c_int,
        rad: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        tq: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_anal_hint_del(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_hint_clear(a: *mut RAnal);
}
extern "C" {
    pub fn r_anal_hint_free(h: *mut RAnalHint);
}
extern "C" {
    pub fn r_anal_hint_set_syntax(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        syn: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_anal_hint_set_type(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_hint_set_jump(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        jump: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_hint_set_fail(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        fail: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_hint_set_newbits(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_hint_set_nword(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        nword: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_hint_set_offset(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        typeoff: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_anal_hint_set_immbase(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        base: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_hint_set_size(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_hint_set_opcode(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_anal_hint_set_esil(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_anal_hint_set_pointer(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        ptr: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_hint_set_ret(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        val: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_hint_set_high(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_set_stackframe(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_hint_set_val(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        v: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_hint_set_arch(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        arch: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_anal_hint_set_bits(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_hint_unset_val(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_high(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_immbase(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_nword(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_size(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_type(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_esil(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_opcode(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_syntax(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_pointer(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_ret(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_offset(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_jump(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_fail(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_newbits(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_stackframe(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_arch(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_hint_unset_bits(a: *mut RAnal, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_anal_addr_hints_at(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const RVector;
}
pub type RAnalAddrHintRecordsCb = ::std::option::Option<
    unsafe extern "C" fn(
        addr: ::std::os::raw::c_ulonglong,
        records: *const RVector,
        user: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
extern "C" {
    pub fn r_anal_addr_hints_foreach(
        anal: *mut RAnal,
        cb: RAnalAddrHintRecordsCb,
        user: *mut ::std::os::raw::c_void,
    );
}
pub type RAnalArchHintCb = ::std::option::Option<
    unsafe extern "C" fn(
        addr: ::std::os::raw::c_ulonglong,
        arch: *const ::std::os::raw::c_char,
        user: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
extern "C" {
    pub fn r_anal_arch_hints_foreach(
        anal: *mut RAnal,
        cb: RAnalArchHintCb,
        user: *mut ::std::os::raw::c_void,
    );
}
pub type RAnalBitsHintCb = ::std::option::Option<
    unsafe extern "C" fn(
        addr: ::std::os::raw::c_ulonglong,
        bits: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
extern "C" {
    pub fn r_anal_bits_hints_foreach(
        anal: *mut RAnal,
        cb: RAnalBitsHintCb,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_anal_hint_arch_at(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        hint_addr: *mut ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_hint_bits_at(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        hint_addr: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_hint_get(anal: *mut RAnal, addr: ::std::os::raw::c_ulonglong) -> *mut RAnalHint;
}
extern "C" {
    pub fn r_anal_switch_op_new(
        addr: ::std::os::raw::c_ulonglong,
        min_val: ::std::os::raw::c_ulonglong,
        max_val: ::std::os::raw::c_ulonglong,
        def_val: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalSwitchOp;
}
extern "C" {
    pub fn r_anal_switch_op_free(swop: *mut RAnalSwitchOp);
}
extern "C" {
    pub fn r_anal_switch_op_add_case(
        swop: *mut RAnalSwitchOp,
        addr: ::std::os::raw::c_ulonglong,
        value: ::std::os::raw::c_ulonglong,
        jump: ::std::os::raw::c_ulonglong,
    ) -> *mut RAnalCaseOp;
}
extern "C" {
    pub fn r_anal_cycle_frame_new() -> *mut RAnalCycleFrame;
}
extern "C" {
    pub fn r_anal_cycle_frame_free(cf: *mut RAnalCycleFrame);
}
extern "C" {
    pub fn r_anal_function_get_label(
        fcn: *mut RAnalFunction,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_function_get_label_at(
        fcn: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_function_set_label(
        fcn: *mut RAnalFunction,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_function_delete_label(
        fcn: *mut RAnalFunction,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_function_delete_label_at(
        fcn: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_set_limits(
        anal: *mut RAnal,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_unset_limits(anal: *mut RAnal);
}
extern "C" {
    pub fn r_anal_esil_to_reil_setup(
        esil: *mut RAnalEsil,
        anal: *mut RAnal,
        romem: ::std::os::raw::c_int,
        stats: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_anal_noreturn_list(anal: *mut RAnal, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_anal_noreturn_add(
        anal: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_noreturn_drop(anal: *mut RAnal, expr: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_noreturn_at_addr(anal: *mut RAnal, addr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_sign_space_count_for(a: *mut RAnal, space: *const RSpace) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sign_space_unset_for(a: *mut RAnal, space: *const RSpace);
}
extern "C" {
    pub fn r_sign_space_rename_for(
        a: *mut RAnal,
        space: *const RSpace,
        oname: *const ::std::os::raw::c_char,
        nname: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RVTableContext {
    pub anal: *mut RAnal,
    pub abi: RAnalCPPABI,
    pub word_size: ::std::os::raw::c_uchar,
    pub read_addr: ::std::option::Option<
        unsafe extern "C" fn(
            anal: *mut RAnal,
            addr: ::std::os::raw::c_ulonglong,
            buf: *mut ::std::os::raw::c_ulonglong,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_RVTableContext() {
    assert_eq!(
        ::std::mem::size_of::<RVTableContext>(),
        24usize,
        concat!("Size of: ", stringify!(RVTableContext))
    );
    assert_eq!(
        ::std::mem::align_of::<RVTableContext>(),
        8usize,
        concat!("Alignment of ", stringify!(RVTableContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RVTableContext>())).anal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RVTableContext),
            "::",
            stringify!(anal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RVTableContext>())).abi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RVTableContext),
            "::",
            stringify!(abi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RVTableContext>())).word_size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RVTableContext),
            "::",
            stringify!(word_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RVTableContext>())).read_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RVTableContext),
            "::",
            stringify!(read_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vtable_info_t {
    pub saddr: ::std::os::raw::c_ulonglong,
    pub methods: RVector,
}
#[test]
fn bindgen_test_layout_vtable_info_t() {
    assert_eq!(
        ::std::mem::size_of::<vtable_info_t>(),
        56usize,
        concat!("Size of: ", stringify!(vtable_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vtable_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(vtable_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vtable_info_t>())).saddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vtable_info_t),
            "::",
            stringify!(saddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vtable_info_t>())).methods as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vtable_info_t),
            "::",
            stringify!(methods)
        )
    );
}
pub type RVTableInfo = vtable_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vtable_method_info_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub vtable_offset: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_vtable_method_info_t() {
    assert_eq!(
        ::std::mem::size_of::<vtable_method_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(vtable_method_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vtable_method_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(vtable_method_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vtable_method_info_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vtable_method_info_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vtable_method_info_t>())).vtable_offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vtable_method_info_t),
            "::",
            stringify!(vtable_offset)
        )
    );
}
pub type RVTableMethodInfo = vtable_method_info_t;
extern "C" {
    pub fn r_anal_vtable_info_free(vtable: *mut RVTableInfo);
}
extern "C" {
    pub fn r_anal_vtable_info_get_size(
        context: *mut RVTableContext,
        vtable: *mut RVTableInfo,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_anal_vtable_begin(anal: *mut RAnal, context: *mut RVTableContext) -> bool;
}
extern "C" {
    pub fn r_anal_vtable_parse_at(
        context: *mut RVTableContext,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RVTableInfo;
}
extern "C" {
    pub fn r_anal_vtable_search(context: *mut RVTableContext) -> *mut RList;
}
extern "C" {
    pub fn r_anal_list_vtables(anal: *mut RAnal, rad: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_anal_rtti_msvc_demangle_class_name(
        context: *mut RVTableContext,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_rtti_msvc_print_complete_object_locator(
        context: *mut RVTableContext,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_rtti_msvc_print_type_descriptor(
        context: *mut RVTableContext,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_rtti_msvc_print_class_hierarchy_descriptor(
        context: *mut RVTableContext,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_rtti_msvc_print_base_class_descriptor(
        context: *mut RVTableContext,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_rtti_msvc_print_at_vtable(
        context: *mut RVTableContext,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
        strict: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_rtti_msvc_recover_all(vt_context: *mut RVTableContext, vtables: *mut RList);
}
extern "C" {
    pub fn r_anal_rtti_itanium_demangle_class_name(
        context: *mut RVTableContext,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_rtti_itanium_print_class_type_info(
        context: *mut RVTableContext,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_rtti_itanium_print_si_class_type_info(
        context: *mut RVTableContext,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_rtti_itanium_print_vmi_class_type_info(
        context: *mut RVTableContext,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_rtti_itanium_print_at_vtable(
        context: *mut RVTableContext,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_anal_rtti_itanium_recover_all(vt_context: *mut RVTableContext, vtables: *mut RList);
}
extern "C" {
    pub fn r_anal_rtti_demangle_class_name(
        anal: *mut RAnal,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_anal_rtti_print_at_vtable(
        anal: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_anal_rtti_print_all(anal: *mut RAnal, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_anal_rtti_recover_all(anal: *mut RAnal);
}
extern "C" {
    pub fn r_anal_preludes(anal: *mut RAnal) -> *mut RList;
}
extern "C" {
    pub fn r_anal_is_prelude(
        anal: *mut RAnal,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_method_t {
    pub name: *mut ::std::os::raw::c_char,
    pub addr: ::std::os::raw::c_ulonglong,
    pub vtable_offset: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_r_anal_method_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_method_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_method_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_method_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_method_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_method_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_method_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_method_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_method_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_method_t>())).vtable_offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_method_t),
            "::",
            stringify!(vtable_offset)
        )
    );
}
pub type RAnalMethod = r_anal_method_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_base_class_t {
    pub id: *mut ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_ulonglong,
    pub class_name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_anal_base_class_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_base_class_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_anal_base_class_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_base_class_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_base_class_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_base_class_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_class_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_base_class_t>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_class_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_base_class_t>())).class_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_base_class_t),
            "::",
            stringify!(class_name)
        )
    );
}
pub type RAnalBaseClass = r_anal_base_class_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_anal_vtable_t {
    pub id: *mut ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_ulonglong,
    pub addr: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_anal_vtable_t() {
    assert_eq!(
        ::std::mem::size_of::<r_anal_vtable_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_anal_vtable_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_anal_vtable_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_anal_vtable_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_vtable_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_vtable_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_vtable_t>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_vtable_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_vtable_t>())).addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_vtable_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_anal_vtable_t>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_anal_vtable_t),
            "::",
            stringify!(size)
        )
    );
}
pub type RAnalVTable = r_anal_vtable_t;
pub const RAnalClassErr_R_ANAL_CLASS_ERR_SUCCESS: RAnalClassErr = 0;
pub const RAnalClassErr_R_ANAL_CLASS_ERR_CLASH: RAnalClassErr = 1;
pub const RAnalClassErr_R_ANAL_CLASS_ERR_NONEXISTENT_ATTR: RAnalClassErr = 2;
pub const RAnalClassErr_R_ANAL_CLASS_ERR_NONEXISTENT_CLASS: RAnalClassErr = 3;
pub const RAnalClassErr_R_ANAL_CLASS_ERR_OTHER: RAnalClassErr = 4;
pub type RAnalClassErr = ::std::os::raw::c_uint;
extern "C" {
    pub fn r_anal_class_create(anal: *mut RAnal, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_class_delete(anal: *mut RAnal, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_class_exists(anal: *mut RAnal, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_anal_class_get_all(anal: *mut RAnal, sorted: bool) -> *mut SdbList;
}
extern "C" {
    pub fn r_anal_class_foreach(
        anal: *mut RAnal,
        cb: SdbForeachCallback,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_anal_class_rename(
        anal: *mut RAnal,
        old_name: *const ::std::os::raw::c_char,
        new_name: *const ::std::os::raw::c_char,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_method_fini(meth: *mut RAnalMethod);
}
extern "C" {
    pub fn r_anal_class_method_get(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        meth_name: *const ::std::os::raw::c_char,
        meth: *mut RAnalMethod,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_method_get_all(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
    ) -> *mut RVector;
}
extern "C" {
    pub fn r_anal_class_method_set(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        meth: *mut RAnalMethod,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_method_rename(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        old_meth_name: *const ::std::os::raw::c_char,
        new_meth_name: *const ::std::os::raw::c_char,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_method_delete(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        meth_name: *const ::std::os::raw::c_char,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_base_fini(base: *mut RAnalBaseClass);
}
extern "C" {
    pub fn r_anal_class_base_get(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        base_id: *const ::std::os::raw::c_char,
        base: *mut RAnalBaseClass,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_base_get_all(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
    ) -> *mut RVector;
}
extern "C" {
    pub fn r_anal_class_base_set(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        base: *mut RAnalBaseClass,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_base_delete(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        base_id: *const ::std::os::raw::c_char,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_vtable_fini(vtable: *mut RAnalVTable);
}
extern "C" {
    pub fn r_anal_class_vtable_get(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        vtable_id: *const ::std::os::raw::c_char,
        vtable: *mut RAnalVTable,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_vtable_get_all(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
    ) -> *mut RVector;
}
extern "C" {
    pub fn r_anal_class_vtable_set(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        vtable: *mut RAnalVTable,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_vtable_delete(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        vtable_id: *const ::std::os::raw::c_char,
    ) -> RAnalClassErr;
}
extern "C" {
    pub fn r_anal_class_print(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        detailed: bool,
    );
}
extern "C" {
    pub fn r_anal_class_json(
        anal: *mut RAnal,
        j: *mut PJ,
        class_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_anal_class_list(anal: *mut RAnal, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_anal_class_list_bases(anal: *mut RAnal, class_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_class_list_vtables(anal: *mut RAnal, class_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_anal_class_list_vtable_offset_functions(
        anal: *mut RAnal,
        class_name: *const ::std::os::raw::c_char,
        offset: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_anal_class_get_inheritance_graph(anal: *mut RAnal) -> *mut RGraph;
}
extern "C" {
    pub fn r_anal_esil_cfg_expr(
        cfg: *mut RAnalEsilCFG,
        anal: *mut RAnal,
        off: ::std::os::raw::c_ulonglong,
        expr: *mut ::std::os::raw::c_char,
    ) -> *mut RAnalEsilCFG;
}
extern "C" {
    pub fn r_anal_esil_cfg_op(
        cfg: *mut RAnalEsilCFG,
        anal: *mut RAnal,
        op: *mut RAnalOp,
    ) -> *mut RAnalEsilCFG;
}
extern "C" {
    pub fn r_anal_esil_cfg_merge_blocks(cfg: *mut RAnalEsilCFG);
}
extern "C" {
    pub fn r_anal_esil_cfg_free(cfg: *mut RAnalEsilCFG);
}
extern "C" {
    pub fn r_anal_get_gperf_cc(k: *const ::std::os::raw::c_char) -> *mut SdbGperf;
}
extern "C" {
    pub fn r_anal_get_gperf_types(k: *const ::std::os::raw::c_char) -> *mut SdbGperf;
}
extern "C" {
    pub fn r_anal_esil_dfg_node_new(
        edf: *mut RAnalEsilDFG,
        c: *const ::std::os::raw::c_char,
    ) -> *mut RAnalEsilDFGNode;
}
extern "C" {
    pub fn r_anal_esil_dfg_new(regs: *mut RReg) -> *mut RAnalEsilDFG;
}
extern "C" {
    pub fn r_anal_esil_dfg_free(dfg: *mut RAnalEsilDFG);
}
extern "C" {
    pub fn r_anal_esil_dfg_expr(
        anal: *mut RAnal,
        dfg: *mut RAnalEsilDFG,
        expr: *const ::std::os::raw::c_char,
    ) -> *mut RAnalEsilDFG;
}
extern "C" {
    pub fn r_anal_esil_dfg_fold_const(anal: *mut RAnal, dfg: *mut RAnalEsilDFG);
}
extern "C" {
    pub fn r_anal_esil_dfg_filter(
        dfg: *mut RAnalEsilDFG,
        reg: *const ::std::os::raw::c_char,
    ) -> *mut RStrBuf;
}
extern "C" {
    pub fn r_anal_esil_dfg_filter_expr(
        anal: *mut RAnal,
        expr: *const ::std::os::raw::c_char,
        reg: *const ::std::os::raw::c_char,
    ) -> *mut RStrBuf;
}
extern "C" {
    pub fn r_anal_types_from_fcn(anal: *mut RAnal, fcn: *mut RAnalFunction) -> *mut RList;
}
extern "C" {
    pub fn r_anal_get_base_type(
        anal: *mut RAnal,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RAnalBaseType;
}
extern "C" {
    pub fn r_parse_pdb_types(anal: *const RAnal, pdb: *const RPdb);
}
extern "C" {
    pub fn r_anal_save_base_type(anal: *const RAnal, type_: *const RAnalBaseType);
}
extern "C" {
    pub fn r_anal_base_type_free(type_: *mut RAnalBaseType);
}
extern "C" {
    pub fn r_anal_base_type_new(kind: RAnalBaseTypeKind) -> *mut RAnalBaseType;
}
extern "C" {
    pub fn r_anal_dwarf_process_info(anal: *const RAnal, ctx: *mut RAnalDwarfContext);
}
extern "C" {
    pub fn r_anal_dwarf_integrate_functions(
        anal: *mut RAnal,
        flags: *mut RFlag,
        dwarf_sdb: *mut Sdb,
    );
}
extern "C" {
    pub static mut r_anal_plugin_null: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_6502: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_6502_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_8051: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_amd29k: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_arc: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_arm_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_arm_gnu: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_avr: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_bf: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_chip8: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_cr16: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_cris: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_dalvik: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_ebc: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_gb: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_h8300: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_hexagon: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_i4004: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_i8080: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_java: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_m68k_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_m680x_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_malbolge: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_mcore: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_mips_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_mips_gnu: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_msp430: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_nios2: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_or1k: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_pic: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_ppc_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_ppc_gnu: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_propeller: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_riscv: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_riscv_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_rsp: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_sh: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_snes: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_sparc_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_sparc_gnu: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_s390_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_tms320: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_tms320c64x: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_tricore: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_v810: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_v850: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_vax: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_wasm: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_ws: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_x86: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_x86_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_x86_im: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_x86_simple: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_x86_udis: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_xap: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_xcore_cs: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_xtensa: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_arm_v35: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_z80: RAnalPlugin;
}
extern "C" {
    pub static mut r_anal_plugin_pyc: RAnalPlugin;
}
extern "C" {
    pub static mut r_esil_plugin_dummy: RAnalEsilPlugin;
}
extern "C" {
    pub fn r_parse_version() -> *const ::std::os::raw::c_char;
}
pub type RAnalVarList = ::std::option::Option<
    unsafe extern "C" fn(fcn: *mut RAnalFunction, kind: ::std::os::raw::c_int) -> *mut RList,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_parse_t {
    pub user: *mut ::std::os::raw::c_void,
    pub flagspace: *mut RSpace,
    pub notin_flagspace: *mut RSpace,
    pub pseudo: bool,
    pub subreg: bool,
    pub subrel: bool,
    pub subtail: bool,
    pub localvar_only: bool,
    pub subrel_addr: ::std::os::raw::c_ulonglong,
    pub maxflagnamelen: ::std::os::raw::c_int,
    pub minval: ::std::os::raw::c_int,
    pub retleave_asm: *mut ::std::os::raw::c_char,
    pub cur: *mut r_parse_plugin_t,
    pub parsers: *mut RList,
    pub varlist: RAnalVarList,
    pub get_ptr_at: ::std::option::Option<
        unsafe extern "C" fn(
            fcn: *mut RAnalFunction,
            delta: ::std::os::raw::c_longlong,
            addr: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_longlong,
    >,
    pub get_reg_at: ::std::option::Option<
        unsafe extern "C" fn(
            fcn: *mut RAnalFunction,
            delta: ::std::os::raw::c_longlong,
            addr: ::std::os::raw::c_ulonglong,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub get_op_ireg: ::std::option::Option<
        unsafe extern "C" fn(
            user: *mut ::std::os::raw::c_void,
            addr: ::std::os::raw::c_ulonglong,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub analb: RAnalBind,
    pub flag_get: RFlagGetAtAddr,
    pub label_get: RAnalLabelAt,
}
#[test]
fn bindgen_test_layout_r_parse_t() {
    assert_eq!(
        ::std::mem::size_of::<r_parse_t>(),
        168usize,
        concat!("Size of: ", stringify!(r_parse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_parse_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_parse_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).flagspace as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(flagspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).notin_flagspace as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(notin_flagspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).pseudo as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(pseudo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).subreg as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(subreg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).subrel as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(subrel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).subtail as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(subtail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).localvar_only as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(localvar_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).subrel_addr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(subrel_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).maxflagnamelen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(maxflagnamelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).minval as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(minval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).retleave_asm as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(retleave_asm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).cur as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).parsers as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(parsers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).varlist as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(varlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).get_ptr_at as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(get_ptr_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).get_reg_at as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(get_reg_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).get_op_ireg as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(get_op_ireg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).analb as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(analb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).flag_get as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(flag_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_t>())).label_get as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_t),
            "::",
            stringify!(label_get)
        )
    );
}
pub type RParse = r_parse_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_parse_plugin_t {
    pub name: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(p: *mut RParse, user: *mut ::std::os::raw::c_void) -> bool,
    >,
    pub fini: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut RParse,
            user: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub parse: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut RParse,
            data: *const ::std::os::raw::c_char,
            str_: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub assemble: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut RParse,
            data: *mut ::std::os::raw::c_char,
            str_: *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub filter: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut RParse,
            addr: ::std::os::raw::c_ulonglong,
            f: *mut RFlag,
            data: *mut ::std::os::raw::c_char,
            str_: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            big_endian: bool,
        ) -> ::std::os::raw::c_int,
    >,
    pub subvar: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut RParse,
            f: *mut RAnalFunction,
            addr: ::std::os::raw::c_ulonglong,
            oplen: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_char,
            str_: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub replace: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *const ::std::os::raw::c_char,
            newstr: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_r_parse_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_parse_plugin_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_parse_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_parse_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_parse_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_plugin_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_plugin_t>())).init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_plugin_t>())).fini as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_plugin_t),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_plugin_t>())).parse as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_plugin_t),
            "::",
            stringify!(parse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_plugin_t>())).assemble as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_plugin_t),
            "::",
            stringify!(assemble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_plugin_t>())).filter as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_plugin_t),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_plugin_t>())).subvar as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_plugin_t),
            "::",
            stringify!(subvar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_plugin_t>())).replace as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_plugin_t),
            "::",
            stringify!(replace)
        )
    );
}
pub type RParsePlugin = r_parse_plugin_t;
extern "C" {
    pub fn r_parse_new() -> *mut r_parse_t;
}
extern "C" {
    pub fn r_parse_free(p: *mut RParse);
}
extern "C" {
    pub fn r_parse_set_user_ptr(p: *mut RParse, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_parse_add(p: *mut RParse, foo: *mut RParsePlugin) -> bool;
}
extern "C" {
    pub fn r_parse_use(p: *mut RParse, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_parse_parse(
        p: *mut RParse,
        data: *const ::std::os::raw::c_char,
        str_: *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_parse_assemble(
        p: *mut RParse,
        data: *mut ::std::os::raw::c_char,
        str_: *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_parse_filter(
        p: *mut RParse,
        addr: ::std::os::raw::c_ulonglong,
        f: *mut RFlag,
        hint: *mut RAnalHint,
        data: *mut ::std::os::raw::c_char,
        str_: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        big_endian: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_parse_subvar(
        p: *mut RParse,
        f: *mut RAnalFunction,
        addr: ::std::os::raw::c_ulonglong,
        oplen: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_char,
        str_: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_parse_immtrim(opstr: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_parse_c_string(
        anal: *mut RAnal,
        code: *const ::std::os::raw::c_char,
        error_msg: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_parse_c_file(
        anal: *mut RAnal,
        path: *const ::std::os::raw::c_char,
        dir: *const ::std::os::raw::c_char,
        error_msg: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_parse_c_reset(p: *mut RParse);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_parse_ctype_t {
    _unused: [u8; 0],
}
pub type RParseCType = r_parse_ctype_t;
pub const RParseCTypeTypeKind_R_PARSE_CTYPE_TYPE_KIND_IDENTIFIER: RParseCTypeTypeKind = 0;
pub const RParseCTypeTypeKind_R_PARSE_CTYPE_TYPE_KIND_POINTER: RParseCTypeTypeKind = 1;
pub const RParseCTypeTypeKind_R_PARSE_CTYPE_TYPE_KIND_ARRAY: RParseCTypeTypeKind = 2;
pub type RParseCTypeTypeKind = ::std::os::raw::c_uint;
pub const RParseCTypeTypeIdentifierKind_R_PARSE_CTYPE_IDENTIFIER_KIND_UNSPECIFIED:
    RParseCTypeTypeIdentifierKind = 0;
pub const RParseCTypeTypeIdentifierKind_R_PARSE_CTYPE_IDENTIFIER_KIND_STRUCT:
    RParseCTypeTypeIdentifierKind = 1;
pub const RParseCTypeTypeIdentifierKind_R_PARSE_CTYPE_IDENTIFIER_KIND_UNION:
    RParseCTypeTypeIdentifierKind = 2;
pub const RParseCTypeTypeIdentifierKind_R_PARSE_CTYPE_IDENTIFIER_KIND_ENUM:
    RParseCTypeTypeIdentifierKind = 3;
pub type RParseCTypeTypeIdentifierKind = ::std::os::raw::c_uint;
pub type RParseCTypeType = r_parse_ctype_type_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_parse_ctype_type_t {
    pub kind: RParseCTypeTypeKind,
    pub __bindgen_anon_1: r_parse_ctype_type_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union r_parse_ctype_type_t__bindgen_ty_1 {
    pub identifier: r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1,
    pub pointer: r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2,
    pub array: r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1 {
    pub kind: RParseCTypeTypeIdentifierKind,
    pub name: *mut ::std::os::raw::c_char,
    pub is_const: bool,
}
#[test]
fn bindgen_test_layout_r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1>())).kind
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1>())).name
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1>())).is_const
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(is_const)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2 {
    pub type_: *mut RParseCTypeType,
    pub is_const: bool,
}
#[test]
fn bindgen_test_layout_r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2>())).is_const
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(is_const)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3 {
    pub type_: *mut RParseCTypeType,
    pub count: size_t,
}
#[test]
fn bindgen_test_layout_r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3>())).count
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(count)
        )
    );
}
#[test]
fn bindgen_test_layout_r_parse_ctype_type_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_parse_ctype_type_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(r_parse_ctype_type_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_parse_ctype_type_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_parse_ctype_type_t__bindgen_ty_1>())).identifier as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_parse_ctype_type_t__bindgen_ty_1>())).pointer as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_parse_ctype_type_t__bindgen_ty_1>())).array as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
}
#[test]
fn bindgen_test_layout_r_parse_ctype_type_t() {
    assert_eq!(
        ::std::mem::size_of::<r_parse_ctype_type_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_parse_ctype_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_parse_ctype_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_parse_ctype_type_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_parse_ctype_type_t>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_parse_ctype_type_t),
            "::",
            stringify!(kind)
        )
    );
}
extern "C" {
    pub fn r_parse_ctype_new() -> *mut RParseCType;
}
extern "C" {
    pub fn r_parse_ctype_free(ctype: *mut RParseCType);
}
extern "C" {
    pub fn r_parse_ctype_parse(
        ctype: *mut RParseCType,
        str_: *const ::std::os::raw::c_char,
        error: *mut *mut ::std::os::raw::c_char,
    ) -> *mut RParseCTypeType;
}
extern "C" {
    pub fn r_parse_ctype_type_free(type_: *mut RParseCTypeType);
}
extern "C" {
    pub static mut r_parse_plugin_6502_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_arm_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_att2intel: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_avr_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_chip8_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_dalvik_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_dummy: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_m68k_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_mips_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_ppc_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_sh_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_wasm_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_riscv_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_x86_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_z80_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_tms320_pseudo: RParsePlugin;
}
extern "C" {
    pub static mut r_parse_plugin_v850_pseudo: RParsePlugin;
}
extern "C" {
    pub fn r_asm_version() -> *const ::std::os::raw::c_char;
}
pub const R_ASM_SYNTAX_NONE: ::std::os::raw::c_uint = 0;
pub const R_ASM_SYNTAX_INTEL: ::std::os::raw::c_uint = 1;
pub const R_ASM_SYNTAX_ATT: ::std::os::raw::c_uint = 2;
pub const R_ASM_SYNTAX_MASM: ::std::os::raw::c_uint = 3;
pub const R_ASM_SYNTAX_REGNUM: ::std::os::raw::c_uint = 4;
pub const R_ASM_SYNTAX_JZ: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
pub const R_ASM_MOD_RAWVALUE: ::std::os::raw::c_uint = 114;
pub const R_ASM_MOD_VALUE: ::std::os::raw::c_uint = 118;
pub const R_ASM_MOD_DSTREG: ::std::os::raw::c_uint = 100;
pub const R_ASM_MOD_SRCREG0: ::std::os::raw::c_uint = 48;
pub const R_ASM_MOD_SRCREG1: ::std::os::raw::c_uint = 49;
pub const R_ASM_MOD_SRCREG2: ::std::os::raw::c_uint = 50;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_asm_op_t {
    pub size: ::std::os::raw::c_int,
    pub bitsize: ::std::os::raw::c_int,
    pub payload: ::std::os::raw::c_int,
    pub buf: RStrBuf,
    pub buf_asm: RStrBuf,
    pub buf_inc: *mut RBuffer,
}
#[test]
fn bindgen_test_layout_r_asm_op_t() {
    assert_eq!(
        ::std::mem::size_of::<r_asm_op_t>(),
        152usize,
        concat!("Size of: ", stringify!(r_asm_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_asm_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_asm_op_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_op_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_op_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_op_t>())).bitsize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_op_t),
            "::",
            stringify!(bitsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_op_t>())).payload as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_op_t),
            "::",
            stringify!(payload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_op_t>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_op_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_op_t>())).buf_asm as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_op_t),
            "::",
            stringify!(buf_asm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_op_t>())).buf_inc as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_op_t),
            "::",
            stringify!(buf_inc)
        )
    );
}
pub type RAsmOp = r_asm_op_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_asm_code_t {
    pub len: ::std::os::raw::c_int,
    pub bytes: *mut ::std::os::raw::c_uchar,
    pub assembly: *mut ::std::os::raw::c_char,
    pub equs: *mut RList,
    pub code_offset: ::std::os::raw::c_ulonglong,
    pub data_offset: ::std::os::raw::c_ulonglong,
    pub code_align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_asm_code_t() {
    assert_eq!(
        ::std::mem::size_of::<r_asm_code_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_asm_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_asm_code_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_asm_code_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_code_t>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_code_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_code_t>())).bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_code_t),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_code_t>())).assembly as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_code_t),
            "::",
            stringify!(assembly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_code_t>())).equs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_code_t),
            "::",
            stringify!(equs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_code_t>())).code_offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_code_t),
            "::",
            stringify!(code_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_code_t>())).data_offset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_code_t),
            "::",
            stringify!(data_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_code_t>())).code_align as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_code_t),
            "::",
            stringify!(code_align)
        )
    );
}
pub type RAsmCode = r_asm_code_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RAsmEqu {
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RAsmEqu() {
    assert_eq!(
        ::std::mem::size_of::<RAsmEqu>(),
        16usize,
        concat!("Size of: ", stringify!(RAsmEqu))
    );
    assert_eq!(
        ::std::mem::align_of::<RAsmEqu>(),
        8usize,
        concat!("Alignment of ", stringify!(RAsmEqu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RAsmEqu>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RAsmEqu),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RAsmEqu>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RAsmEqu),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_asm_t {
    pub cpu: *mut ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
    pub big_endian: ::std::os::raw::c_int,
    pub syntax: ::std::os::raw::c_int,
    pub pc: ::std::os::raw::c_ulonglong,
    pub user: *mut ::std::os::raw::c_void,
    pub cur: *mut r_asm_plugin_t,
    pub acur: *mut r_asm_plugin_t,
    pub plugins: *mut RList,
    pub binb: RBinBind,
    pub analb: RAnalBind,
    pub ifilter: *mut RParse,
    pub ofilter: *mut RParse,
    pub pair: *mut Sdb,
    pub syscall: *mut RSyscall,
    pub num: *mut RNum,
    pub features: *mut ::std::os::raw::c_char,
    pub invhex: ::std::os::raw::c_int,
    pub pcalign: ::std::os::raw::c_int,
    pub dataalign: ::std::os::raw::c_int,
    pub bitshift: ::std::os::raw::c_int,
    pub immdisp: bool,
    pub flags: *mut HtPP,
    pub seggrn: ::std::os::raw::c_int,
    pub pseudo: bool,
}
#[test]
fn bindgen_test_layout_r_asm_t() {
    assert_eq!(
        ::std::mem::size_of::<r_asm_t>(),
        256usize,
        concat!("Size of: ", stringify!(r_asm_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_asm_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_asm_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).cpu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).bits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).big_endian as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(big_endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).syntax as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(syntax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).pc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).user as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).cur as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).acur as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(acur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).plugins as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).binb as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(binb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).analb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(analb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).ifilter as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(ifilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).ofilter as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(ofilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).pair as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(pair)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).syscall as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(syscall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).num as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).features as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).invhex as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(invhex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).pcalign as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(pcalign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).dataalign as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(dataalign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).bitshift as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(bitshift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).immdisp as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(immdisp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).flags as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).seggrn as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(seggrn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_t>())).pseudo as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_t),
            "::",
            stringify!(pseudo)
        )
    );
}
pub type RAsm = r_asm_t;
pub type RAsmModifyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut RAsm,
        buf: *mut ::std::os::raw::c_uchar,
        field: ::std::os::raw::c_int,
        val: ::std::os::raw::c_ulonglong,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_asm_plugin_t {
    pub name: *const ::std::os::raw::c_char,
    pub arch: *const ::std::os::raw::c_char,
    pub author: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub cpus: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub license: *const ::std::os::raw::c_char,
    pub user: *mut ::std::os::raw::c_void,
    pub bits: ::std::os::raw::c_int,
    pub endian: ::std::os::raw::c_int,
    pub init:
        ::std::option::Option<unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> bool>,
    pub fini:
        ::std::option::Option<unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> bool>,
    pub disassemble: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut RAsm,
            op: *mut RAsmOp,
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub assemble: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut RAsm,
            op: *mut RAsmOp,
            buf: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub modify: RAsmModifyCallback,
    pub mnemonics: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut RAsm,
            id: ::std::os::raw::c_int,
            json: bool,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub features: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_asm_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_asm_plugin_t>(),
        128usize,
        concat!("Size of: ", stringify!(r_asm_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_asm_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_asm_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).arch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).author as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).version as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).cpus as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(cpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).desc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).license as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).user as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).bits as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).endian as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).init as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).fini as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).disassemble as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(disassemble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).assemble as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(assemble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).modify as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(modify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).mnemonics as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(mnemonics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_asm_plugin_t>())).features as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_asm_plugin_t),
            "::",
            stringify!(features)
        )
    );
}
pub type RAsmPlugin = r_asm_plugin_t;
extern "C" {
    pub fn r_asm_new() -> *mut RAsm;
}
extern "C" {
    pub fn r_asm_free(a: *mut RAsm);
}
extern "C" {
    pub fn r_asm_modify(
        a: *mut RAsm,
        buf: *mut ::std::os::raw::c_uchar,
        field: ::std::os::raw::c_int,
        val: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_asm_mnemonics(
        a: *mut RAsm,
        id: ::std::os::raw::c_int,
        json: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_asm_mnemonics_byname(
        a: *mut RAsm,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_set_user_ptr(a: *mut RAsm, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_asm_add(a: *mut RAsm, foo: *mut RAsmPlugin) -> bool;
}
extern "C" {
    pub fn r_asm_setup(
        a: *mut RAsm,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
        big_endian: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_asm_is_valid(a: *mut RAsm, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_asm_use(a: *mut RAsm, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_asm_use_assembler(a: *mut RAsm, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_asm_set_arch(
        a: *mut RAsm,
        name: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_asm_set_bits(a: *mut RAsm, bits: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_set_cpu(a: *mut RAsm, cpu: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_asm_set_big_endian(a: *mut RAsm, big_endian: bool) -> bool;
}
extern "C" {
    pub fn r_asm_set_syntax(a: *mut RAsm, syntax: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_asm_syntax_from_string(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_set_pc(a: *mut RAsm, pc: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_disassemble(
        a: *mut RAsm,
        op: *mut RAsmOp,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_assemble(
        a: *mut RAsm,
        op: *mut RAsmOp,
        buf: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_mdisassemble(
        a: *mut RAsm,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut RAsmCode;
}
extern "C" {
    pub fn r_asm_mdisassemble_hexstr(
        a: *mut RAsm,
        p: *mut RParse,
        hexstr: *const ::std::os::raw::c_char,
    ) -> *mut RAsmCode;
}
extern "C" {
    pub fn r_asm_massemble(a: *mut RAsm, buf: *const ::std::os::raw::c_char) -> *mut RAsmCode;
}
extern "C" {
    pub fn r_asm_rasm_assemble(
        a: *mut RAsm,
        buf: *const ::std::os::raw::c_char,
        use_spp: bool,
    ) -> *mut RAsmCode;
}
extern "C" {
    pub fn r_asm_to_string(
        a: *mut RAsm,
        addr: ::std::os::raw::c_ulonglong,
        b: *const ::std::os::raw::c_uchar,
        l: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_asm_from_string(
        a: *mut RAsm,
        addr: ::std::os::raw::c_ulonglong,
        b: *const ::std::os::raw::c_char,
        l: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_asm_sub_names_input(
        a: *mut RAsm,
        f: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_sub_names_output(
        a: *mut RAsm,
        f: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_describe(
        a: *mut RAsm,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_asm_get_plugins(a: *mut RAsm) -> *mut RList;
}
extern "C" {
    pub fn r_asm_list_directives();
}
extern "C" {
    pub fn r_asm_get_gperf(k: *const ::std::os::raw::c_char) -> *mut SdbGperf;
}
extern "C" {
    pub fn r_asm_code_new() -> *mut RAsmCode;
}
extern "C" {
    pub fn r_asm_code_free(acode: *mut RAsmCode) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn r_asm_equ_item_free(equ: *mut RAsmEqu);
}
extern "C" {
    pub fn r_asm_code_set_equ(
        code: *mut RAsmCode,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_asm_code_equ_replace(
        code: *mut RAsmCode,
        str_: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_asm_code_get_hex(acode: *mut RAsmCode) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_asm_op_new() -> *mut RAsmOp;
}
extern "C" {
    pub fn r_asm_op_init(op: *mut RAsmOp);
}
extern "C" {
    pub fn r_asm_op_free(op: *mut RAsmOp);
}
extern "C" {
    pub fn r_asm_op_fini(op: *mut RAsmOp);
}
extern "C" {
    pub fn r_asm_op_get_hex(op: *mut RAsmOp) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_asm_op_get_asm(op: *mut RAsmOp) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_asm_op_get_size(op: *mut RAsmOp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_op_set_asm(op: *mut RAsmOp, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_asm_op_set_hex(
        op: *mut RAsmOp,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_op_set_hexbuf(
        op: *mut RAsmOp,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_asm_op_set_buf(
        op: *mut RAsmOp,
        str_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_asm_op_get_buf(op: *mut RAsmOp) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut r_asm_plugin_6502: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_6502_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_8051: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_amd29k: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_arc: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_arm_as: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_arm_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_arm_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_arm_winedbg: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_avr: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_bf: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_null: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_chip8: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_cr16: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_cris_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_dalvik: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_dcpu16: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_ebc: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_gb: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_h8300: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_hexagon: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_hexagon_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_hppa_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_i4004: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_i8080: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_java: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_lanai_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_lh5801: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_lm32: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_m68k_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_m680x_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_malbolge: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_mcore: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_mcs96: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_mips_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_mips_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_msp430: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_nios2: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_or1k: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_pic: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_ppc_as: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_ppc_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_ppc_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_propeller: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_riscv: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_riscv_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_rsp: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_sh: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_snes: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_sparc_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_sparc_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_s390_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_s390_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_tms320: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_tms320c64x: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_tricore: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_v810: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_v850: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_v850_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_m68k_gnu: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_vax: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_wasm: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_ws: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_x86_as: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_x86_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_x86_nasm: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_x86_nz: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_xap: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_xcore_cs: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_xtensa: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_z80: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_arm_v35: RAsmPlugin;
}
extern "C" {
    pub static mut r_asm_plugin_pyc: RAsmPlugin;
}
extern "C" {
    pub fn r_egg_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_egg_plugin_t {
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub build: ::std::option::Option<
        unsafe extern "C" fn(egg: *mut ::std::os::raw::c_void) -> *mut RBuffer,
    >,
}
#[test]
fn bindgen_test_layout_r_egg_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_egg_plugin_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_egg_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_egg_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_egg_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_plugin_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_plugin_t>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_plugin_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_plugin_t>())).build as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_plugin_t),
            "::",
            stringify!(build)
        )
    );
}
pub type REggPlugin = r_egg_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_egg_lang_t {
    pub pushargs: ::std::os::raw::c_int,
    pub nalias: ::std::os::raw::c_int,
    pub nsyscalls: ::std::os::raw::c_int,
    pub conditionstr: *mut ::std::os::raw::c_char,
    pub syscallbody: *mut ::std::os::raw::c_char,
    pub includefile: *mut ::std::os::raw::c_char,
    pub setenviron: *mut ::std::os::raw::c_char,
    pub mathline: *mut ::std::os::raw::c_char,
    pub commentmode: ::std::os::raw::c_int,
    pub varsize: ::std::os::raw::c_int,
    pub varxs: ::std::os::raw::c_int,
    pub lastctxdelta: ::std::os::raw::c_int,
    pub nargs: ::std::os::raw::c_int,
    pub docall: ::std::os::raw::c_int,
    pub nfunctions: ::std::os::raw::c_int,
    pub nbrackets: ::std::os::raw::c_int,
    pub slurpin: ::std::os::raw::c_int,
    pub slurp: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub elem: [::std::os::raw::c_char; 1024usize],
    pub attsyntax: ::std::os::raw::c_int,
    pub elem_n: ::std::os::raw::c_int,
    pub callname: *mut ::std::os::raw::c_char,
    pub endframe: *mut ::std::os::raw::c_char,
    pub ctxpush: [*mut ::std::os::raw::c_char; 32usize],
    pub file: *mut ::std::os::raw::c_char,
    pub dstvar: *mut ::std::os::raw::c_char,
    pub dstval: *mut ::std::os::raw::c_char,
    pub includedir: *mut ::std::os::raw::c_char,
    pub ifelse_table: [[*mut ::std::os::raw::c_char; 32usize]; 32usize],
    pub ndstval: ::std::os::raw::c_int,
    pub skipline: ::std::os::raw::c_int,
    pub quoteline: ::std::os::raw::c_int,
    pub quotelinevar: ::std::os::raw::c_int,
    pub stackframe: ::std::os::raw::c_int,
    pub stackfixed: ::std::os::raw::c_int,
    pub oc: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub inlinectr: ::std::os::raw::c_int,
    pub inlines: [r_egg_lang_t__bindgen_ty_1; 256usize],
    pub ninlines: ::std::os::raw::c_int,
    pub syscalls: [r_egg_lang_t__bindgen_ty_2; 256usize],
    pub aliases: [r_egg_lang_t__bindgen_ty_3; 256usize],
    pub nested: [*mut ::std::os::raw::c_char; 32usize],
    pub nested_callname: [*mut ::std::os::raw::c_char; 32usize],
    pub nestedi: [::std::os::raw::c_int; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_egg_lang_t__bindgen_ty_1 {
    pub name: *mut ::std::os::raw::c_char,
    pub body: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_egg_lang_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_egg_lang_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(r_egg_lang_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_egg_lang_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(r_egg_lang_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t__bindgen_ty_1>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t__bindgen_ty_1>())).body as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t__bindgen_ty_1),
            "::",
            stringify!(body)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_egg_lang_t__bindgen_ty_2 {
    pub name: *mut ::std::os::raw::c_char,
    pub arg: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_egg_lang_t__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<r_egg_lang_t__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(r_egg_lang_t__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<r_egg_lang_t__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(r_egg_lang_t__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t__bindgen_ty_2>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t__bindgen_ty_2),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t__bindgen_ty_2>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t__bindgen_ty_2),
            "::",
            stringify!(arg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_egg_lang_t__bindgen_ty_3 {
    pub name: *mut ::std::os::raw::c_char,
    pub content: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_egg_lang_t__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<r_egg_lang_t__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(r_egg_lang_t__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<r_egg_lang_t__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(r_egg_lang_t__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t__bindgen_ty_3>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t__bindgen_ty_3),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_egg_lang_t__bindgen_ty_3>())).content as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t__bindgen_ty_3),
            "::",
            stringify!(content)
        )
    );
}
#[test]
fn bindgen_test_layout_r_egg_lang_t() {
    assert_eq!(
        ::std::mem::size_of::<r_egg_lang_t>(),
        22608usize,
        concat!("Size of: ", stringify!(r_egg_lang_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_egg_lang_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_egg_lang_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).pushargs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(pushargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).nalias as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(nalias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).nsyscalls as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(nsyscalls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).conditionstr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(conditionstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).syscallbody as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(syscallbody)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).includefile as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(includefile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).setenviron as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(setenviron)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).mathline as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(mathline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).commentmode as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(commentmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).varsize as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(varsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).varxs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(varxs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).lastctxdelta as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(lastctxdelta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).nargs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).docall as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(docall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).nfunctions as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(nfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).nbrackets as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(nbrackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).slurpin as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(slurpin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).slurp as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(slurp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).line as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).elem as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(elem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).attsyntax as *const _ as usize },
        1124usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(attsyntax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).elem_n as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(elem_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).callname as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(callname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).endframe as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(endframe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).ctxpush as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(ctxpush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).file as *const _ as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).dstvar as *const _ as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(dstvar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).dstval as *const _ as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(dstval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).includedir as *const _ as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(includedir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).ifelse_table as *const _ as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(ifelse_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).ndstval as *const _ as usize },
        9632usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(ndstval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).skipline as *const _ as usize },
        9636usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(skipline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).quoteline as *const _ as usize },
        9640usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(quoteline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).quotelinevar as *const _ as usize },
        9644usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(quotelinevar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).stackframe as *const _ as usize },
        9648usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(stackframe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).stackfixed as *const _ as usize },
        9652usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(stackfixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).oc as *const _ as usize },
        9656usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(oc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).mode as *const _ as usize },
        9660usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).inlinectr as *const _ as usize },
        9664usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(inlinectr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).inlines as *const _ as usize },
        9672usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(inlines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).ninlines as *const _ as usize },
        13768usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(ninlines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).syscalls as *const _ as usize },
        13776usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(syscalls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).aliases as *const _ as usize },
        17872usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).nested as *const _ as usize },
        21968usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(nested)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).nested_callname as *const _ as usize },
        22224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(nested_callname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_lang_t>())).nestedi as *const _ as usize },
        22480usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_lang_t),
            "::",
            stringify!(nestedi)
        )
    );
}
pub type REggLang = r_egg_lang_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_egg_t {
    pub src: *mut RBuffer,
    pub buf: *mut RBuffer,
    pub bin: *mut RBuffer,
    pub list: *mut RList,
    pub rasm: *mut RAsm,
    pub syscall: *mut RSyscall,
    pub lang: REggLang,
    pub db: *mut Sdb,
    pub plugins: *mut RList,
    pub patches: *mut RList,
    pub remit: *mut r_egg_emit_t,
    pub arch: ::std::os::raw::c_int,
    pub endian: ::std::os::raw::c_int,
    pub bits: ::std::os::raw::c_int,
    pub os: ::std::os::raw::c_uint,
    pub context: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_egg_t() {
    assert_eq!(
        ::std::mem::size_of::<r_egg_t>(),
        22712usize,
        concat!("Size of: ", stringify!(r_egg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_egg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_egg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).src as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).bin as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(bin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).rasm as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(rasm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).syscall as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(syscall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).lang as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).db as *const _ as usize },
        22656usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).plugins as *const _ as usize },
        22664usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).patches as *const _ as usize },
        22672usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(patches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).remit as *const _ as usize },
        22680usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(remit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).arch as *const _ as usize },
        22688usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).endian as *const _ as usize },
        22692usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).bits as *const _ as usize },
        22696usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).os as *const _ as usize },
        22700usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_t>())).context as *const _ as usize },
        22704usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_t),
            "::",
            stringify!(context)
        )
    );
}
pub type REgg = r_egg_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_egg_emit_t {
    pub arch: *const ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_int,
    pub retvar: *const ::std::os::raw::c_char,
    pub regs: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            idx: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub init: ::std::option::Option<unsafe extern "C" fn(egg: *mut REgg)>,
    pub call: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            addr: *const ::std::os::raw::c_char,
            ptr: ::std::os::raw::c_int,
        ),
    >,
    pub jmp: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            addr: *const ::std::os::raw::c_char,
            ptr: ::std::os::raw::c_int,
        ),
    >,
    pub frame:
        ::std::option::Option<unsafe extern "C" fn(egg: *mut REgg, sz: ::std::os::raw::c_int)>,
    pub syscall: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            num: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub trap: ::std::option::Option<unsafe extern "C" fn(egg: *mut REgg)>,
    pub frame_end: ::std::option::Option<
        unsafe extern "C" fn(egg: *mut REgg, sz: ::std::os::raw::c_int, ctx: ::std::os::raw::c_int),
    >,
    pub comment: ::std::option::Option<
        unsafe extern "C" fn(egg: *mut REgg, fmt: *const ::std::os::raw::c_char, ...),
    >,
    pub push_arg: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            xs: ::std::os::raw::c_int,
            num: ::std::os::raw::c_int,
            str_: *const ::std::os::raw::c_char,
        ),
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            dstvar: *const ::std::os::raw::c_char,
            str_: *const ::std::os::raw::c_char,
            j: ::std::os::raw::c_int,
        ),
    >,
    pub equ: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            key: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
    >,
    pub get_result: ::std::option::Option<
        unsafe extern "C" fn(egg: *mut REgg, ocn: *const ::std::os::raw::c_char),
    >,
    pub restore_stack:
        ::std::option::Option<unsafe extern "C" fn(egg: *mut REgg, size: ::std::os::raw::c_int)>,
    pub syscall_args:
        ::std::option::Option<unsafe extern "C" fn(egg: *mut REgg, nargs: ::std::os::raw::c_int)>,
    pub get_var: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            type_: ::std::os::raw::c_int,
            out: *mut ::std::os::raw::c_char,
            idx: ::std::os::raw::c_int,
        ),
    >,
    pub get_ar: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            out: *mut ::std::os::raw::c_char,
            idx: ::std::os::raw::c_int,
        ),
    >,
    pub while_end: ::std::option::Option<
        unsafe extern "C" fn(egg: *mut REgg, label: *const ::std::os::raw::c_char),
    >,
    pub load: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            str_: *const ::std::os::raw::c_char,
            sz: ::std::os::raw::c_int,
        ),
    >,
    pub load_ptr: ::std::option::Option<
        unsafe extern "C" fn(egg: *mut REgg, str_: *const ::std::os::raw::c_char),
    >,
    pub branch: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            b: *mut ::std::os::raw::c_char,
            g: *mut ::std::os::raw::c_char,
            e: *mut ::std::os::raw::c_char,
            n: *mut ::std::os::raw::c_char,
            sz: ::std::os::raw::c_int,
            dst: *const ::std::os::raw::c_char,
        ),
    >,
    pub mathop: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            ch: ::std::os::raw::c_int,
            sz: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
            eq: *const ::std::os::raw::c_char,
            p: *const ::std::os::raw::c_char,
        ),
    >,
    pub get_while_end: ::std::option::Option<
        unsafe extern "C" fn(
            egg: *mut REgg,
            out: *mut ::std::os::raw::c_char,
            ctxpush: *const ::std::os::raw::c_char,
            label: *const ::std::os::raw::c_char,
        ),
    >,
}
#[test]
fn bindgen_test_layout_r_egg_emit_t() {
    assert_eq!(
        ::std::mem::size_of::<r_egg_emit_t>(),
        208usize,
        concat!("Size of: ", stringify!(r_egg_emit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_egg_emit_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_egg_emit_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).arch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).retvar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(retvar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).regs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).init as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).call as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).jmp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).frame as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).syscall as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(syscall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).trap as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(trap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).frame_end as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(frame_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).comment as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).push_arg as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(push_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).set_string as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).equ as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(equ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).get_result as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(get_result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).restore_stack as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(restore_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).syscall_args as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(syscall_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).get_var as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(get_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).get_ar as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(get_ar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).while_end as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(while_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).load as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).load_ptr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(load_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).branch as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(branch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).mathop as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(mathop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_egg_emit_t>())).get_while_end as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_egg_emit_t),
            "::",
            stringify!(get_while_end)
        )
    );
}
pub type REggEmit = r_egg_emit_t;
extern "C" {
    pub fn r_egg_new() -> *mut REgg;
}
extern "C" {
    pub fn r_egg_lang_init(egg: *mut REgg);
}
extern "C" {
    pub fn r_egg_lang_free(egg: *mut REgg);
}
extern "C" {
    pub fn r_egg_to_string(egg: *mut REgg) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_egg_free(egg: *mut REgg);
}
extern "C" {
    pub fn r_egg_add(a: *mut REgg, foo: *mut REggPlugin) -> bool;
}
extern "C" {
    pub fn r_egg_reset(egg: *mut REgg);
}
extern "C" {
    pub fn r_egg_setup(
        egg: *mut REgg,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
        endian: ::std::os::raw::c_int,
        os: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_egg_include(
        egg: *mut REgg,
        file: *const ::std::os::raw::c_char,
        format: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_egg_include_str(egg: *mut REgg, arg: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_egg_load(
        egg: *mut REgg,
        code: *const ::std::os::raw::c_char,
        format: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_egg_syscall(egg: *mut REgg, arg: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn r_egg_alloc(egg: *mut REgg, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_egg_label(egg: *mut REgg, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_egg_raw(
        egg: *mut REgg,
        b: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_egg_encode(egg: *mut REgg, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_egg_shellcode(egg: *mut REgg, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_egg_option_set(
        egg: *mut REgg,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_egg_option_get(
        egg: *mut REgg,
        k: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_egg_if(
        egg: *mut REgg,
        reg: *const ::std::os::raw::c_char,
        cmp: ::std::os::raw::c_char,
        v: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_egg_printf(egg: *mut REgg, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn r_egg_compile(egg: *mut REgg) -> bool;
}
extern "C" {
    pub fn r_egg_padding(egg: *mut REgg, pad: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_egg_assemble(egg: *mut REgg) -> bool;
}
extern "C" {
    pub fn r_egg_assemble_asm(egg: *mut REgg, asm_list: *mut *mut ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_egg_pattern(egg: *mut REgg, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_egg_get_bin(egg: *mut REgg) -> *mut RBuffer;
}
extern "C" {
    pub fn r_egg_get_source(egg: *mut REgg) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_egg_get_assembly(egg: *mut REgg) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_egg_append(egg: *mut REgg, src: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_egg_run(egg: *mut REgg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_egg_run_rop(egg: *mut REgg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_egg_patch(
        egg: *mut REgg,
        off: ::std::os::raw::c_int,
        b: *const ::std::os::raw::c_uchar,
        l: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_egg_finalize(egg: *mut REgg);
}
extern "C" {
    pub fn r_egg_Cfile_parser(
        file: *const ::std::os::raw::c_char,
        arch: *const ::std::os::raw::c_char,
        os: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_egg_mkvar(
        egg: *mut REgg,
        out: *mut ::std::os::raw::c_char,
        _str: *const ::std::os::raw::c_char,
        delta: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_egg_lang_parsechar(egg: *mut REgg, c: ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_egg_lang_include_path(egg: *mut REgg, path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_egg_lang_include_init(egg: *mut REgg);
}
extern "C" {
    pub static mut r_egg_plugin_xor: REggPlugin;
}
extern "C" {
    pub static mut r_egg_plugin_shya: REggPlugin;
}
extern "C" {
    pub static mut r_egg_plugin_exec: REggPlugin;
}
extern "C" {
    pub fn r_lang_version() -> *const ::std::os::raw::c_char;
}
pub type RCoreCmdStrCallback = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        s: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RCoreCmdfCallback = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut ::std::os::raw::c_void,
        s: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_lang_t {
    pub cur: *mut r_lang_plugin_t,
    pub user: *mut ::std::os::raw::c_void,
    pub defs: *mut RList,
    pub langs: *mut RList,
    pub cb_printf: PrintfCallback,
    pub cmd_str: RCoreCmdStrCallback,
    pub cmdf: RCoreCmdfCallback,
}
#[test]
fn bindgen_test_layout_r_lang_t() {
    assert_eq!(
        ::std::mem::size_of::<r_lang_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_lang_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_lang_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_lang_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_t>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_t>())).user as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_t>())).defs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_t),
            "::",
            stringify!(defs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_t>())).langs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_t),
            "::",
            stringify!(langs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_t>())).cb_printf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_t>())).cmd_str as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_t),
            "::",
            stringify!(cmd_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_t>())).cmdf as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_t),
            "::",
            stringify!(cmdf)
        )
    );
}
pub type RLang = r_lang_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_lang_plugin_t {
    pub name: *const ::std::os::raw::c_char,
    pub alias: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub example: *const ::std::os::raw::c_char,
    pub license: *const ::std::os::raw::c_char,
    pub help: *mut *const ::std::os::raw::c_char,
    pub ext: *const ::std::os::raw::c_char,
    pub init: ::std::option::Option<unsafe extern "C" fn(user: *mut RLang) -> bool>,
    pub setup: ::std::option::Option<unsafe extern "C" fn(user: *mut RLang) -> bool>,
    pub fini: ::std::option::Option<unsafe extern "C" fn(user: *mut RLang) -> bool>,
    pub prompt: ::std::option::Option<unsafe extern "C" fn(user: *mut RLang) -> bool>,
    pub run: ::std::option::Option<
        unsafe extern "C" fn(
            user: *mut RLang,
            code: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub run_file: ::std::option::Option<
        unsafe extern "C" fn(user: *mut RLang, file: *const ::std::os::raw::c_char) -> bool,
    >,
    pub set_argv: ::std::option::Option<
        unsafe extern "C" fn(
            user: *mut RLang,
            argc: ::std::os::raw::c_int,
            argv: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_r_lang_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_lang_plugin_t>(),
        112usize,
        concat!("Size of: ", stringify!(r_lang_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_lang_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_lang_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).alias as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).desc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).example as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(example)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).license as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).help as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(help)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).ext as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).init as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).setup as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).fini as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).prompt as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(prompt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).run as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).run_file as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(run_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_plugin_t>())).set_argv as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_plugin_t),
            "::",
            stringify!(set_argv)
        )
    );
}
pub type RLangPlugin = r_lang_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_lang_def_t {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_lang_def_t() {
    assert_eq!(
        ::std::mem::size_of::<r_lang_def_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_lang_def_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_lang_def_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_lang_def_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_def_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_def_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_def_t>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_def_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_lang_def_t>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_lang_def_t),
            "::",
            stringify!(value)
        )
    );
}
pub type RLangDef = r_lang_def_t;
extern "C" {
    pub fn r_lang_new() -> *mut RLang;
}
extern "C" {
    pub fn r_lang_free(lang: *mut RLang);
}
extern "C" {
    pub fn r_lang_setup(lang: *mut RLang) -> bool;
}
extern "C" {
    pub fn r_lang_add(lang: *mut RLang, foo: *mut RLangPlugin) -> bool;
}
extern "C" {
    pub fn r_lang_list(lang: *mut RLang) -> bool;
}
extern "C" {
    pub fn r_lang_use(lang: *mut RLang, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_lang_run(
        lang: *mut RLang,
        code: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_lang_run_string(lang: *mut RLang, code: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_lang_set_user_ptr(lang: *mut RLang, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_lang_set_argv(
        lang: *mut RLang,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_lang_run_file(lang: *mut RLang, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_lang_prompt(lang: *mut RLang) -> bool;
}
extern "C" {
    pub fn r_lang_plugin_free(p: *mut RLangPlugin);
}
extern "C" {
    pub fn r_lang_get_by_name(
        lang: *mut RLang,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RLangPlugin;
}
extern "C" {
    pub fn r_lang_get_by_extension(
        lang: *mut RLang,
        ext: *const ::std::os::raw::c_char,
    ) -> *mut RLangPlugin;
}
extern "C" {
    pub fn r_lang_define(
        lang: *mut RLang,
        type_: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_lang_undef(lang: *mut RLang, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_lang_def_free(def: *mut RLangDef);
}
pub type RCore = r_core_t;
pub const r_cmd_status_t_R_CMD_STATUS_OK: r_cmd_status_t = 0;
pub const r_cmd_status_t_R_CMD_STATUS_WRONG_ARGS: r_cmd_status_t = 1;
pub const r_cmd_status_t_R_CMD_STATUS_ERROR: r_cmd_status_t = 2;
pub const r_cmd_status_t_R_CMD_STATUS_INVALID: r_cmd_status_t = 3;
pub const r_cmd_status_t_R_CMD_STATUS_EXIT: r_cmd_status_t = 4;
pub type r_cmd_status_t = ::std::os::raw::c_uint;
pub use self::r_cmd_status_t as RCmdStatus;
pub type RCmdCb = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        input: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type RCmdArgvCb = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut RCore,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> RCmdStatus,
>;
pub type RCmdNullCb = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_parsed_args_t {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub has_space_after_cmd: bool,
}
#[test]
fn bindgen_test_layout_r_cmd_parsed_args_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_parsed_args_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_cmd_parsed_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_parsed_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_parsed_args_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_parsed_args_t>())).argc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_parsed_args_t),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_parsed_args_t>())).argv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_parsed_args_t),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cmd_parsed_args_t>())).has_space_after_cmd as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_parsed_args_t),
            "::",
            stringify!(has_space_after_cmd)
        )
    );
}
pub type RCmdParsedArgs = r_cmd_parsed_args_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_macro_label_t {
    pub name: [::std::os::raw::c_char; 80usize],
    pub ptr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_cmd_macro_label_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_macro_label_t>(),
        88usize,
        concat!("Size of: ", stringify!(r_cmd_macro_label_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_macro_label_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_macro_label_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_label_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_label_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_label_t>())).ptr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_label_t),
            "::",
            stringify!(ptr)
        )
    );
}
pub type RCmdMacroLabel = r_cmd_macro_label_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_macro_item_t {
    pub name: *mut ::std::os::raw::c_char,
    pub args: *mut ::std::os::raw::c_char,
    pub code: *mut ::std::os::raw::c_char,
    pub codelen: ::std::os::raw::c_int,
    pub nargs: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_cmd_macro_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_macro_item_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_cmd_macro_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_macro_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_macro_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_item_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_item_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_item_t>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_item_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_item_t>())).code as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_item_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_item_t>())).codelen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_item_t),
            "::",
            stringify!(codelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_item_t>())).nargs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_item_t),
            "::",
            stringify!(nargs)
        )
    );
}
pub type RCmdMacroItem = r_cmd_macro_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_macro_t {
    pub counter: ::std::os::raw::c_int,
    pub brk_value: *mut ::std::os::raw::c_ulonglong,
    pub _brk_value: ::std::os::raw::c_ulonglong,
    pub brk: ::std::os::raw::c_int,
    pub cmd: RCoreCmd,
    pub cb_printf: PrintfCallback,
    pub user: *mut ::std::os::raw::c_void,
    pub num: *mut RNum,
    pub labels_n: ::std::os::raw::c_int,
    pub labels: [RCmdMacroLabel; 20usize],
    pub macros: *mut RList,
}
#[test]
fn bindgen_test_layout_r_cmd_macro_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_macro_t>(),
        1840usize,
        concat!("Size of: ", stringify!(r_cmd_macro_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_macro_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_macro_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>())).counter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>())).brk_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(brk_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>()))._brk_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(_brk_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>())).brk as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(brk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>())).cmd as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>())).cb_printf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>())).user as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>())).num as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>())).labels_n as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(labels_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>())).labels as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(labels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_macro_t>())).macros as *const _ as usize },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_macro_t),
            "::",
            stringify!(macros)
        )
    );
}
pub type RCmdMacro = r_cmd_macro_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_item_t {
    pub cmd: [::std::os::raw::c_char; 64usize],
    pub callback: RCmdCb,
}
#[test]
fn bindgen_test_layout_r_cmd_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_item_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_cmd_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_item_t>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_item_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_item_t>())).callback as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_item_t),
            "::",
            stringify!(callback)
        )
    );
}
pub type RCmdItem = r_cmd_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_alias_t {
    pub count: ::std::os::raw::c_int,
    pub keys: *mut *mut ::std::os::raw::c_char,
    pub values: *mut *mut ::std::os::raw::c_char,
    pub remote: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_cmd_alias_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_alias_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_cmd_alias_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_alias_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_alias_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_alias_t>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_alias_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_alias_t>())).keys as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_alias_t),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_alias_t>())).values as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_alias_t),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_alias_t>())).remote as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_alias_t),
            "::",
            stringify!(remote)
        )
    );
}
pub type RCmdAlias = r_cmd_alias_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_desc_example_t {
    pub example: *const ::std::os::raw::c_char,
    pub comment: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_cmd_desc_example_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_desc_example_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_cmd_desc_example_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_desc_example_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_desc_example_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_example_t>())).example as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_example_t),
            "::",
            stringify!(example)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_example_t>())).comment as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_example_t),
            "::",
            stringify!(comment)
        )
    );
}
pub type RCmdDescExample = r_cmd_desc_example_t;
#[doc = " Define how the command looks like in the help."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_desc_help_t {
    #[doc = " Short-sentence explaining what the command does."]
    #[doc = " This is shown, for example, when the list of sub-commands is printed"]
    #[doc = " and each sub-command has a very short description on the right,"]
    #[doc = " explaining what it does."]
    pub summary: *const ::std::os::raw::c_char,
    #[doc = " Long description of what the command does. It can be as long as you"]
    #[doc = " want and it should explain well how the command behaves."]
    #[doc = " This is shown, for example, when `??` is appended on command or `?`"]
    #[doc = " is appended and the command has no children to show. In that case,"]
    #[doc = " the short summary is extended with this longer description."]
    #[doc = ""]
    #[doc = " Optional."]
    pub description: *const ::std::os::raw::c_char,
    #[doc = " String used to identify the arguments. This usually comes together"]
    #[doc = " with the summary."]
    #[doc = " TODO: explain how to differentiate between required and optional arguments"]
    pub args_str: *const ::std::os::raw::c_char,
    #[doc = " String that overrides the name+args_str usually used to describe the"]
    #[doc = " command."]
    #[doc = ""]
    #[doc = " Optional."]
    pub usage: *const ::std::os::raw::c_char,
    #[doc = " String to use as sub-commands suggestions instead of the"]
    #[doc = " auto-generated one (e.g. [abcd] or [?] that you can see near command"]
    #[doc = " names when doing `w?`). If not provided, the options will be"]
    #[doc = " auto-generated."]
    #[doc = ""]
    #[doc = " Optional."]
    pub options: *const ::std::os::raw::c_char,
    #[doc = " List of examples used to better explain how to use the command. This"]
    #[doc = " is shown together with the long description."]
    #[doc = ""]
    #[doc = " Optional."]
    pub examples: *const RCmdDescExample,
}
#[test]
fn bindgen_test_layout_r_cmd_desc_help_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_desc_help_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_cmd_desc_help_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_desc_help_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_desc_help_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_help_t>())).summary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_help_t),
            "::",
            stringify!(summary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_help_t>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_help_t),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_help_t>())).args_str as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_help_t),
            "::",
            stringify!(args_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_help_t>())).usage as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_help_t),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_help_t>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_help_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_help_t>())).examples as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_help_t),
            "::",
            stringify!(examples)
        )
    );
}
#[doc = " Define how the command looks like in the help."]
pub type RCmdDescHelp = r_cmd_desc_help_t;
pub const RCmdDescType_R_CMD_DESC_TYPE_OLDINPUT: RCmdDescType = 0;
pub const RCmdDescType_R_CMD_DESC_TYPE_ARGV: RCmdDescType = 1;
pub const RCmdDescType_R_CMD_DESC_TYPE_INNER: RCmdDescType = 2;
pub const RCmdDescType_R_CMD_DESC_TYPE_GROUP: RCmdDescType = 3;
pub type RCmdDescType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct r_cmd_desc_t {
    pub type_: RCmdDescType,
    pub name: *mut ::std::os::raw::c_char,
    pub parent: *mut r_cmd_desc_t,
    pub n_children: ::std::os::raw::c_int,
    pub children: RPVector,
    pub help: *const RCmdDescHelp,
    pub d: r_cmd_desc_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union r_cmd_desc_t__bindgen_ty_1 {
    pub oldinput_data: r_cmd_desc_t__bindgen_ty_1__bindgen_ty_1,
    pub argv_data: r_cmd_desc_t__bindgen_ty_1__bindgen_ty_2,
    pub group_data: r_cmd_desc_t__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_desc_t__bindgen_ty_1__bindgen_ty_1 {
    pub cb: RCmdCb,
}
#[test]
fn bindgen_test_layout_r_cmd_desc_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_desc_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(r_cmd_desc_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_desc_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_cmd_desc_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cmd_desc_t__bindgen_ty_1__bindgen_ty_1>())).cb as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_desc_t__bindgen_ty_1__bindgen_ty_2 {
    pub cb: RCmdArgvCb,
}
#[test]
fn bindgen_test_layout_r_cmd_desc_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_desc_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(r_cmd_desc_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_desc_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_cmd_desc_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cmd_desc_t__bindgen_ty_1__bindgen_ty_2>())).cb as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(cb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_desc_t__bindgen_ty_1__bindgen_ty_3 {
    pub exec_cd: *mut r_cmd_desc_t,
}
#[test]
fn bindgen_test_layout_r_cmd_desc_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_desc_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(r_cmd_desc_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_desc_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(r_cmd_desc_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cmd_desc_t__bindgen_ty_1__bindgen_ty_3>())).exec_cd as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(exec_cd)
        )
    );
}
#[test]
fn bindgen_test_layout_r_cmd_desc_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_desc_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(r_cmd_desc_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_desc_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_desc_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cmd_desc_t__bindgen_ty_1>())).oldinput_data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t__bindgen_ty_1),
            "::",
            stringify!(oldinput_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cmd_desc_t__bindgen_ty_1>())).argv_data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t__bindgen_ty_1),
            "::",
            stringify!(argv_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_cmd_desc_t__bindgen_ty_1>())).group_data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t__bindgen_ty_1),
            "::",
            stringify!(group_data)
        )
    );
}
#[test]
fn bindgen_test_layout_r_cmd_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_desc_t>(),
        96usize,
        concat!("Size of: ", stringify!(r_cmd_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_desc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_t>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_t>())).parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_t>())).n_children as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t),
            "::",
            stringify!(n_children)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_t>())).children as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t),
            "::",
            stringify!(children)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_t>())).help as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t),
            "::",
            stringify!(help)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_desc_t>())).d as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_desc_t),
            "::",
            stringify!(d)
        )
    );
}
pub type RCmdDesc = r_cmd_desc_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_t {
    pub data: *mut ::std::os::raw::c_void,
    pub nullcallback: RCmdNullCb,
    pub cmds: [*mut RCmdItem; 255usize],
    pub macro_: RCmdMacro,
    pub lcmds: *mut RList,
    pub plist: *mut RList,
    pub aliases: RCmdAlias,
    pub language: *mut ::std::os::raw::c_void,
    pub ts_symbols_ht: *mut HtUP,
    pub root_cmd_desc: *mut RCmdDesc,
    pub ht_cmds: *mut HtPP,
}
#[test]
fn bindgen_test_layout_r_cmd_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_t>(),
        3976usize,
        concat!("Size of: ", stringify!(r_cmd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).nullcallback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(nullcallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).cmds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(cmds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).macro_ as *const _ as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(macro_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).lcmds as *const _ as usize },
        3896usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(lcmds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).plist as *const _ as usize },
        3904usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(plist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).aliases as *const _ as usize },
        3912usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).language as *const _ as usize },
        3944usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(language)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).ts_symbols_ht as *const _ as usize },
        3952usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(ts_symbols_ht)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).root_cmd_desc as *const _ as usize },
        3960usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(root_cmd_desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_t>())).ht_cmds as *const _ as usize },
        3968usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_t),
            "::",
            stringify!(ht_cmds)
        )
    );
}
pub type RCmd = r_cmd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_cmd_descriptor_t {
    pub cmd: *const ::std::os::raw::c_char,
    pub help_msg: *mut *const ::std::os::raw::c_char,
    pub help_detail: *mut *const ::std::os::raw::c_char,
    pub help_detail2: *mut *const ::std::os::raw::c_char,
    pub sub: [*mut r_cmd_descriptor_t; 127usize],
}
#[test]
fn bindgen_test_layout_r_cmd_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<r_cmd_descriptor_t>(),
        1048usize,
        concat!("Size of: ", stringify!(r_cmd_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_cmd_descriptor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_cmd_descriptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_descriptor_t>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_descriptor_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_descriptor_t>())).help_msg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_descriptor_t),
            "::",
            stringify!(help_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_descriptor_t>())).help_detail as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_descriptor_t),
            "::",
            stringify!(help_detail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_descriptor_t>())).help_detail2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_descriptor_t),
            "::",
            stringify!(help_detail2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_cmd_descriptor_t>())).sub as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_cmd_descriptor_t),
            "::",
            stringify!(sub)
        )
    );
}
pub type RCmdDescriptor = r_cmd_descriptor_t;
extern "C" {
    pub fn r_cmd_new() -> *mut RCmd;
}
extern "C" {
    pub fn r_cmd_free(cmd: *mut RCmd) -> *mut RCmd;
}
extern "C" {
    pub fn r_cmd_set_data(cmd: *mut RCmd, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_cmd_add(
        cmd: *mut RCmd,
        command: *const ::std::os::raw::c_char,
        callback: RCmdCb,
    ) -> bool;
}
extern "C" {
    pub fn r_core_del(cmd: *mut RCmd, command: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_cmd_call(
        cmd: *mut RCmd,
        command: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cmd_call_parsed_args(cmd: *mut RCmd, args: *mut RCmdParsedArgs) -> RCmdStatus;
}
extern "C" {
    pub fn r_cmd_get_root(cmd: *mut RCmd) -> *mut RCmdDesc;
}
extern "C" {
    pub fn r_cmd_get_desc(
        cmd: *mut RCmd,
        cmd_identifier: *const ::std::os::raw::c_char,
    ) -> *mut RCmdDesc;
}
extern "C" {
    pub fn r_cmd_get_help(
        cmd: *mut RCmd,
        args: *mut RCmdParsedArgs,
        use_color: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cmd_desc_argv_new(
        cmd: *mut RCmd,
        parent: *mut RCmdDesc,
        name: *const ::std::os::raw::c_char,
        cb: RCmdArgvCb,
        help: *const RCmdDescHelp,
    ) -> *mut RCmdDesc;
}
extern "C" {
    pub fn r_cmd_desc_inner_new(
        cmd: *mut RCmd,
        parent: *mut RCmdDesc,
        name: *const ::std::os::raw::c_char,
        help: *const RCmdDescHelp,
    ) -> *mut RCmdDesc;
}
extern "C" {
    pub fn r_cmd_desc_group_new(
        cmd: *mut RCmd,
        parent: *mut RCmdDesc,
        name: *const ::std::os::raw::c_char,
        cb: RCmdArgvCb,
        help: *const RCmdDescHelp,
        group_help: *const RCmdDescHelp,
    ) -> *mut RCmdDesc;
}
extern "C" {
    pub fn r_cmd_desc_oldinput_new(
        cmd: *mut RCmd,
        parent: *mut RCmdDesc,
        name: *const ::std::os::raw::c_char,
        cb: RCmdCb,
        help: *const RCmdDescHelp,
    ) -> *mut RCmdDesc;
}
extern "C" {
    pub fn r_cmd_desc_parent(cd: *mut RCmdDesc) -> *mut RCmdDesc;
}
extern "C" {
    pub fn r_cmd_desc_has_handler(cd: *mut RCmdDesc) -> bool;
}
extern "C" {
    pub fn r_cmd_desc_remove(cmd: *mut RCmd, cd: *mut RCmdDesc) -> bool;
}
extern "C" {
    pub fn r_cmd_parsed_args_new(
        cmd: *const ::std::os::raw::c_char,
        n_args: ::std::os::raw::c_int,
        args: *mut *mut ::std::os::raw::c_char,
    ) -> *mut RCmdParsedArgs;
}
extern "C" {
    pub fn r_cmd_parsed_args_newcmd(cmd: *const ::std::os::raw::c_char) -> *mut RCmdParsedArgs;
}
extern "C" {
    pub fn r_cmd_parsed_args_newargs(
        n_args: ::std::os::raw::c_int,
        args: *mut *mut ::std::os::raw::c_char,
    ) -> *mut RCmdParsedArgs;
}
extern "C" {
    pub fn r_cmd_parsed_args_free(args: *mut RCmdParsedArgs);
}
extern "C" {
    pub fn r_cmd_parsed_args_setargs(
        arg: *mut RCmdParsedArgs,
        n_args: ::std::os::raw::c_int,
        args: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_cmd_parsed_args_setcmd(
        arg: *mut RCmdParsedArgs,
        cmd: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_cmd_parsed_args_argstr(arg: *mut RCmdParsedArgs) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cmd_parsed_args_execstr(arg: *mut RCmdParsedArgs) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cmd_parsed_args_cmd(arg: *mut RCmdParsedArgs) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cmd_macro_item_new() -> *mut RCmdMacroItem;
}
extern "C" {
    pub fn r_cmd_macro_item_free(item: *mut RCmdMacroItem);
}
extern "C" {
    pub fn r_cmd_macro_init(mac: *mut RCmdMacro);
}
extern "C" {
    pub fn r_cmd_macro_add(mac: *mut RCmdMacro, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_cmd_macro_rm(mac: *mut RCmdMacro, _name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_cmd_macro_list(mac: *mut RCmdMacro);
}
extern "C" {
    pub fn r_cmd_macro_meta(mac: *mut RCmdMacro);
}
extern "C" {
    pub fn r_cmd_macro_call(
        mac: *mut RCmdMacro,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cmd_macro_break(
        mac: *mut RCmdMacro,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cmd_alias_del(cmd: *mut RCmd, k: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_cmd_alias_keys(
        cmd: *mut RCmd,
        sz: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cmd_alias_set(
        cmd: *mut RCmd,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
        remote: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_cmd_alias_get(
        cmd: *mut RCmd,
        k: *const ::std::os::raw::c_char,
        remote: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_cmd_alias_free(cmd: *mut RCmd);
}
extern "C" {
    pub fn r_cmd_macro_fini(mac: *mut RCmdMacro);
}
extern "C" {
    pub fn r_sign_version() -> *const ::std::os::raw::c_char;
}
pub const RSignType_R_SIGN_BYTES: RSignType = 98;
pub const RSignType_R_SIGN_BYTES_MASK: RSignType = 109;
pub const RSignType_R_SIGN_BYTES_SIZE: RSignType = 115;
pub const RSignType_R_SIGN_ANAL: RSignType = 97;
pub const RSignType_R_SIGN_COMMENT: RSignType = 99;
pub const RSignType_R_SIGN_GRAPH: RSignType = 103;
pub const RSignType_R_SIGN_OFFSET: RSignType = 111;
pub const RSignType_R_SIGN_NAME: RSignType = 110;
pub const RSignType_R_SIGN_REFS: RSignType = 114;
pub const RSignType_R_SIGN_XREFS: RSignType = 120;
pub const RSignType_R_SIGN_VARS: RSignType = 118;
pub const RSignType_R_SIGN_TYPES: RSignType = 116;
pub const RSignType_R_SIGN_COLLISIONS: RSignType = 67;
pub const RSignType_R_SIGN_BBHASH: RSignType = 104;
pub const RSignType_R_SIGN_END: RSignType = 0;
pub type RSignType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_sign_graph_t {
    pub cc: ::std::os::raw::c_int,
    pub nbbs: ::std::os::raw::c_int,
    pub edges: ::std::os::raw::c_int,
    pub ebbs: ::std::os::raw::c_int,
    pub bbsum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_sign_graph_t() {
    assert_eq!(
        ::std::mem::size_of::<r_sign_graph_t>(),
        20usize,
        concat!("Size of: ", stringify!(r_sign_graph_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_sign_graph_t>(),
        4usize,
        concat!("Alignment of ", stringify!(r_sign_graph_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_graph_t>())).cc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_graph_t),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_graph_t>())).nbbs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_graph_t),
            "::",
            stringify!(nbbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_graph_t>())).edges as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_graph_t),
            "::",
            stringify!(edges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_graph_t>())).ebbs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_graph_t),
            "::",
            stringify!(ebbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_graph_t>())).bbsum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_graph_t),
            "::",
            stringify!(bbsum)
        )
    );
}
pub type RSignGraph = r_sign_graph_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_sign_bytes_t {
    pub size: ::std::os::raw::c_int,
    pub bytes: *mut ::std::os::raw::c_uchar,
    pub mask: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_r_sign_bytes_t() {
    assert_eq!(
        ::std::mem::size_of::<r_sign_bytes_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_sign_bytes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_sign_bytes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_sign_bytes_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_bytes_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_bytes_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_bytes_t>())).bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_bytes_t),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_bytes_t>())).mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_bytes_t),
            "::",
            stringify!(mask)
        )
    );
}
pub type RSignBytes = r_sign_bytes_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_sign_hash_t {
    pub bbhash: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_sign_hash_t() {
    assert_eq!(
        ::std::mem::size_of::<r_sign_hash_t>(),
        8usize,
        concat!("Size of: ", stringify!(r_sign_hash_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_sign_hash_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_sign_hash_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_hash_t>())).bbhash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_hash_t),
            "::",
            stringify!(bbhash)
        )
    );
}
pub type RSignHash = r_sign_hash_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_sign_item_t {
    pub name: *mut ::std::os::raw::c_char,
    pub realname: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub space: *const RSpace,
    pub bytes: *mut RSignBytes,
    pub graph: *mut RSignGraph,
    pub addr: ::std::os::raw::c_ulonglong,
    pub refs: *mut RList,
    pub xrefs: *mut RList,
    pub vars: *mut RList,
    pub types: *mut RList,
    pub collisions: *mut RList,
    pub hash: *mut RSignHash,
}
#[test]
fn bindgen_test_layout_r_sign_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_sign_item_t>(),
        104usize,
        concat!("Size of: ", stringify!(r_sign_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_sign_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_sign_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).realname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(realname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).comment as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).space as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).bytes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).graph as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).addr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).refs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).xrefs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(xrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).vars as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).types as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).collisions as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(collisions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_item_t>())).hash as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_item_t),
            "::",
            stringify!(hash)
        )
    );
}
pub type RSignItem = r_sign_item_t;
pub type RSignForeachCallback = ::std::option::Option<
    unsafe extern "C" fn(it: *mut RSignItem, user: *mut ::std::os::raw::c_void) -> bool,
>;
pub type RSignSearchCallback = ::std::option::Option<
    unsafe extern "C" fn(
        it: *mut RSignItem,
        kw: *mut RSearchKeyword,
        addr: ::std::os::raw::c_ulonglong,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type RSignMatchCallback = ::std::option::Option<
    unsafe extern "C" fn(
        it: *mut RSignItem,
        fcn: *mut RAnalFunction,
        types: *mut RSignType,
        user: *mut ::std::os::raw::c_void,
        col: *mut RList,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_sign_search_met {
    pub types: [RSignType; 8usize],
    pub mincc: ::std::os::raw::c_int,
    pub minsz: ::std::os::raw::c_int,
    pub anal: *mut RAnal,
    pub user: *mut ::std::os::raw::c_void,
    pub cb: RSignMatchCallback,
}
#[test]
fn bindgen_test_layout_r_sign_search_met() {
    assert_eq!(
        ::std::mem::size_of::<r_sign_search_met>(),
        64usize,
        concat!("Size of: ", stringify!(r_sign_search_met))
    );
    assert_eq!(
        ::std::mem::align_of::<r_sign_search_met>(),
        8usize,
        concat!("Alignment of ", stringify!(r_sign_search_met))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_search_met>())).types as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_search_met),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_search_met>())).mincc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_search_met),
            "::",
            stringify!(mincc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_search_met>())).minsz as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_search_met),
            "::",
            stringify!(minsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_search_met>())).anal as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_search_met),
            "::",
            stringify!(anal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_search_met>())).user as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_search_met),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_search_met>())).cb as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_search_met),
            "::",
            stringify!(cb)
        )
    );
}
pub type RSignSearchMetrics = r_sign_search_met;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_sign_search_t {
    pub search: *mut RSearch,
    pub items: *mut RList,
    pub cb: RSignSearchCallback,
    pub user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_r_sign_search_t() {
    assert_eq!(
        ::std::mem::size_of::<r_sign_search_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_sign_search_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_sign_search_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_sign_search_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_search_t>())).search as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_search_t),
            "::",
            stringify!(search)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_search_t>())).items as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_search_t),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_search_t>())).cb as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_search_t),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_sign_search_t>())).user as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_search_t),
            "::",
            stringify!(user)
        )
    );
}
pub type RSignSearch = r_sign_search_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_sign_options_t {
    pub bytes_diff_threshold: f64,
    pub graph_diff_threshold: f64,
}
#[test]
fn bindgen_test_layout_r_sign_options_t() {
    assert_eq!(
        ::std::mem::size_of::<r_sign_options_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_sign_options_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_sign_options_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_sign_options_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_sign_options_t>())).bytes_diff_threshold as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_options_t),
            "::",
            stringify!(bytes_diff_threshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_sign_options_t>())).graph_diff_threshold as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_sign_options_t),
            "::",
            stringify!(graph_diff_threshold)
        )
    );
}
pub type RSignOptions = r_sign_options_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RSignCloseMatch {
    pub score: f64,
    pub bscore: f64,
    pub gscore: f64,
    pub item: *mut RSignItem,
}
#[test]
fn bindgen_test_layout_RSignCloseMatch() {
    assert_eq!(
        ::std::mem::size_of::<RSignCloseMatch>(),
        32usize,
        concat!("Size of: ", stringify!(RSignCloseMatch))
    );
    assert_eq!(
        ::std::mem::align_of::<RSignCloseMatch>(),
        8usize,
        concat!("Alignment of ", stringify!(RSignCloseMatch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RSignCloseMatch>())).score as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RSignCloseMatch),
            "::",
            stringify!(score)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RSignCloseMatch>())).bscore as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RSignCloseMatch),
            "::",
            stringify!(bscore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RSignCloseMatch>())).gscore as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RSignCloseMatch),
            "::",
            stringify!(gscore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RSignCloseMatch>())).item as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RSignCloseMatch),
            "::",
            stringify!(item)
        )
    );
}
extern "C" {
    pub fn r_sign_add_bytes(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
        bytes: *const ::std::os::raw::c_uchar,
        mask: *const ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_add_anal(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulonglong,
        bytes: *const ::std::os::raw::c_uchar,
        at: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_add_graph(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        graph: RSignGraph,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_all_functions(a: *mut RAnal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sign_add_func(
        a: *mut RAnal,
        fcn: *mut RAnalFunction,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_addto_item(
        a: *mut RAnal,
        it: *mut RSignItem,
        fcn: *mut RAnalFunction,
        type_: RSignType,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_add_addr(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_add_name(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        realname: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_add_comment(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        comment: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_add_refs(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        refs: *mut RList,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_add_xrefs(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        xrefs: *mut RList,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_add_vars(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        vars: *mut RList,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_add_types(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        vars: *mut RList,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_delete(a: *mut RAnal, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_sign_list(a: *mut RAnal, format: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_sign_get_list(a: *mut RAnal) -> *mut RList;
}
extern "C" {
    pub fn r_sign_add_hash(
        a: *mut RAnal,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_add_bb_hash(
        a: *mut RAnal,
        fcn: *mut RAnalFunction,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_calc_bbhash(
        a: *mut RAnal,
        fcn: *mut RAnalFunction,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sign_deserialize(
        a: *mut RAnal,
        it: *mut RSignItem,
        k: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_get_item(a: *mut RAnal, name: *const ::std::os::raw::c_char) -> *mut RSignItem;
}
extern "C" {
    pub fn r_sign_add_item(a: *mut RAnal, it: *mut RSignItem) -> bool;
}
extern "C" {
    pub fn r_sign_foreach(
        a: *mut RAnal,
        cb: RSignForeachCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_type_to_name(type_: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sign_search_new() -> *mut RSignSearch;
}
extern "C" {
    pub fn r_sign_search_free(ss: *mut RSignSearch);
}
extern "C" {
    pub fn r_sign_search_init(
        a: *mut RAnal,
        ss: *mut RSignSearch,
        minsz: ::std::os::raw::c_int,
        cb: RSignSearchCallback,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_sign_search_update(
        a: *mut RAnal,
        ss: *mut RSignSearch,
        at: *mut ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sign_resolve_collisions(a: *mut RAnal) -> bool;
}
extern "C" {
    pub fn r_sign_metric_search(
        a: *mut RAnal,
        sm: *mut RSignSearchMetrics,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sign_fcn_match_metrics(
        sm: *mut RSignSearchMetrics,
        fcn: *mut RAnalFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sign_load(a: *mut RAnal, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_sign_load_gz(a: *mut RAnal, filename: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_sign_path(
        a: *mut RAnal,
        file: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_sign_save(a: *mut RAnal, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_sign_item_new() -> *mut RSignItem;
}
extern "C" {
    pub fn r_sign_item_free(item: *mut RSignItem);
}
extern "C" {
    pub fn r_sign_graph_free(graph: *mut RSignGraph);
}
extern "C" {
    pub fn r_sign_bytes_free(bytes: *mut RSignBytes);
}
extern "C" {
    pub fn r_sign_hash_free(hash: *mut RSignHash);
}
extern "C" {
    pub fn r_sign_fcn_refs(a: *mut RAnal, fcn: *mut RAnalFunction) -> *mut RList;
}
extern "C" {
    pub fn r_sign_fcn_xrefs(a: *mut RAnal, fcn: *mut RAnalFunction) -> *mut RList;
}
extern "C" {
    pub fn r_sign_fcn_vars(a: *mut RAnal, fcn: *mut RAnalFunction) -> *mut RList;
}
extern "C" {
    pub fn r_sign_fcn_types(a: *mut RAnal, fcn: *mut RAnalFunction) -> *mut RList;
}
extern "C" {
    pub fn r_sign_is_flirt(buf: *mut RBuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_sign_flirt_dump(anal: *const RAnal, flirt_file: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_sign_flirt_scan(anal: *mut RAnal, flirt_file: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_sign_find_closest_sig(
        a: *mut RAnal,
        it: *mut RSignItem,
        count: ::std::os::raw::c_int,
        score_threshold: f64,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_sign_find_closest_fcn(
        a: *mut RAnal,
        it: *mut RSignItem,
        count: ::std::os::raw::c_int,
        score_threshold: f64,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_sign_close_match_free(match_: *mut RSignCloseMatch);
}
extern "C" {
    pub fn r_sign_diff(
        a: *mut RAnal,
        options: *mut RSignOptions,
        other_space_name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_diff_by_name(
        a: *mut RAnal,
        options: *mut RSignOptions,
        other_space_name: *const ::std::os::raw::c_char,
        not_matching: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_sign_options_new(
        bytes_thresh: *const ::std::os::raw::c_char,
        graph_thresh: *const ::std::os::raw::c_char,
    ) -> *mut RSignOptions;
}
extern "C" {
    pub fn r_sign_options_free(options: *mut RSignOptions);
}
extern "C" {
    pub fn r_hash_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_MD5_CTX {
    pub state: [::std::os::raw::c_uint; 4usize],
    pub count: [::std::os::raw::c_uint; 2usize],
    pub buffer: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_R_MD5_CTX() {
    assert_eq!(
        ::std::mem::size_of::<R_MD5_CTX>(),
        88usize,
        concat!("Size of: ", stringify!(R_MD5_CTX))
    );
    assert_eq!(
        ::std::mem::align_of::<R_MD5_CTX>(),
        4usize,
        concat!("Alignment of ", stringify!(R_MD5_CTX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_MD5_CTX>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(R_MD5_CTX),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_MD5_CTX>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(R_MD5_CTX),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_MD5_CTX>())).buffer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(R_MD5_CTX),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_SHA_CTX {
    pub H: [::std::os::raw::c_uint; 5usize],
    pub W: [::std::os::raw::c_uint; 80usize],
    pub lenW: ::std::os::raw::c_int,
    pub sizeHi: ::std::os::raw::c_uint,
    pub sizeLo: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_R_SHA_CTX() {
    assert_eq!(
        ::std::mem::size_of::<R_SHA_CTX>(),
        352usize,
        concat!("Size of: ", stringify!(R_SHA_CTX))
    );
    assert_eq!(
        ::std::mem::align_of::<R_SHA_CTX>(),
        4usize,
        concat!("Alignment of ", stringify!(R_SHA_CTX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_SHA_CTX>())).H as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(R_SHA_CTX),
            "::",
            stringify!(H)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_SHA_CTX>())).W as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(R_SHA_CTX),
            "::",
            stringify!(W)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_SHA_CTX>())).lenW as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(R_SHA_CTX),
            "::",
            stringify!(lenW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_SHA_CTX>())).sizeHi as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(R_SHA_CTX),
            "::",
            stringify!(sizeHi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_SHA_CTX>())).sizeLo as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(R_SHA_CTX),
            "::",
            stringify!(sizeLo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SHA256_CTX {
    pub state: [::std::os::raw::c_uint; 8usize],
    pub bitcount: ::std::os::raw::c_ulonglong,
    pub buffer: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout__SHA256_CTX() {
    assert_eq!(
        ::std::mem::size_of::<_SHA256_CTX>(),
        104usize,
        concat!("Size of: ", stringify!(_SHA256_CTX))
    );
    assert_eq!(
        ::std::mem::align_of::<_SHA256_CTX>(),
        8usize,
        concat!("Alignment of ", stringify!(_SHA256_CTX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SHA256_CTX>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SHA256_CTX),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SHA256_CTX>())).bitcount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SHA256_CTX),
            "::",
            stringify!(bitcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SHA256_CTX>())).buffer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SHA256_CTX),
            "::",
            stringify!(buffer)
        )
    );
}
pub type R_SHA256_CTX = _SHA256_CTX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SHA512_CTX {
    pub state: [::std::os::raw::c_ulonglong; 8usize],
    pub bitcount: [::std::os::raw::c_ulonglong; 2usize],
    pub buffer: [::std::os::raw::c_uchar; 128usize],
}
#[test]
fn bindgen_test_layout__SHA512_CTX() {
    assert_eq!(
        ::std::mem::size_of::<_SHA512_CTX>(),
        208usize,
        concat!("Size of: ", stringify!(_SHA512_CTX))
    );
    assert_eq!(
        ::std::mem::align_of::<_SHA512_CTX>(),
        8usize,
        concat!("Alignment of ", stringify!(_SHA512_CTX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SHA512_CTX>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SHA512_CTX),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SHA512_CTX>())).bitcount as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_SHA512_CTX),
            "::",
            stringify!(bitcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SHA512_CTX>())).buffer as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_SHA512_CTX),
            "::",
            stringify!(buffer)
        )
    );
}
pub type R_SHA512_CTX = _SHA512_CTX;
pub type R_SHA384_CTX = R_SHA512_CTX;
pub type utcrc = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn r_hash_fletcher8(
        d: *const ::std::os::raw::c_uchar,
        length: size_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_fletcher16(
        data: *const ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn r_hash_fletcher32(
        data: *const ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn r_hash_fletcher64(
        addr: *const ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R_CRC_CTX {
    pub crc: utcrc,
    pub size: ::std::os::raw::c_uint,
    pub reflect: ::std::os::raw::c_int,
    pub poly: utcrc,
    pub xout: utcrc,
}
#[test]
fn bindgen_test_layout_R_CRC_CTX() {
    assert_eq!(
        ::std::mem::size_of::<R_CRC_CTX>(),
        32usize,
        concat!("Size of: ", stringify!(R_CRC_CTX))
    );
    assert_eq!(
        ::std::mem::align_of::<R_CRC_CTX>(),
        8usize,
        concat!("Alignment of ", stringify!(R_CRC_CTX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_CRC_CTX>())).crc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(R_CRC_CTX),
            "::",
            stringify!(crc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_CRC_CTX>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(R_CRC_CTX),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_CRC_CTX>())).reflect as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(R_CRC_CTX),
            "::",
            stringify!(reflect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_CRC_CTX>())).poly as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(R_CRC_CTX),
            "::",
            stringify!(poly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<R_CRC_CTX>())).xout as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(R_CRC_CTX),
            "::",
            stringify!(xout)
        )
    );
}
pub const CRC_PRESETS_CRC_PRESET_8_SMBUS: CRC_PRESETS = 0;
pub const CRC_PRESETS_CRC_PRESET_15_CAN: CRC_PRESETS = 1;
pub const CRC_PRESETS_CRC_PRESET_16: CRC_PRESETS = 2;
pub const CRC_PRESETS_CRC_PRESET_16_CITT: CRC_PRESETS = 3;
pub const CRC_PRESETS_CRC_PRESET_16_USB: CRC_PRESETS = 4;
pub const CRC_PRESETS_CRC_PRESET_16_HDLC: CRC_PRESETS = 5;
pub const CRC_PRESETS_CRC_PRESET_24: CRC_PRESETS = 6;
pub const CRC_PRESETS_CRC_PRESET_32: CRC_PRESETS = 7;
pub const CRC_PRESETS_CRC_PRESET_32_ECMA_267: CRC_PRESETS = 8;
pub const CRC_PRESETS_CRC_PRESET_32C: CRC_PRESETS = 9;
pub const CRC_PRESETS_CRC_PRESET_CRC32_BZIP2: CRC_PRESETS = 10;
pub const CRC_PRESETS_CRC_PRESET_CRC32D: CRC_PRESETS = 11;
pub const CRC_PRESETS_CRC_PRESET_CRC32_MPEG2: CRC_PRESETS = 12;
pub const CRC_PRESETS_CRC_PRESET_CRC32_POSIX: CRC_PRESETS = 13;
pub const CRC_PRESETS_CRC_PRESET_CRC32Q: CRC_PRESETS = 14;
pub const CRC_PRESETS_CRC_PRESET_CRC32_JAMCRC: CRC_PRESETS = 15;
pub const CRC_PRESETS_CRC_PRESET_CRC32_XFER: CRC_PRESETS = 16;
pub const CRC_PRESETS_CRC_PRESET_CRC64: CRC_PRESETS = 17;
pub const CRC_PRESETS_CRC_PRESET_CRC64_ECMA182: CRC_PRESETS = 18;
pub const CRC_PRESETS_CRC_PRESET_CRC64_WE: CRC_PRESETS = 19;
pub const CRC_PRESETS_CRC_PRESET_CRC64_XZ: CRC_PRESETS = 20;
pub const CRC_PRESETS_CRC_PRESET_CRC64_ISO: CRC_PRESETS = 21;
pub const CRC_PRESETS_CRC_PRESET_SIZE: CRC_PRESETS = 22;
pub type CRC_PRESETS = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_hash_t {
    pub md5: R_MD5_CTX,
    pub sha1: R_SHA_CTX,
    pub sha256: R_SHA256_CTX,
    pub sha384: R_SHA384_CTX,
    pub sha512: R_SHA512_CTX,
    pub rst: bool,
    pub entropy: f64,
    pub digest: [::std::os::raw::c_uchar; 128usize],
}
#[test]
fn bindgen_test_layout_r_hash_t() {
    assert_eq!(
        ::std::mem::size_of::<r_hash_t>(),
        1104usize,
        concat!("Size of: ", stringify!(r_hash_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_hash_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_hash_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_t>())).md5 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_t),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_t>())).sha1 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_t),
            "::",
            stringify!(sha1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_t>())).sha256 as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_t),
            "::",
            stringify!(sha256)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_t>())).sha384 as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_t),
            "::",
            stringify!(sha384)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_t>())).sha512 as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_t),
            "::",
            stringify!(sha512)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_t>())).rst as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_t),
            "::",
            stringify!(rst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_t>())).entropy as *const _ as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_t),
            "::",
            stringify!(entropy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_t>())).digest as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_t),
            "::",
            stringify!(digest)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_hash_seed_t {
    pub prefix: ::std::os::raw::c_int,
    pub buf: *mut ::std::os::raw::c_uchar,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_hash_seed_t() {
    assert_eq!(
        ::std::mem::size_of::<r_hash_seed_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_hash_seed_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_hash_seed_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_hash_seed_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_seed_t>())).prefix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_seed_t),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_seed_t>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_seed_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_hash_seed_t>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_hash_seed_t),
            "::",
            stringify!(len)
        )
    );
}
pub type RHashSeed = r_hash_seed_t;
pub const HASH_INDICES_R_HASH_IDX_MD5: HASH_INDICES = 0;
pub const HASH_INDICES_R_HASH_IDX_SHA1: HASH_INDICES = 1;
pub const HASH_INDICES_R_HASH_IDX_SHA256: HASH_INDICES = 2;
pub const HASH_INDICES_R_HASH_IDX_SHA384: HASH_INDICES = 3;
pub const HASH_INDICES_R_HASH_IDX_SHA512: HASH_INDICES = 4;
pub const HASH_INDICES_R_HASH_IDX_MD4: HASH_INDICES = 5;
pub const HASH_INDICES_R_HASH_IDX_XOR: HASH_INDICES = 6;
pub const HASH_INDICES_R_HASH_IDX_XORPAIR: HASH_INDICES = 7;
pub const HASH_INDICES_R_HASH_IDX_PARITY: HASH_INDICES = 8;
pub const HASH_INDICES_R_HASH_IDX_ENTROPY: HASH_INDICES = 9;
pub const HASH_INDICES_R_HASH_IDX_HAMDIST: HASH_INDICES = 10;
pub const HASH_INDICES_R_HASH_IDX_PCPRINT: HASH_INDICES = 11;
pub const HASH_INDICES_R_HASH_IDX_MOD255: HASH_INDICES = 12;
pub const HASH_INDICES_R_HASH_IDX_XXHASH: HASH_INDICES = 13;
pub const HASH_INDICES_R_HASH_IDX_ADLER32: HASH_INDICES = 14;
pub const HASH_INDICES_R_HASH_IDX_BASE64: HASH_INDICES = 15;
pub const HASH_INDICES_R_HASH_IDX_BASE91: HASH_INDICES = 16;
pub const HASH_INDICES_R_HASH_IDX_PUNYCODE: HASH_INDICES = 17;
pub const HASH_INDICES_R_HASH_IDX_LUHN: HASH_INDICES = 18;
pub const HASH_INDICES_R_HASH_IDX_SSDEEP: HASH_INDICES = 19;
pub const HASH_INDICES_R_HASH_IDX_CRC8_SMBUS: HASH_INDICES = 20;
pub const HASH_INDICES_R_HASH_IDX_CRC15_CAN: HASH_INDICES = 21;
pub const HASH_INDICES_R_HASH_IDX_CRC16: HASH_INDICES = 22;
pub const HASH_INDICES_R_HASH_IDX_CRC16_HDLC: HASH_INDICES = 23;
pub const HASH_INDICES_R_HASH_IDX_CRC16_USB: HASH_INDICES = 24;
pub const HASH_INDICES_R_HASH_IDX_CRC16_CITT: HASH_INDICES = 25;
pub const HASH_INDICES_R_HASH_IDX_CRC24: HASH_INDICES = 26;
pub const HASH_INDICES_R_HASH_IDX_CRC32: HASH_INDICES = 27;
pub const HASH_INDICES_R_HASH_IDX_CRC32C: HASH_INDICES = 28;
pub const HASH_INDICES_R_HASH_IDX_CRC32_ECMA_267: HASH_INDICES = 29;
pub const HASH_INDICES_R_HASH_IDX_CRC32_BZIP2: HASH_INDICES = 30;
pub const HASH_INDICES_R_HASH_IDX_CRC32D: HASH_INDICES = 31;
pub const HASH_INDICES_R_HASH_IDX_CRC32_MPEG2: HASH_INDICES = 32;
pub const HASH_INDICES_R_HASH_IDX_CRC32_POSIX: HASH_INDICES = 33;
pub const HASH_INDICES_R_HASH_IDX_CRC32Q: HASH_INDICES = 34;
pub const HASH_INDICES_R_HASH_IDX_CRC32_JAMCRC: HASH_INDICES = 35;
pub const HASH_INDICES_R_HASH_IDX_CRC32_XFER: HASH_INDICES = 36;
pub const HASH_INDICES_R_HASH_IDX_CRC64: HASH_INDICES = 37;
pub const HASH_INDICES_R_HASH_IDX_CRC64_ECMA182: HASH_INDICES = 38;
pub const HASH_INDICES_R_HASH_IDX_CRC64_WE: HASH_INDICES = 39;
pub const HASH_INDICES_R_HASH_IDX_CRC64_XZ: HASH_INDICES = 40;
pub const HASH_INDICES_R_HASH_IDX_CRC64_ISO: HASH_INDICES = 41;
pub const HASH_INDICES_R_HASH_IDX_FLETCHER8: HASH_INDICES = 42;
pub const HASH_INDICES_R_HASH_IDX_FLETCHER16: HASH_INDICES = 43;
pub const HASH_INDICES_R_HASH_IDX_FLETCHER32: HASH_INDICES = 44;
pub const HASH_INDICES_R_HASH_IDX_FLETCHER64: HASH_INDICES = 45;
pub const HASH_INDICES_R_HASH_NUM_INDICES: HASH_INDICES = 46;
pub type HASH_INDICES = ::std::os::raw::c_uint;
extern "C" {
    pub fn r_hash_new(rst: bool, flags: ::std::os::raw::c_ulonglong) -> *mut r_hash_t;
}
extern "C" {
    pub fn r_hash_free(ctx: *mut r_hash_t);
}
extern "C" {
    pub fn r_hash_do_md4(
        ctx: *mut r_hash_t,
        input: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_do_ssdeep(
        ctx: *mut r_hash_t,
        input: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_do_md5(
        ctx: *mut r_hash_t,
        input: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_do_sha1(
        ctx: *mut r_hash_t,
        input: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_do_sha256(
        ctx: *mut r_hash_t,
        input: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_do_sha384(
        ctx: *mut r_hash_t,
        input: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_do_sha512(
        ctx: *mut r_hash_t,
        input: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_do_hmac_sha256(
        ctx: *mut r_hash_t,
        input: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        klen: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_to_string(
        ctx: *mut r_hash_t,
        name: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hash_name(bit: ::std::os::raw::c_ulonglong) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hash_name_to_bits(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_hash_size(bit: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_hash_calculate(
        ctx: *mut r_hash_t,
        algobit: ::std::os::raw::c_ulonglong,
        input: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_hash_deviation(
        b: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_adler32(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn r_hash_xxhash(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn r_hash_xor(
        b: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_xorpair(
        a: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn r_hash_parity(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_hash_mod255(
        b: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_luhn(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_hash_ssdeep(
        buf: *const ::std::os::raw::c_uchar,
        len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_hash_crc_preset(
        data: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_uint,
        preset: CRC_PRESETS,
    ) -> utcrc;
}
extern "C" {
    pub fn r_hash_hamdist(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_hash_entropy(
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> f64;
}
extern "C" {
    pub fn r_hash_entropy_fraction(
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> f64;
}
extern "C" {
    pub fn r_hash_pcprint(
        buffer: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_hash_do_begin(ctx: *mut r_hash_t, flags: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_hash_do_end(ctx: *mut r_hash_t, flags: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_hash_do_spice(
        ctx: *mut r_hash_t,
        algo: ::std::os::raw::c_ulonglong,
        loops: ::std::os::raw::c_int,
        seed: *mut RHashSeed,
    );
}
extern "C" {
    pub fn r_bp_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bp_arch_t {
    pub bits: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub endian: ::std::os::raw::c_int,
    pub bytes: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_r_bp_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bp_arch_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_bp_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bp_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bp_arch_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_arch_t>())).bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_arch_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_arch_t>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_arch_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_arch_t>())).endian as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_arch_t),
            "::",
            stringify!(endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_arch_t>())).bytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_arch_t),
            "::",
            stringify!(bytes)
        )
    );
}
pub type RBreakpointArch = r_bp_arch_t;
pub const R_BP_TYPE_SW: ::std::os::raw::c_uint = 0;
pub const R_BP_TYPE_HW: ::std::os::raw::c_uint = 1;
pub const R_BP_TYPE_COND: ::std::os::raw::c_uint = 2;
pub const R_BP_TYPE_FAULT: ::std::os::raw::c_uint = 3;
pub const R_BP_TYPE_DELETE: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bp_plugin_t {
    pub name: *mut ::std::os::raw::c_char,
    pub arch: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub nbps: ::std::os::raw::c_int,
    pub bps: *mut RBreakpointArch,
}
#[test]
fn bindgen_test_layout_r_bp_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bp_plugin_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_bp_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bp_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bp_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_plugin_t>())).arch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_plugin_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_plugin_t>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_plugin_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_plugin_t>())).nbps as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_plugin_t),
            "::",
            stringify!(nbps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_plugin_t>())).bps as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_plugin_t),
            "::",
            stringify!(bps)
        )
    );
}
pub type RBreakpointPlugin = r_bp_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bp_item_t {
    pub name: *mut ::std::os::raw::c_char,
    pub module_name: *mut ::std::os::raw::c_char,
    pub module_delta: ::std::os::raw::c_longlong,
    pub addr: ::std::os::raw::c_ulonglong,
    pub delta: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_int,
    pub swstep: bool,
    pub perm: ::std::os::raw::c_int,
    pub hw: ::std::os::raw::c_int,
    pub trace: ::std::os::raw::c_int,
    pub internal: ::std::os::raw::c_int,
    pub enabled: ::std::os::raw::c_int,
    pub togglehits: ::std::os::raw::c_int,
    pub hits: ::std::os::raw::c_int,
    pub obytes: *mut ::std::os::raw::c_uchar,
    pub bbytes: *mut ::std::os::raw::c_uchar,
    pub pids: [::std::os::raw::c_int; 10usize],
    pub data: *mut ::std::os::raw::c_char,
    pub cond: *mut ::std::os::raw::c_char,
    pub expr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_bp_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bp_item_t>(),
        160usize,
        concat!("Size of: ", stringify!(r_bp_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bp_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bp_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).module_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(module_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).module_delta as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(module_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).delta as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).swstep as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(swstep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).perm as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).hw as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(hw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).trace as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(trace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).internal as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(internal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).enabled as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).togglehits as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(togglehits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).hits as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).obytes as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(obytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).bbytes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(bbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).pids as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(pids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).data as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).cond as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_item_t>())).expr as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_item_t),
            "::",
            stringify!(expr)
        )
    );
}
pub type RBreakpointItem = r_bp_item_t;
pub type RBreakpointCallback = ::std::option::Option<
    unsafe extern "C" fn(
        bp: *mut r_bp_t,
        b: *mut RBreakpointItem,
        set: bool,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bp_t {
    pub user: *mut ::std::os::raw::c_void,
    pub stepcont: ::std::os::raw::c_int,
    pub endian: ::std::os::raw::c_int,
    pub bits: ::std::os::raw::c_int,
    pub bpinmaps: bool,
    pub corebind: RCoreBind,
    pub iob: RIOBind,
    pub cur: *mut RBreakpointPlugin,
    pub traces: *mut RList,
    pub plugins: *mut RList,
    pub cb_printf: PrintfCallback,
    pub breakpoint: RBreakpointCallback,
    pub nbps: ::std::os::raw::c_int,
    pub nhwbps: ::std::os::raw::c_int,
    pub bps: *mut RList,
    pub bps_idx: *mut *mut RBreakpointItem,
    pub bps_idx_count: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_longlong,
    pub baddr: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_bp_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bp_t>(),
        520usize,
        concat!("Size of: ", stringify!(r_bp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bp_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).stepcont as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(stepcont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).endian as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).bits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).bpinmaps as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(bpinmaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).corebind as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(corebind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).iob as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(iob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).cur as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).traces as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(traces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).plugins as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).cb_printf as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).breakpoint as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(breakpoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).nbps as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(nbps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).nhwbps as *const _ as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(nhwbps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).bps as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(bps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).bps_idx as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(bps_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).bps_idx_count as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(bps_idx_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).delta as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_t>())).baddr as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_t),
            "::",
            stringify!(baddr)
        )
    );
}
pub type RBreakpoint = r_bp_t;
pub const R_BP_PROT_EXEC: ::std::os::raw::c_uint = 1;
pub const R_BP_PROT_WRITE: ::std::os::raw::c_uint = 2;
pub const R_BP_PROT_READ: ::std::os::raw::c_uint = 4;
pub const R_BP_PROT_ACCESS: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_bp_trace_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub addr_end: ::std::os::raw::c_ulonglong,
    pub traps: *mut ::std::os::raw::c_uchar,
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub bits: *mut ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_int,
    pub bitlen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_bp_trace_t() {
    assert_eq!(
        ::std::mem::size_of::<r_bp_trace_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_bp_trace_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_bp_trace_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_bp_trace_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_trace_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_trace_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_trace_t>())).addr_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_trace_t),
            "::",
            stringify!(addr_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_trace_t>())).traps as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_trace_t),
            "::",
            stringify!(traps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_trace_t>())).buffer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_trace_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_trace_t>())).bits as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_trace_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_trace_t>())).length as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_trace_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_bp_trace_t>())).bitlen as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_bp_trace_t),
            "::",
            stringify!(bitlen)
        )
    );
}
pub type RBreakpointTrace = r_bp_trace_t;
extern "C" {
    pub fn r_bp_new() -> *mut RBreakpoint;
}
extern "C" {
    pub fn r_bp_free(bp: *mut RBreakpoint) -> *mut RBreakpoint;
}
extern "C" {
    pub fn r_bp_del(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_del_all(bp: *mut RBreakpoint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_plugin_add(
        bp: *mut RBreakpoint,
        foo: *mut RBreakpointPlugin,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_use(
        bp: *mut RBreakpoint,
        name: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_plugin_del(
        bp: *mut RBreakpoint,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_plugin_list(bp: *mut RBreakpoint);
}
extern "C" {
    pub fn r_bp_in(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
        perm: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_list(bp: *mut RBreakpoint, rad: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_size(bp: *mut RBreakpoint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_get_bytes(
        bp: *mut RBreakpoint,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        endian: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_set_trace(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
        set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_set_trace_all(
        bp: *mut RBreakpoint,
        set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_enable(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
        set: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> *mut RBreakpointItem;
}
extern "C" {
    pub fn r_bp_enable_all(
        bp: *mut RBreakpoint,
        set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_del_index(
        bp: *mut RBreakpoint,
        idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_get_index(bp: *mut RBreakpoint, idx: ::std::os::raw::c_int)
        -> *mut RBreakpointItem;
}
extern "C" {
    pub fn r_bp_get_index_at(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_item_new(bp: *mut RBreakpoint) -> *mut RBreakpointItem;
}
extern "C" {
    pub fn r_bp_get_at(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RBreakpointItem;
}
extern "C" {
    pub fn r_bp_get_in(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
        perm: ::std::os::raw::c_int,
    ) -> *mut RBreakpointItem;
}
extern "C" {
    pub fn r_bp_is_valid(bp: *mut RBreakpoint, b: *mut RBreakpointItem) -> bool;
}
extern "C" {
    pub fn r_bp_add_cond(
        bp: *mut RBreakpoint,
        cond: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_del_cond(bp: *mut RBreakpoint, idx: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_add_fault(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        perm: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_add_sw(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        perm: ::std::os::raw::c_int,
    ) -> *mut RBreakpointItem;
}
extern "C" {
    pub fn r_bp_add_hw(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        perm: ::std::os::raw::c_int,
    ) -> *mut RBreakpointItem;
}
extern "C" {
    pub fn r_bp_restore_one(bp: *mut RBreakpoint, b: *mut RBreakpointItem, set: bool);
}
extern "C" {
    pub fn r_bp_restore(bp: *mut RBreakpoint, set: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_restore_except(
        bp: *mut RBreakpoint,
        set: bool,
        addr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_bp_traptrace_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_bp_traptrace_enable(bp: *mut RBreakpoint, enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_bp_traptrace_reset(bp: *mut RBreakpoint, hard: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_bp_traptrace_next(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_bp_traptrace_add(
        bp: *mut RBreakpoint,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_traptrace_free_at(
        bp: *mut RBreakpoint,
        from: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_traptrace_list(bp: *mut RBreakpoint);
}
extern "C" {
    pub fn r_bp_traptrace_at(
        bp: *mut RBreakpoint,
        from: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_bp_traptrace_new() -> *mut RList;
}
extern "C" {
    pub fn r_bp_watch_add(
        bp: *mut RBreakpoint,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        hw: ::std::os::raw::c_int,
        rw: ::std::os::raw::c_int,
    ) -> *mut RBreakpointItem;
}
extern "C" {
    pub static mut r_bp_plugin_x86: RBreakpointPlugin;
}
extern "C" {
    pub static mut r_bp_plugin_arm: RBreakpointPlugin;
}
extern "C" {
    pub static mut r_bp_plugin_mips: RBreakpointPlugin;
}
extern "C" {
    pub static mut r_bp_plugin_ppc: RBreakpointPlugin;
}
extern "C" {
    pub static mut r_bp_plugin_sh: RBreakpointPlugin;
}
extern "C" {
    pub static mut r_bp_plugin_bf: RBreakpointPlugin;
}
extern "C" {
    pub fn r_config_version() -> *const ::std::os::raw::c_char;
}
pub type RConfigCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_config_node_t {
    pub name: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_uint,
    pub value: *mut ::std::os::raw::c_char,
    pub i_value: ::std::os::raw::c_ulonglong,
    pub cb_ptr_q: *mut ::std::os::raw::c_ulonglong,
    pub cb_ptr_i: *mut ::std::os::raw::c_int,
    pub cb_ptr_s: *mut *mut ::std::os::raw::c_char,
    pub getter: RConfigCallback,
    pub setter: RConfigCallback,
    pub desc: *mut ::std::os::raw::c_char,
    pub options: *mut RList,
}
#[test]
fn bindgen_test_layout_r_config_node_t() {
    assert_eq!(
        ::std::mem::size_of::<r_config_node_t>(),
        88usize,
        concat!("Size of: ", stringify!(r_config_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_config_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_config_node_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).i_value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(i_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).cb_ptr_q as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(cb_ptr_q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).cb_ptr_i as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(cb_ptr_i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).cb_ptr_s as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(cb_ptr_s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).getter as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(getter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).setter as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(setter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).desc as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_node_t>())).options as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_node_t),
            "::",
            stringify!(options)
        )
    );
}
pub type RConfigNode = r_config_node_t;
extern "C" {
    pub fn r_config_node_type(node: *mut RConfigNode) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_config_t {
    pub user: *mut ::std::os::raw::c_void,
    pub num: *mut RNum,
    pub cb_printf: PrintfCallback,
    pub nodes: *mut RList,
    pub ht: *mut HtPP,
    pub lock: bool,
}
#[test]
fn bindgen_test_layout_r_config_t() {
    assert_eq!(
        ::std::mem::size_of::<r_config_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_config_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_config_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_t>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_t>())).num as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_t>())).cb_printf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_t>())).nodes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_t),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_t>())).ht as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_t),
            "::",
            stringify!(ht)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_t>())).lock as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_t),
            "::",
            stringify!(lock)
        )
    );
}
pub type RConfig = r_config_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_config_hold_t {
    pub cfg: *mut RConfig,
    pub list: *mut RList,
}
#[test]
fn bindgen_test_layout_r_config_hold_t() {
    assert_eq!(
        ::std::mem::size_of::<r_config_hold_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_config_hold_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_config_hold_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_config_hold_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_hold_t>())).cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_hold_t),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_config_hold_t>())).list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_config_hold_t),
            "::",
            stringify!(list)
        )
    );
}
pub type RConfigHold = r_config_hold_t;
extern "C" {
    pub fn r_config_hold_new(cfg: *mut RConfig) -> *mut RConfigHold;
}
extern "C" {
    pub fn r_config_hold(h: *mut RConfigHold, ...) -> bool;
}
extern "C" {
    pub fn r_config_hold_free(h: *mut RConfigHold);
}
extern "C" {
    pub fn r_config_hold_restore(h: *mut RConfigHold);
}
extern "C" {
    pub fn r_config_new(user: *mut ::std::os::raw::c_void) -> *mut RConfig;
}
extern "C" {
    pub fn r_config_clone(cfg: *mut RConfig) -> *mut RConfig;
}
extern "C" {
    pub fn r_config_free(cfg: *mut RConfig);
}
extern "C" {
    pub fn r_config_lock(cfg: *mut RConfig, lock: bool);
}
extern "C" {
    pub fn r_config_eval(
        cfg: *mut RConfig,
        str_: *const ::std::os::raw::c_char,
        many: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_config_bump(cfg: *mut RConfig, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_config_get_b(cfg: *mut RConfig, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_config_set_b(
        cfg: *mut RConfig,
        name: *const ::std::os::raw::c_char,
        b: bool,
    ) -> *mut RConfigNode;
}
extern "C" {
    pub fn r_config_set_i(
        cfg: *mut RConfig,
        name: *const ::std::os::raw::c_char,
        i: ::std::os::raw::c_ulonglong,
    ) -> *mut RConfigNode;
}
extern "C" {
    pub fn r_config_set_cb(
        cfg: *mut RConfig,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        cb: RConfigCallback,
    ) -> *mut RConfigNode;
}
extern "C" {
    pub fn r_config_set_i_cb(
        cfg: *mut RConfig,
        name: *const ::std::os::raw::c_char,
        ivalue: ::std::os::raw::c_int,
        cb: RConfigCallback,
    ) -> *mut RConfigNode;
}
extern "C" {
    pub fn r_config_set(
        cfg: *mut RConfig,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> *mut RConfigNode;
}
extern "C" {
    pub fn r_config_rm(cfg: *mut RConfig, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_config_get_i(
        cfg: *mut RConfig,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_config_get(
        cfg: *mut RConfig,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_config_desc(
        cfg: *mut RConfig,
        name: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_char,
    ) -> *mut RConfigNode;
}
extern "C" {
    pub fn r_config_list(
        cfg: *mut RConfig,
        str_: *const ::std::os::raw::c_char,
        rad: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_config_toggle(cfg: *mut RConfig, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_config_readonly(cfg: *mut RConfig, key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_config_set_setter(
        cfg: *mut RConfig,
        key: *const ::std::os::raw::c_char,
        cb: RConfigCallback,
    ) -> bool;
}
extern "C" {
    pub fn r_config_set_getter(
        cfg: *mut RConfig,
        key: *const ::std::os::raw::c_char,
        cb: RConfigCallback,
    ) -> bool;
}
extern "C" {
    pub fn r_config_serialize(config: *mut RConfig, db: *mut Sdb);
}
extern "C" {
    pub fn r_config_unserialize(
        config: *mut RConfig,
        db: *mut Sdb,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_config_node_desc(
        node: *mut RConfigNode,
        desc: *const ::std::os::raw::c_char,
    ) -> *mut RConfigNode;
}
extern "C" {
    pub fn r_config_node_to_string(node: *mut RConfigNode) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_config_node_add_option(node: *mut RConfigNode, option: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_config_node_purge_options(node: *mut RConfigNode);
}
extern "C" {
    pub fn r_config_node_get(
        cfg: *mut RConfig,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RConfigNode;
}
extern "C" {
    pub fn r_config_node_new(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> *mut RConfigNode;
}
extern "C" {
    pub fn r_config_node_free(n: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_config_node_value_format_i(
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        i: ::std::os::raw::c_ulonglong,
        node: *mut RConfigNode,
    );
}
extern "C" {
    pub fn r_debug_version() -> *const ::std::os::raw::c_char;
}
pub const RDebugPidState_R_DBG_PROC_STOP: RDebugPidState = 115;
pub const RDebugPidState_R_DBG_PROC_RUN: RDebugPidState = 114;
pub const RDebugPidState_R_DBG_PROC_SLEEP: RDebugPidState = 83;
pub const RDebugPidState_R_DBG_PROC_ZOMBIE: RDebugPidState = 122;
pub const RDebugPidState_R_DBG_PROC_DEAD: RDebugPidState = 100;
pub const RDebugPidState_R_DBG_PROC_RAISED: RDebugPidState = 82;
pub type RDebugPidState = ::std::os::raw::c_uint;
pub const RDebugSignalMode_R_DBG_SIGNAL_IGNORE: RDebugSignalMode = 0;
pub const RDebugSignalMode_R_DBG_SIGNAL_CONT: RDebugSignalMode = 1;
pub const RDebugSignalMode_R_DBG_SIGNAL_SKIP: RDebugSignalMode = 2;
pub type RDebugSignalMode = ::std::os::raw::c_uint;
pub const RDebugRecoilMode_R_DBG_RECOIL_NONE: RDebugRecoilMode = 0;
pub const RDebugRecoilMode_R_DBG_RECOIL_STEP: RDebugRecoilMode = 1;
pub const RDebugRecoilMode_R_DBG_RECOIL_CONTINUE: RDebugRecoilMode = 2;
pub type RDebugRecoilMode = ::std::os::raw::c_uint;
pub const RDebugReasonType_R_DEBUG_REASON_DEAD: RDebugReasonType = -1;
pub const RDebugReasonType_R_DEBUG_REASON_NONE: RDebugReasonType = 0;
pub const RDebugReasonType_R_DEBUG_REASON_SIGNAL: RDebugReasonType = 1;
pub const RDebugReasonType_R_DEBUG_REASON_BREAKPOINT: RDebugReasonType = 2;
pub const RDebugReasonType_R_DEBUG_REASON_TRACEPOINT: RDebugReasonType = 3;
pub const RDebugReasonType_R_DEBUG_REASON_COND: RDebugReasonType = 4;
pub const RDebugReasonType_R_DEBUG_REASON_READERR: RDebugReasonType = 5;
pub const RDebugReasonType_R_DEBUG_REASON_STEP: RDebugReasonType = 6;
pub const RDebugReasonType_R_DEBUG_REASON_ABORT: RDebugReasonType = 7;
pub const RDebugReasonType_R_DEBUG_REASON_WRITERR: RDebugReasonType = 8;
pub const RDebugReasonType_R_DEBUG_REASON_DIVBYZERO: RDebugReasonType = 9;
pub const RDebugReasonType_R_DEBUG_REASON_ILLEGAL: RDebugReasonType = 10;
pub const RDebugReasonType_R_DEBUG_REASON_UNKNOWN: RDebugReasonType = 11;
pub const RDebugReasonType_R_DEBUG_REASON_ERROR: RDebugReasonType = 12;
pub const RDebugReasonType_R_DEBUG_REASON_NEW_PID: RDebugReasonType = 13;
pub const RDebugReasonType_R_DEBUG_REASON_NEW_TID: RDebugReasonType = 14;
pub const RDebugReasonType_R_DEBUG_REASON_NEW_LIB: RDebugReasonType = 15;
pub const RDebugReasonType_R_DEBUG_REASON_EXIT_PID: RDebugReasonType = 16;
pub const RDebugReasonType_R_DEBUG_REASON_EXIT_TID: RDebugReasonType = 17;
pub const RDebugReasonType_R_DEBUG_REASON_EXIT_LIB: RDebugReasonType = 18;
pub const RDebugReasonType_R_DEBUG_REASON_TRAP: RDebugReasonType = 19;
pub const RDebugReasonType_R_DEBUG_REASON_SWI: RDebugReasonType = 20;
pub const RDebugReasonType_R_DEBUG_REASON_INT: RDebugReasonType = 21;
pub const RDebugReasonType_R_DEBUG_REASON_FPU: RDebugReasonType = 22;
pub const RDebugReasonType_R_DEBUG_REASON_USERSUSP: RDebugReasonType = 23;
pub const RDebugReasonType_R_DEBUG_REASON_SEGFAULT: RDebugReasonType = 24;
pub const RDebugReasonType_R_DEBUG_REASON_STOPPED: RDebugReasonType = 25;
pub const RDebugReasonType_R_DEBUG_REASON_TERMINATED: RDebugReasonType = 26;
pub type RDebugReasonType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_frame_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_int,
    pub sp: ::std::os::raw::c_ulonglong,
    pub bp: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_debug_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_frame_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_debug_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_frame_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_frame_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_frame_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_frame_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_frame_t>())).sp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_frame_t),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_frame_t>())).bp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_frame_t),
            "::",
            stringify!(bp)
        )
    );
}
pub type RDebugFrame = r_debug_frame_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_reason_t {
    pub type_: ::std::os::raw::c_int,
    pub tid: ::std::os::raw::c_int,
    pub signum: ::std::os::raw::c_int,
    pub bp_addr: ::std::os::raw::c_ulonglong,
    pub timestamp: ::std::os::raw::c_ulonglong,
    pub addr: ::std::os::raw::c_ulonglong,
    pub ptr: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_debug_reason_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_reason_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_debug_reason_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_reason_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_reason_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_reason_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_reason_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_reason_t>())).tid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_reason_t),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_reason_t>())).signum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_reason_t),
            "::",
            stringify!(signum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_reason_t>())).bp_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_reason_t),
            "::",
            stringify!(bp_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_reason_t>())).timestamp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_reason_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_reason_t>())).addr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_reason_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_reason_t>())).ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_reason_t),
            "::",
            stringify!(ptr)
        )
    );
}
pub type RDebugReason = r_debug_reason_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_map_t {
    pub name: *mut ::std::os::raw::c_char,
    pub addr: ::std::os::raw::c_ulonglong,
    pub addr_end: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_ulonglong,
    pub offset: ::std::os::raw::c_ulonglong,
    pub file: *mut ::std::os::raw::c_char,
    pub perm: ::std::os::raw::c_int,
    pub user: ::std::os::raw::c_int,
    pub shared: bool,
}
#[test]
fn bindgen_test_layout_r_debug_map_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_map_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_debug_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_map_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_map_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_map_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_map_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_map_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_map_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_map_t>())).addr_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_map_t),
            "::",
            stringify!(addr_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_map_t>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_map_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_map_t>())).offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_map_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_map_t>())).file as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_map_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_map_t>())).perm as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_map_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_map_t>())).user as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_map_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_map_t>())).shared as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_map_t),
            "::",
            stringify!(shared)
        )
    );
}
pub type RDebugMap = r_debug_map_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_signal_t {
    pub type_: ::std::os::raw::c_int,
    pub num: ::std::os::raw::c_int,
    pub handler: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_debug_signal_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_signal_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_debug_signal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_signal_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_signal_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_signal_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_signal_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_signal_t>())).num as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_signal_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_signal_t>())).handler as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_signal_t),
            "::",
            stringify!(handler)
        )
    );
}
pub type RDebugSignal = r_debug_signal_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_desc_t {
    pub fd: ::std::os::raw::c_int,
    pub path: *mut ::std::os::raw::c_char,
    pub perm: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub off: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_debug_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_desc_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_debug_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_desc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_desc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_t>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_t>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_t>())).perm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_t>())).type_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_t>())).off as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_t),
            "::",
            stringify!(off)
        )
    );
}
pub type RDebugDesc = r_debug_desc_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_snap_t {
    pub name: *mut ::std::os::raw::c_char,
    pub addr: ::std::os::raw::c_ulonglong,
    pub addr_end: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_uchar,
    pub perm: ::std::os::raw::c_int,
    pub user: ::std::os::raw::c_int,
    pub shared: bool,
}
#[test]
fn bindgen_test_layout_r_debug_snap_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_snap_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_debug_snap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_snap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_snap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_snap_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_snap_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_snap_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_snap_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_snap_t>())).addr_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_snap_t),
            "::",
            stringify!(addr_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_snap_t>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_snap_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_snap_t>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_snap_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_snap_t>())).perm as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_snap_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_snap_t>())).user as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_snap_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_snap_t>())).shared as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_snap_t),
            "::",
            stringify!(shared)
        )
    );
}
pub type RDebugSnap = r_debug_snap_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RDebugChangeReg {
    pub cnum: ::std::os::raw::c_int,
    pub data: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_RDebugChangeReg() {
    assert_eq!(
        ::std::mem::size_of::<RDebugChangeReg>(),
        16usize,
        concat!("Size of: ", stringify!(RDebugChangeReg))
    );
    assert_eq!(
        ::std::mem::align_of::<RDebugChangeReg>(),
        8usize,
        concat!("Alignment of ", stringify!(RDebugChangeReg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RDebugChangeReg>())).cnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RDebugChangeReg),
            "::",
            stringify!(cnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RDebugChangeReg>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RDebugChangeReg),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RDebugChangeMem {
    pub cnum: ::std::os::raw::c_int,
    pub data: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_RDebugChangeMem() {
    assert_eq!(
        ::std::mem::size_of::<RDebugChangeMem>(),
        8usize,
        concat!("Size of: ", stringify!(RDebugChangeMem))
    );
    assert_eq!(
        ::std::mem::align_of::<RDebugChangeMem>(),
        4usize,
        concat!("Alignment of ", stringify!(RDebugChangeMem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RDebugChangeMem>())).cnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RDebugChangeMem),
            "::",
            stringify!(cnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RDebugChangeMem>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RDebugChangeMem),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_checkpoint_t {
    pub cnum: ::std::os::raw::c_int,
    pub arena: [*mut RRegArena; 8usize],
    pub snaps: *mut RList,
}
#[test]
fn bindgen_test_layout_r_debug_checkpoint_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_checkpoint_t>(),
        80usize,
        concat!("Size of: ", stringify!(r_debug_checkpoint_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_checkpoint_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_checkpoint_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_checkpoint_t>())).cnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_checkpoint_t),
            "::",
            stringify!(cnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_checkpoint_t>())).arena as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_checkpoint_t),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_checkpoint_t>())).snaps as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_checkpoint_t),
            "::",
            stringify!(snaps)
        )
    );
}
pub type RDebugCheckpoint = r_debug_checkpoint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_session_t {
    pub cnum: ::std::os::raw::c_uint,
    pub maxcnum: ::std::os::raw::c_uint,
    pub cur_chkpt: *mut RDebugCheckpoint,
    pub checkpoints: *mut RVector,
    pub memory: *mut HtUP,
    pub registers: *mut HtUP,
    pub reasontype: ::std::os::raw::c_int,
    pub bp: *mut RBreakpointItem,
}
#[test]
fn bindgen_test_layout_r_debug_session_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_session_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_debug_session_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_session_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_session_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_session_t>())).cnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_session_t),
            "::",
            stringify!(cnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_session_t>())).maxcnum as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_session_t),
            "::",
            stringify!(maxcnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_session_t>())).cur_chkpt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_session_t),
            "::",
            stringify!(cur_chkpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_session_t>())).checkpoints as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_session_t),
            "::",
            stringify!(checkpoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_session_t>())).memory as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_session_t),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_session_t>())).registers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_session_t),
            "::",
            stringify!(registers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_session_t>())).reasontype as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_session_t),
            "::",
            stringify!(reasontype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_session_t>())).bp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_session_t),
            "::",
            stringify!(bp)
        )
    );
}
pub type RDebugSession = r_debug_session_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_session_header {
    pub addr: ::std::os::raw::c_ulonglong,
    pub id: ::std::os::raw::c_uint,
    pub difflist_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_session_header() {
    assert_eq!(
        ::std::mem::size_of::<r_session_header>(),
        16usize,
        concat!("Size of: ", stringify!(r_session_header))
    );
    assert_eq!(
        ::std::mem::align_of::<r_session_header>(),
        8usize,
        concat!("Alignment of ", stringify!(r_session_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_session_header>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_session_header),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_session_header>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_session_header),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_session_header>())).difflist_len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_session_header),
            "::",
            stringify!(difflist_len)
        )
    );
}
pub type RSessionHeader = r_session_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_diff_entry {
    pub base_idx: ::std::os::raw::c_uint,
    pub pages_len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_r_diff_entry() {
    assert_eq!(
        ::std::mem::size_of::<r_diff_entry>(),
        8usize,
        concat!("Size of: ", stringify!(r_diff_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<r_diff_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(r_diff_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_entry>())).base_idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_entry),
            "::",
            stringify!(base_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_diff_entry>())).pages_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_diff_entry),
            "::",
            stringify!(pages_len)
        )
    );
}
pub type RDiffEntry = r_diff_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_snap_entry {
    pub addr: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_uint,
    pub timestamp: ::std::os::raw::c_ulonglong,
    pub perm: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_snap_entry() {
    assert_eq!(
        ::std::mem::size_of::<r_snap_entry>(),
        32usize,
        concat!("Size of: ", stringify!(r_snap_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<r_snap_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(r_snap_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_snap_entry>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_snap_entry),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_snap_entry>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_snap_entry),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_snap_entry>())).timestamp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_snap_entry),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_snap_entry>())).perm as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_snap_entry),
            "::",
            stringify!(perm)
        )
    );
}
pub type RSnapEntry = r_snap_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_trace_t {
    pub traces: *mut RList,
    pub count: ::std::os::raw::c_int,
    pub enabled: ::std::os::raw::c_int,
    pub tag: ::std::os::raw::c_int,
    pub dup: ::std::os::raw::c_int,
    pub addresses: *mut ::std::os::raw::c_char,
    pub ht: *mut HtPP,
}
#[test]
fn bindgen_test_layout_r_debug_trace_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_trace_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_debug_trace_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_trace_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_trace_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_trace_t>())).traces as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_trace_t),
            "::",
            stringify!(traces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_trace_t>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_trace_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_trace_t>())).enabled as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_trace_t),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_trace_t>())).tag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_trace_t),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_trace_t>())).dup as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_trace_t),
            "::",
            stringify!(dup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_trace_t>())).addresses as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_trace_t),
            "::",
            stringify!(addresses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_trace_t>())).ht as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_trace_t),
            "::",
            stringify!(ht)
        )
    );
}
pub type RDebugTrace = r_debug_trace_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_tracepoint_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub tags: ::std::os::raw::c_ulonglong,
    pub tag: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub times: ::std::os::raw::c_int,
    pub stamp: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_debug_tracepoint_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_tracepoint_t>(),
        40usize,
        concat!("Size of: ", stringify!(r_debug_tracepoint_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_tracepoint_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_tracepoint_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_tracepoint_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_tracepoint_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_tracepoint_t>())).tags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_tracepoint_t),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_tracepoint_t>())).tag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_tracepoint_t),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_tracepoint_t>())).size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_tracepoint_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_tracepoint_t>())).count as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_tracepoint_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_tracepoint_t>())).times as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_tracepoint_t),
            "::",
            stringify!(times)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_tracepoint_t>())).stamp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_tracepoint_t),
            "::",
            stringify!(stamp)
        )
    );
}
pub type RDebugTracepoint = r_debug_tracepoint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_t {
    pub arch: *mut ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_int,
    #[doc = " XXX: MUST SET ///"]
    pub hitinfo: ::std::os::raw::c_int,
    pub main_pid: ::std::os::raw::c_int,
    pub pid: ::std::os::raw::c_int,
    pub tid: ::std::os::raw::c_int,
    pub forked_pid: ::std::os::raw::c_int,
    pub n_threads: ::std::os::raw::c_int,
    pub threads: *mut RList,
    pub malloc: *mut ::std::os::raw::c_char,
    pub bpsize: ::std::os::raw::c_int,
    pub btalgo: *mut ::std::os::raw::c_char,
    pub btdepth: ::std::os::raw::c_int,
    pub regcols: ::std::os::raw::c_int,
    pub swstep: ::std::os::raw::c_int,
    pub stop_all_threads: ::std::os::raw::c_int,
    pub trace_forks: ::std::os::raw::c_int,
    pub trace_execs: ::std::os::raw::c_int,
    pub trace_aftersyscall: ::std::os::raw::c_int,
    pub trace_clone: ::std::os::raw::c_int,
    pub follow_child: ::std::os::raw::c_int,
    pub glob_libs: *mut ::std::os::raw::c_char,
    pub glob_unlibs: *mut ::std::os::raw::c_char,
    pub consbreak: bool,
    pub continue_all_threads: bool,
    pub steps: ::std::os::raw::c_int,
    pub reason: RDebugReason,
    pub recoil_mode: RDebugRecoilMode,
    pub stopaddr: ::std::os::raw::c_ulonglong,
    pub trace: *mut RDebugTrace,
    pub tracenodes: *mut Sdb,
    pub tree: *mut RTree,
    pub call_frames: *mut RList,
    pub reg: *mut RReg,
    pub q_regs: *mut RList,
    pub creg: *const ::std::os::raw::c_char,
    pub bp: *mut RBreakpoint,
    pub user: *mut ::std::os::raw::c_void,
    pub snap_path: *mut ::std::os::raw::c_char,
    pub cb_printf: PrintfCallback,
    pub iob: RIOBind,
    pub h: *mut r_debug_plugin_t,
    pub plugins: *mut RList,
    pub pc_at_bp: bool,
    pub pc_at_bp_set: bool,
    pub ev: *mut REvent,
    pub anal: *mut RAnal,
    pub maps: *mut RList,
    pub maps_user: *mut RList,
    pub trace_continue: bool,
    pub cur_op: *mut RAnalOp,
    pub session: *mut RDebugSession,
    pub sgnls: *mut Sdb,
    pub corebind: RCoreBind,
    pub pj: *mut PJ,
    pub _mode: ::std::os::raw::c_int,
    pub num: *mut RNum,
    pub egg: *mut REgg,
    pub verbose: bool,
    pub maxsnapsize: size_t,
    pub main_arena_resolved: bool,
    pub glibc_version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_debug_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_t>(),
        840usize,
        concat!("Size of: ", stringify!(r_debug_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).arch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).bits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).hitinfo as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(hitinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).main_pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(main_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).pid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).tid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).forked_pid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(forked_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).n_threads as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(n_threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).threads as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).malloc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(malloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).bpsize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(bpsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).btalgo as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(btalgo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).btdepth as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(btdepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).regcols as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(regcols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).swstep as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(swstep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).stop_all_threads as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(stop_all_threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).trace_forks as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(trace_forks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).trace_execs as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(trace_execs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).trace_aftersyscall as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(trace_aftersyscall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).trace_clone as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(trace_clone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).follow_child as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(follow_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).glob_libs as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(glob_libs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).glob_unlibs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(glob_unlibs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).consbreak as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(consbreak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).continue_all_threads as *const _ as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(continue_all_threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).steps as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).reason as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).recoil_mode as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(recoil_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).stopaddr as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(stopaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).trace as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(trace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).tracenodes as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(tracenodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).tree as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).call_frames as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(call_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).reg as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).q_regs as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(q_regs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).creg as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(creg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).bp as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(bp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).user as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).snap_path as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(snap_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).cb_printf as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).iob as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(iob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).h as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).plugins as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).pc_at_bp as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(pc_at_bp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).pc_at_bp_set as *const _ as usize },
        569usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(pc_at_bp_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).ev as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(ev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).anal as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(anal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).maps as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(maps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).maps_user as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(maps_user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).trace_continue as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(trace_continue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).cur_op as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(cur_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).session as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).sgnls as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(sgnls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).corebind as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(corebind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).pj as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(pj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>()))._mode as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).num as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).egg as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(egg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).verbose as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).maxsnapsize as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(maxsnapsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).main_arena_resolved as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(main_arena_resolved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_t>())).glibc_version as *const _ as usize },
        836usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_t),
            "::",
            stringify!(glibc_version)
        )
    );
}
pub type RDebug = r_debug_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_desc_plugin_t {
    pub open: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            addr: ::std::os::raw::c_ulonglong,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            addr: ::std::os::raw::c_ulonglong,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            addr: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
    >,
    pub dup: ::std::option::Option<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            newfd: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub list: ::std::option::Option<unsafe extern "C" fn(pid: ::std::os::raw::c_int) -> *mut RList>,
}
#[test]
fn bindgen_test_layout_r_debug_desc_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_desc_plugin_t>(),
        56usize,
        concat!("Size of: ", stringify!(r_debug_desc_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_desc_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_desc_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_plugin_t>())).open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_plugin_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_plugin_t>())).close as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_plugin_t),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_plugin_t>())).read as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_plugin_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_plugin_t>())).write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_plugin_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_plugin_t>())).seek as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_plugin_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_plugin_t>())).dup as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_plugin_t),
            "::",
            stringify!(dup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_desc_plugin_t>())).list as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_desc_plugin_t),
            "::",
            stringify!(list)
        )
    );
}
pub type RDebugDescPlugin = r_debug_desc_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_info_t {
    pub pid: ::std::os::raw::c_int,
    pub tid: ::std::os::raw::c_int,
    pub uid: ::std::os::raw::c_int,
    pub gid: ::std::os::raw::c_int,
    pub usr: *mut ::std::os::raw::c_char,
    pub exe: *mut ::std::os::raw::c_char,
    pub cmdline: *mut ::std::os::raw::c_char,
    pub libname: *mut ::std::os::raw::c_char,
    pub cwd: *mut ::std::os::raw::c_char,
    pub status: ::std::os::raw::c_int,
    pub signum: ::std::os::raw::c_int,
    pub lib: *mut ::std::os::raw::c_void,
    pub thread: *mut ::std::os::raw::c_void,
    pub kernel_stack: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_debug_info_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_info_t>(),
        88usize,
        concat!("Size of: ", stringify!(r_debug_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).tid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).uid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).usr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(usr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).exe as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(exe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).cmdline as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(cmdline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).libname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(libname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).cwd as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).status as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).signum as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(signum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).lib as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(lib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).thread as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_info_t>())).kernel_stack as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_info_t),
            "::",
            stringify!(kernel_stack)
        )
    );
}
pub type RDebugInfo = r_debug_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_plugin_t {
    pub name: *const ::std::os::raw::c_char,
    pub license: *const ::std::os::raw::c_char,
    pub author: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub bits: ::std::os::raw::c_uint,
    pub arch: *const ::std::os::raw::c_char,
    pub canstep: ::std::os::raw::c_int,
    pub keepio: ::std::os::raw::c_int,
    pub info: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            arg: *const ::std::os::raw::c_char,
        ) -> *mut RDebugInfo,
    >,
    pub startv: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub attach: ::std::option::Option<
        unsafe extern "C" fn(dbg: *mut RDebug, pid: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub detach: ::std::option::Option<
        unsafe extern "C" fn(dbg: *mut RDebug, pid: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub select: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            pid: ::std::os::raw::c_int,
            tid: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub threads: ::std::option::Option<
        unsafe extern "C" fn(dbg: *mut RDebug, pid: ::std::os::raw::c_int) -> *mut RList,
    >,
    pub pids: ::std::option::Option<
        unsafe extern "C" fn(dbg: *mut RDebug, pid: ::std::os::raw::c_int) -> *mut RList,
    >,
    pub tids: ::std::option::Option<
        unsafe extern "C" fn(dbg: *mut RDebug, pid: ::std::os::raw::c_int) -> *mut RList,
    >,
    pub backtrace: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            count: ::std::os::raw::c_int,
        ) -> *mut *mut ::std::os::raw::c_void,
    >,
    pub stop:
        ::std::option::Option<unsafe extern "C" fn(dbg: *mut RDebug) -> ::std::os::raw::c_int>,
    pub step:
        ::std::option::Option<unsafe extern "C" fn(dbg: *mut RDebug) -> ::std::os::raw::c_int>,
    pub step_over:
        ::std::option::Option<unsafe extern "C" fn(dbg: *mut RDebug) -> ::std::os::raw::c_int>,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            pid: ::std::os::raw::c_int,
            tid: ::std::os::raw::c_int,
            sig: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub wait: ::std::option::Option<
        unsafe extern "C" fn(dbg: *mut RDebug, pid: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub gcore:
        ::std::option::Option<unsafe extern "C" fn(dbg: *mut RDebug, dest: *mut RBuffer) -> bool>,
    pub kill: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            pid: ::std::os::raw::c_int,
            tid: ::std::os::raw::c_int,
            sig: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub kill_list: ::std::option::Option<unsafe extern "C" fn(dbg: *mut RDebug) -> *mut RList>,
    pub contsc: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            pid: ::std::os::raw::c_int,
            sc: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub frames: ::std::option::Option<
        unsafe extern "C" fn(dbg: *mut RDebug, at: ::std::os::raw::c_ulonglong) -> *mut RList,
    >,
    pub breakpoint: RBreakpointCallback,
    pub reg_read: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            type_: ::std::os::raw::c_int,
            buf: *mut ::std::os::raw::c_uchar,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub reg_write: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            type_: ::std::os::raw::c_int,
            buf: *const ::std::os::raw::c_uchar,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub reg_profile: ::std::option::Option<
        unsafe extern "C" fn(dbg: *mut RDebug) -> *mut ::std::os::raw::c_char,
    >,
    pub set_reg_profile: ::std::option::Option<
        unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub map_get: ::std::option::Option<unsafe extern "C" fn(dbg: *mut RDebug) -> *mut RList>,
    pub modules_get: ::std::option::Option<unsafe extern "C" fn(dbg: *mut RDebug) -> *mut RList>,
    pub map_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            addr: ::std::os::raw::c_ulonglong,
            size: ::std::os::raw::c_int,
            thp: bool,
        ) -> *mut RDebugMap,
    >,
    pub map_dealloc: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            addr: ::std::os::raw::c_ulonglong,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub map_protect: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            addr: ::std::os::raw::c_ulonglong,
            size: ::std::os::raw::c_int,
            perms: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub init:
        ::std::option::Option<unsafe extern "C" fn(dbg: *mut RDebug) -> ::std::os::raw::c_int>,
    pub drx: ::std::option::Option<
        unsafe extern "C" fn(
            dbg: *mut RDebug,
            n: ::std::os::raw::c_int,
            addr: ::std::os::raw::c_ulonglong,
            size: ::std::os::raw::c_int,
            rwx: ::std::os::raw::c_int,
            g: ::std::os::raw::c_int,
            api_type: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub desc: RDebugDescPlugin,
}
#[test]
fn bindgen_test_layout_r_debug_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_plugin_t>(),
        360usize,
        concat!("Size of: ", stringify!(r_debug_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).license as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).author as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).version as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).bits as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).arch as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).canstep as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(canstep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).keepio as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(keepio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).info as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).startv as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(startv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).attach as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(attach)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).detach as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(detach)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).select as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(select)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).threads as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).pids as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(pids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).tids as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(tids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).backtrace as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(backtrace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).stop as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).step as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).step_over as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(step_over)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).cont as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).wait as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(wait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).gcore as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(gcore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).kill as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(kill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).kill_list as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(kill_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).contsc as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(contsc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).frames as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).breakpoint as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(breakpoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).reg_read as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(reg_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).reg_write as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(reg_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).reg_profile as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(reg_profile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_debug_plugin_t>())).set_reg_profile as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(set_reg_profile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).map_get as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(map_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).modules_get as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(modules_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).map_alloc as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(map_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).map_dealloc as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(map_dealloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).map_protect as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(map_protect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).init as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).drx as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(drx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_plugin_t>())).desc as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_plugin_t),
            "::",
            stringify!(desc)
        )
    );
}
pub type RDebugPlugin = r_debug_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_debug_pid_t {
    pub pid: ::std::os::raw::c_int,
    pub ppid: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_char,
    pub runnable: ::std::os::raw::c_int,
    pub signalled: bool,
    pub path: *mut ::std::os::raw::c_char,
    pub uid: ::std::os::raw::c_int,
    pub gid: ::std::os::raw::c_int,
    pub pc: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_debug_pid_t() {
    assert_eq!(
        ::std::mem::size_of::<r_debug_pid_t>(),
        48usize,
        concat!("Size of: ", stringify!(r_debug_pid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_debug_pid_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_debug_pid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_pid_t>())).pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_pid_t),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_pid_t>())).ppid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_pid_t),
            "::",
            stringify!(ppid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_pid_t>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_pid_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_pid_t>())).runnable as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_pid_t),
            "::",
            stringify!(runnable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_pid_t>())).signalled as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_pid_t),
            "::",
            stringify!(signalled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_pid_t>())).path as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_pid_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_pid_t>())).uid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_pid_t),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_pid_t>())).gid as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_pid_t),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_debug_pid_t>())).pc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_debug_pid_t),
            "::",
            stringify!(pc)
        )
    );
}
pub type RDebugPid = r_debug_pid_t;
extern "C" {
    pub fn r_debug_new(hard: ::std::os::raw::c_int) -> *mut RDebug;
}
extern "C" {
    pub fn r_debug_free(dbg: *mut RDebug);
}
extern "C" {
    pub fn r_debug_attach(dbg: *mut RDebug, pid: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_debug_detach(dbg: *mut RDebug, pid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_startv(
        dbg: *mut RDebug,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_start(
        dbg: *mut RDebug,
        cmd: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_stop_reason(dbg: *mut RDebug) -> RDebugReasonType;
}
extern "C" {
    pub fn r_debug_reason_to_string(type_: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_debug_wait(dbg: *mut RDebug, bp: *mut *mut RBreakpointItem) -> RDebugReasonType;
}
extern "C" {
    pub fn r_debug_step(dbg: *mut RDebug, steps: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_step_over(
        dbg: *mut RDebug,
        steps: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_continue_until(
        dbg: *mut RDebug,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_continue_until_nonblock(
        dbg: *mut RDebug,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_continue_until_optype(
        dbg: *mut RDebug,
        type_: ::std::os::raw::c_int,
        over: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_continue_until_nontraced(dbg: *mut RDebug) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_continue_syscall(
        dbg: *mut RDebug,
        sc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_continue_syscalls(
        dbg: *mut RDebug,
        sc: *mut ::std::os::raw::c_int,
        n_sc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_continue(dbg: *mut RDebug) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_continue_kill(
        dbg: *mut RDebug,
        signal: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_select(
        dbg: *mut RDebug,
        pid: ::std::os::raw::c_int,
        tid: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_debug_pid_list(
        dbg: *mut RDebug,
        pid: ::std::os::raw::c_int,
        fmt: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_pid_new(
        path: *const ::std::os::raw::c_char,
        pid: ::std::os::raw::c_int,
        uid: ::std::os::raw::c_int,
        status: ::std::os::raw::c_char,
        pc: ::std::os::raw::c_ulonglong,
    ) -> *mut RDebugPid;
}
extern "C" {
    pub fn r_debug_pid_free(pid: *mut RDebugPid) -> *mut RDebugPid;
}
extern "C" {
    pub fn r_debug_pids(dbg: *mut RDebug, pid: ::std::os::raw::c_int) -> *mut RList;
}
extern "C" {
    pub fn r_debug_set_arch(
        dbg: *mut RDebug,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_debug_use(dbg: *mut RDebug, str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_debug_info(dbg: *mut RDebug, arg: *const ::std::os::raw::c_char) -> *mut RDebugInfo;
}
extern "C" {
    pub fn r_debug_info_free(rdi: *mut RDebugInfo);
}
extern "C" {
    pub fn r_debug_get_baddr(
        dbg: *mut RDebug,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_debug_signal_init(dbg: *mut RDebug);
}
extern "C" {
    pub fn r_debug_signal_send(
        dbg: *mut RDebug,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_signal_what(
        dbg: *mut RDebug,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_signal_resolve(
        dbg: *mut RDebug,
        signame: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_signal_resolve_i(
        dbg: *mut RDebug,
        signum: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_debug_signal_setup(
        dbg: *mut RDebug,
        num: ::std::os::raw::c_int,
        opt: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_debug_signal_set(
        dbg: *mut RDebug,
        num: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_signal_list(dbg: *mut RDebug, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_debug_kill(
        dbg: *mut RDebug,
        pid: ::std::os::raw::c_int,
        tid: ::std::os::raw::c_int,
        sig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_kill_list(dbg: *mut RDebug) -> *mut RList;
}
extern "C" {
    pub fn r_debug_kill_setup(
        dbg: *mut RDebug,
        sig: ::std::os::raw::c_int,
        action: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_plugin_init(dbg: *mut RDebug);
}
extern "C" {
    pub fn r_debug_plugin_set(
        dbg: *mut RDebug,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_plugin_list(dbg: *mut RDebug, mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_debug_plugin_add(dbg: *mut RDebug, foo: *mut RDebugPlugin) -> bool;
}
extern "C" {
    pub fn r_debug_plugin_set_reg_profile(
        dbg: *mut RDebug,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_debug_modules_list(arg1: *mut RDebug) -> *mut RList;
}
extern "C" {
    pub fn r_debug_map_alloc(
        dbg: *mut RDebug,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        thp: bool,
    ) -> *mut RDebugMap;
}
extern "C" {
    pub fn r_debug_map_dealloc(dbg: *mut RDebug, map: *mut RDebugMap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_map_list_new() -> *mut RList;
}
extern "C" {
    pub fn r_debug_map_get(dbg: *mut RDebug, addr: ::std::os::raw::c_ulonglong) -> *mut RDebugMap;
}
extern "C" {
    pub fn r_debug_map_new(
        name: *mut ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
        addr_end: ::std::os::raw::c_ulonglong,
        perm: ::std::os::raw::c_int,
        user: ::std::os::raw::c_int,
    ) -> *mut RDebugMap;
}
extern "C" {
    pub fn r_debug_map_free(map: *mut RDebugMap);
}
extern "C" {
    pub fn r_debug_map_list(
        dbg: *mut RDebug,
        addr: ::std::os::raw::c_ulonglong,
        input: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_debug_map_list_visual(
        dbg: *mut RDebug,
        addr: ::std::os::raw::c_ulonglong,
        input: *const ::std::os::raw::c_char,
        colors: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_debug_desc_new(
        fd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        perm: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        off: ::std::os::raw::c_int,
    ) -> *mut RDebugDesc;
}
extern "C" {
    pub fn r_debug_desc_free(p: *mut RDebugDesc);
}
extern "C" {
    pub fn r_debug_desc_open(
        dbg: *mut RDebug,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_desc_close(dbg: *mut RDebug, fd: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_desc_dup(
        dbg: *mut RDebug,
        fd: ::std::os::raw::c_int,
        newfd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_desc_read(
        dbg: *mut RDebug,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_desc_seek(
        dbg: *mut RDebug,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_desc_write(
        dbg: *mut RDebug,
        fd: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_desc_list(dbg: *mut RDebug, rad: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_reg_sync(
        dbg: *mut RDebug,
        type_: ::std::os::raw::c_int,
        write: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_reg_list(
        dbg: *mut RDebug,
        type_: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        pj: *mut PJ,
        rad: ::std::os::raw::c_int,
        use_color: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_debug_reg_set(
        dbg: *mut RDebug,
        name: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_reg_get(
        dbg: *mut RDebug,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_debug_reg_get_err(
        dbg: *mut RDebug,
        name: *const ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_int,
        value: *mut utX,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_debug_execute(
        dbg: *mut RDebug,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        restore: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_debug_map_sync(dbg: *mut RDebug) -> bool;
}
extern "C" {
    pub fn r_debug_stop(dbg: *mut RDebug) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_frames(dbg: *mut RDebug, at: ::std::os::raw::c_ulonglong) -> *mut RList;
}
extern "C" {
    pub fn r_debug_is_dead(dbg: *mut RDebug) -> bool;
}
extern "C" {
    pub fn r_debug_map_protect(
        dbg: *mut RDebug,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        perms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_arg_get(
        dbg: *mut RDebug,
        cc: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_debug_arg_set(
        dbg: *mut RDebug,
        cc: *const ::std::os::raw::c_char,
        num: ::std::os::raw::c_int,
        value: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_debug_bp_add(
        dbg: *mut RDebug,
        addr: ::std::os::raw::c_ulonglong,
        hw: ::std::os::raw::c_int,
        watch: bool,
        rw: ::std::os::raw::c_int,
        module: *mut ::std::os::raw::c_char,
        m_delta: ::std::os::raw::c_longlong,
    ) -> *mut RBreakpointItem;
}
extern "C" {
    pub fn r_debug_bp_rebase(
        dbg: *mut RDebug,
        old_base: ::std::os::raw::c_ulonglong,
        new_base: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_debug_bp_update(dbg: *mut RDebug);
}
extern "C" {
    pub fn r_debug_thread_list(
        dbg: *mut RDebug,
        pid: ::std::os::raw::c_int,
        fmt: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_tracenodes_reset(dbg: *mut RDebug);
}
extern "C" {
    pub fn r_debug_trace_reset(dbg: *mut RDebug);
}
extern "C" {
    pub fn r_debug_trace_pc(
        dbg: *mut RDebug,
        pc: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_trace_op(dbg: *mut RDebug, op: *mut RAnalOp);
}
extern "C" {
    pub fn r_debug_trace_at(dbg: *mut RDebug, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_debug_trace_get(
        dbg: *mut RDebug,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RDebugTracepoint;
}
extern "C" {
    pub fn r_debug_trace_list(
        dbg: *mut RDebug,
        mode: ::std::os::raw::c_int,
        offset: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_debug_trace_add(
        dbg: *mut RDebug,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
    ) -> *mut RDebugTracepoint;
}
extern "C" {
    pub fn r_debug_trace_new() -> *mut RDebugTrace;
}
extern "C" {
    pub fn r_debug_trace_free(dbg: *mut RDebugTrace);
}
extern "C" {
    pub fn r_debug_trace_tag(dbg: *mut RDebug, tag: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_child_fork(dbg: *mut RDebug) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_child_clone(dbg: *mut RDebug) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_drx_list(dbg: *mut RDebug);
}
extern "C" {
    pub fn r_debug_drx_set(
        dbg: *mut RDebug,
        idx: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
        rwx: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_drx_unset(dbg: *mut RDebug, idx: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_num_callback(
        userptr: *mut RNum,
        str_: *const ::std::os::raw::c_char,
        ok: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_debug_esil_stepi(dbg: *mut RDebug) -> bool;
}
extern "C" {
    pub fn r_debug_esil_step(
        dbg: *mut RDebug,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_debug_esil_continue(dbg: *mut RDebug) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_debug_esil_watch(
        dbg: *mut RDebug,
        rwx: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        expr: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_debug_esil_watch_reset(dbg: *mut RDebug);
}
extern "C" {
    pub fn r_debug_esil_watch_list(dbg: *mut RDebug);
}
extern "C" {
    pub fn r_debug_esil_watch_empty(dbg: *mut RDebug) -> bool;
}
extern "C" {
    pub fn r_debug_esil_prestep(d: *mut RDebug, p: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_debug_add_checkpoint(dbg: *mut RDebug) -> bool;
}
extern "C" {
    pub fn r_debug_session_add_reg_change(
        session: *mut RDebugSession,
        arena: ::std::os::raw::c_int,
        offset: ::std::os::raw::c_ulonglong,
        data: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_debug_session_add_mem_change(
        session: *mut RDebugSession,
        addr: ::std::os::raw::c_ulonglong,
        data: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn r_debug_session_restore_reg_mem(dbg: *mut RDebug, cnum: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn r_debug_session_list_memory(dbg: *mut RDebug);
}
extern "C" {
    pub fn r_debug_session_serialize(session: *mut RDebugSession, db: *mut Sdb);
}
extern "C" {
    pub fn r_debug_session_deserialize(session: *mut RDebugSession, db: *mut Sdb);
}
extern "C" {
    pub fn r_debug_session_save(
        session: *mut RDebugSession,
        file: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_debug_session_load(dbg: *mut RDebug, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_debug_trace_ins_before(dbg: *mut RDebug) -> bool;
}
extern "C" {
    pub fn r_debug_trace_ins_after(dbg: *mut RDebug) -> bool;
}
extern "C" {
    pub fn r_debug_session_new() -> *mut RDebugSession;
}
extern "C" {
    pub fn r_debug_session_free(session: *mut RDebugSession);
}
extern "C" {
    pub fn r_debug_snap_map(dbg: *mut RDebug, map: *mut RDebugMap) -> *mut RDebugSnap;
}
extern "C" {
    pub fn r_debug_snap_contains(snap: *mut RDebugSnap, addr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_debug_snap_get_hash(snap: *mut RDebugSnap) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_debug_snap_is_equal(a: *mut RDebugSnap, b: *mut RDebugSnap) -> bool;
}
extern "C" {
    pub fn r_debug_snap_free(snap: *mut RDebugSnap);
}
extern "C" {
    pub fn r_debug_step_back(
        dbg: *mut RDebug,
        steps: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_goto_cnum(dbg: *mut RDebug, cnum: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_debug_step_cnum(
        dbg: *mut RDebug,
        steps: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_debug_continue_back(dbg: *mut RDebug) -> bool;
}
extern "C" {
    pub static mut r_debug_plugin_native: RDebugPlugin;
}
extern "C" {
    pub static mut r_debug_plugin_esil: RDebugPlugin;
}
extern "C" {
    pub static mut r_debug_plugin_rap: RDebugPlugin;
}
extern "C" {
    pub static mut r_debug_plugin_gdb: RDebugPlugin;
}
extern "C" {
    pub static mut r_debug_plugin_bf: RDebugPlugin;
}
extern "C" {
    pub static mut r_debug_plugin_io: RDebugPlugin;
}
extern "C" {
    pub static mut r_debug_plugin_winkd: RDebugPlugin;
}
extern "C" {
    pub static mut r_debug_plugin_windbg: RDebugPlugin;
}
extern "C" {
    pub static mut r_debug_plugin_bochs: RDebugPlugin;
}
extern "C" {
    pub static mut r_debug_plugin_qnx: RDebugPlugin;
}
extern "C" {
    pub static mut r_debug_plugin_null: RDebugPlugin;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBraile {
    pub str_: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_RBraile() {
    assert_eq!(
        ::std::mem::size_of::<RBraile>(),
        4usize,
        concat!("Size of: ", stringify!(RBraile))
    );
    assert_eq!(
        ::std::mem::align_of::<RBraile>(),
        1usize,
        concat!("Alignment of ", stringify!(RBraile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBraile>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RBraile),
            "::",
            stringify!(str_)
        )
    );
}
extern "C" {
    pub fn r_print_braile(u: ::std::os::raw::c_int) -> RBraile;
}
pub type RPrintZoomCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        bufz: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int,
>;
pub type RPrintNameCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RPrintSizeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int,
>;
pub type RPrintCommentCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type RPrintSectionGet = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RPrintColorFor = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
        verbose: bool,
    ) -> *const ::std::os::raw::c_char,
>;
pub type RPrintHasRefs = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_print_zoom_t {
    pub buf: *mut ::std::os::raw::c_uchar,
    pub from: ::std::os::raw::c_ulonglong,
    pub to: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_print_zoom_t() {
    assert_eq!(
        ::std::mem::size_of::<r_print_zoom_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_print_zoom_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_print_zoom_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_print_zoom_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_zoom_t>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_zoom_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_zoom_t>())).from as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_zoom_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_zoom_t>())).to as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_zoom_t),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_zoom_t>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_zoom_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_zoom_t>())).mode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_zoom_t),
            "::",
            stringify!(mode)
        )
    );
}
pub type RPrintZoom = r_print_zoom_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_print_t {
    pub user: *mut ::std::os::raw::c_void,
    pub iob: RIOBind,
    pub pava: bool,
    pub coreb: RCoreBind,
    pub cfmt: *const ::std::os::raw::c_char,
    pub datefmt: [::std::os::raw::c_char; 32usize],
    pub datezone: ::std::os::raw::c_int,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub cb_printf: PrintfCallback,
    pub cb_eprintf: PrintfCallback,
    pub cb_color: ::std::option::Option<
        unsafe extern "C" fn(
            idx: ::std::os::raw::c_int,
            last: ::std::os::raw::c_int,
            bg: bool,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub scr_prompt: bool,
    pub disasm: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            addr: ::std::os::raw::c_ulonglong,
        ) -> ::std::os::raw::c_int,
    >,
    pub oprintf: PrintfCallback,
    pub big_endian: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub limit: ::std::os::raw::c_int,
    pub bits: ::std::os::raw::c_int,
    pub histblock: bool,
    pub cur_enabled: bool,
    pub cur: ::std::os::raw::c_int,
    pub ocur: ::std::os::raw::c_int,
    pub cols: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub seggrn: ::std::os::raw::c_int,
    pub use_comments: bool,
    pub addrmod: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
    pub stride: ::std::os::raw::c_int,
    pub bytespace: ::std::os::raw::c_int,
    pub pairs: ::std::os::raw::c_int,
    pub resetbg: bool,
    pub zoom: *mut RPrintZoom,
    pub offname: RPrintNameCallback,
    pub offsize: RPrintSizeCallback,
    pub colorfor: RPrintColorFor,
    pub hasrefs: RPrintHasRefs,
    pub get_comments: RPrintCommentCallback,
    pub get_section_name: RPrintSectionGet,
    pub formats: *mut Sdb,
    pub sdb_types: *mut Sdb,
    pub cons: *mut RCons,
    pub consbind: RConsBind,
    pub num: *mut RNum,
    pub reg: *mut RReg,
    pub get_register: ::std::option::Option<
        unsafe extern "C" fn(
            reg: *mut RReg,
            name: *const ::std::os::raw::c_char,
            type_: ::std::os::raw::c_int,
        ) -> *mut RRegItem,
    >,
    pub get_register_value: ::std::option::Option<
        unsafe extern "C" fn(reg: *mut RReg, item: *mut RRegItem) -> ::std::os::raw::c_ulonglong,
    >,
    pub exists_var: ::std::option::Option<
        unsafe extern "C" fn(
            print: *mut r_print_t,
            func_addr: ::std::os::raw::c_ulonglong,
            str_: *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub lines_cache: *mut ::std::os::raw::c_ulonglong,
    pub lines_cache_sz: ::std::os::raw::c_int,
    pub lines_abs: ::std::os::raw::c_int,
    pub esc_bslash: bool,
    pub wide_offsets: bool,
    pub strconv_mode: *const ::std::os::raw::c_char,
    pub vars: *mut RList,
    pub io_unalloc_ch: ::std::os::raw::c_char,
    pub show_offset: bool,
    pub calc_row_offsets: bool,
    pub row_offsets: *mut ::std::os::raw::c_uint,
    pub row_offsets_sz: ::std::os::raw::c_int,
    pub vflush: bool,
    pub screen_bounds: ::std::os::raw::c_ulonglong,
    pub enable_progressbar: bool,
    pub charset: *mut RCharset,
}
#[test]
fn bindgen_test_layout_r_print_t() {
    assert_eq!(
        ::std::mem::size_of::<r_print_t>(),
        856usize,
        concat!("Size of: ", stringify!(r_print_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_print_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_print_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).user as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).iob as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(iob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).pava as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(pava)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).coreb as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(coreb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).cfmt as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(cfmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).datefmt as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(datefmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).datezone as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(datezone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).write as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).cb_printf as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(cb_printf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).cb_eprintf as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(cb_eprintf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).cb_color as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(cb_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).scr_prompt as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(scr_prompt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).disasm as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(disasm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).oprintf as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(oprintf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).big_endian as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(big_endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).width as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).limit as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).bits as *const _ as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).histblock as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(histblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).cur_enabled as *const _ as usize },
        545usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(cur_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).cur as *const _ as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).ocur as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(ocur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).cols as *const _ as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).flags as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).seggrn as *const _ as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(seggrn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).use_comments as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(use_comments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).addrmod as *const _ as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(addrmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).col as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).stride as *const _ as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).bytespace as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(bytespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).pairs as *const _ as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(pairs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).resetbg as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(resetbg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).zoom as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(zoom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).offname as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(offname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).offsize as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(offsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).colorfor as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(colorfor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).hasrefs as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(hasrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).get_comments as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(get_comments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).get_section_name as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(get_section_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).formats as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(formats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).sdb_types as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(sdb_types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).cons as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(cons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).consbind as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(consbind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).num as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).reg as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).get_register as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(get_register)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).get_register_value as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(get_register_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).exists_var as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(exists_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).lines_cache as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(lines_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).lines_cache_sz as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(lines_cache_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).lines_abs as *const _ as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(lines_abs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).esc_bslash as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(esc_bslash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).wide_offsets as *const _ as usize },
        785usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(wide_offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).strconv_mode as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(strconv_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).vars as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).io_unalloc_ch as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(io_unalloc_ch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).show_offset as *const _ as usize },
        809usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(show_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).calc_row_offsets as *const _ as usize },
        810usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(calc_row_offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).row_offsets as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(row_offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).row_offsets_sz as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(row_offsets_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).vflush as *const _ as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(vflush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).screen_bounds as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(screen_bounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).enable_progressbar as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(enable_progressbar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_print_t>())).charset as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(r_print_t),
            "::",
            stringify!(charset)
        )
    );
}
pub type RPrint = r_print_t;
pub type RPrintIsInterruptedCallback = ::std::option::Option<unsafe extern "C" fn() -> bool>;
extern "C" {
    pub fn r_print_is_interrupted() -> bool;
}
extern "C" {
    pub fn r_print_set_is_interrupted_cb(cb: RPrintIsInterruptedCallback);
}
extern "C" {
    pub fn r_print_hexpair(
        p: *mut RPrint,
        str_: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_hex_from_bin(p: *mut RPrint, bin_str: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_print_new() -> *mut RPrint;
}
extern "C" {
    pub fn r_print_free(p: *mut RPrint) -> *mut RPrint;
}
extern "C" {
    pub fn r_print_mute(p: *mut RPrint, x: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn r_print_set_flags(p: *mut RPrint, _flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_print_unset_flags(p: *mut RPrint, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_print_addr(p: *mut RPrint, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_print_section(p: *mut RPrint, at: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_print_columns(
        p: *mut RPrint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_hexii(
        p: *mut RPrint,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_hexdump(
        p: *mut RPrint,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        base: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        zoomsz: size_t,
    );
}
extern "C" {
    pub fn r_print_hexdump_simple(buf: *const ::std::os::raw::c_uchar, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_print_jsondump(
        p: *mut RPrint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        wordsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_hexpairs(
        p: *mut RPrint,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_hexdiff(
        p: *mut RPrint,
        aa: ::std::os::raw::c_ulonglong,
        a: *const ::std::os::raw::c_uchar,
        ba: ::std::os::raw::c_ulonglong,
        b: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        scndcol: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_bytes(
        p: *mut RPrint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_print_fill(
        p: *mut RPrint,
        arr: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
        addr: ::std::os::raw::c_ulonglong,
        step: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_byte(
        p: *mut RPrint,
        fmt: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
        ch: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn r_print_byte_color(
        p: *mut RPrint,
        ch: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_c(
        p: *mut RPrint,
        str_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_raw(
        p: *mut RPrint,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        offlines: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_have_cursor(
        p: *mut RPrint,
        cur: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_print_cursor_pointer(
        p: *mut RPrint,
        cur: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_print_cursor(
        p: *mut RPrint,
        cur: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        set: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_cursor_range(
        p: *mut RPrint,
        cur: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
        set: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_get_cursor(p: *mut RPrint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_set_cursor(
        p: *mut RPrint,
        curset: ::std::os::raw::c_int,
        ocursor: ::std::os::raw::c_int,
        cursor: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_code(
        p: *mut RPrint,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        lang: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_print_format_struct_size(
        p: *mut RPrint,
        format: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_format(
        p: *mut RPrint,
        seek: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        elem: ::std::os::raw::c_int,
        setval: *const ::std::os::raw::c_char,
        field: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_format_byname(
        p: *mut RPrint,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_offset(
        p: *mut RPrint,
        off: ::std::os::raw::c_ulonglong,
        invert: ::std::os::raw::c_int,
        opt: ::std::os::raw::c_int,
        dec: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_int,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_print_offset_sg(
        p: *mut RPrint,
        off: ::std::os::raw::c_ulonglong,
        invert: ::std::os::raw::c_int,
        offseg: ::std::os::raw::c_int,
        seggrn: ::std::os::raw::c_int,
        offdec: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_int,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_print_string(
        p: *mut RPrint,
        seek: ::std::os::raw::c_ulonglong,
        str_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_date_dos(
        p: *mut RPrint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_date_hfs(
        p: *mut RPrint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_date_w32(
        p: *mut RPrint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_date_unix(
        p: *mut RPrint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_date_get_now(
        p: *mut RPrint,
        str_: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_zoom(
        p: *mut RPrint,
        user: *mut ::std::os::raw::c_void,
        cb: RPrintZoomCallback,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_zoom_buf(
        p: *mut RPrint,
        user: *mut ::std::os::raw::c_void,
        cb: RPrintZoomCallback,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_progressbar(
        pr: *mut RPrint,
        pc: ::std::os::raw::c_int,
        _cols: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_progressbar_with_count(
        pr: *mut RPrint,
        pc: ::std::os::raw::c_uint,
        total: ::std::os::raw::c_uint,
        _cols: ::std::os::raw::c_int,
        reset_line: bool,
    );
}
extern "C" {
    pub fn r_print_portionbar(
        p: *mut RPrint,
        portions: *const ::std::os::raw::c_ulonglong,
        n_portions: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_rangebar(
        p: *mut RPrint,
        startA: ::std::os::raw::c_ulonglong,
        endA: ::std::os::raw::c_ulonglong,
        min: ::std::os::raw::c_ulonglong,
        max: ::std::os::raw::c_ulonglong,
        cols: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_print_randomart(
        dgst_raw: *const ::std::os::raw::c_uchar,
        dgst_raw_len: ::std::os::raw::c_uint,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_2bpp_row(
        p: *mut RPrint,
        buf: *mut ::std::os::raw::c_uchar,
        colors: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_print_2bpp_tiles(
        p: *mut RPrint,
        buf: *mut ::std::os::raw::c_uchar,
        buflen: size_t,
        tiles: ::std::os::raw::c_uint,
        colors: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_print_colorize_opcode(
        print: *mut RPrint,
        p: *mut ::std::os::raw::c_char,
        reg: *const ::std::os::raw::c_char,
        num: *const ::std::os::raw::c_char,
        partial_reset: bool,
        func_addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_color_op_type(
        p: *mut RPrint,
        anal_type: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_set_interrupted(i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_print_init_rowoffsets(p: *mut RPrint);
}
extern "C" {
    pub fn r_print_rowoff(p: *mut RPrint, i: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn r_print_set_rowoff(
        p: *mut RPrint,
        i: ::std::os::raw::c_int,
        offset: ::std::os::raw::c_uint,
        overwrite: bool,
    );
}
extern "C" {
    pub fn r_print_row_at_off(
        p: *mut RPrint,
        offset: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_pie(
        p: *mut RPrint,
        values: *mut ::std::os::raw::c_ulonglong,
        nvalues: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_rowlog(
        print: *mut RPrint,
        str_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_rowlog_done(print: *mut RPrint, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_print_graphline(print: *mut RPrint, buf: *const ::std::os::raw::c_uchar, len: size_t);
}
extern "C" {
    pub fn r_print_unpack7bit(
        src: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_pack7bit(
        src: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_stereogram_bytes(
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_stereogram(
        bump: *const ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_stereogram_print(p: *mut RPrint, buf: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_print_set_screenbounds(p: *mut RPrint, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_util_lines_getline(
        lines_cache: *mut ::std::os::raw::c_ulonglong,
        lines_cache_sz: ::std::os::raw::c_int,
        off: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_print_json_indent(
        s: *const ::std::os::raw::c_char,
        color: bool,
        tab: *const ::std::os::raw::c_char,
        colors: *mut *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_json_human(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_print_json_path(
        s: *const ::std::os::raw::c_char,
        pos: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct des_context_t {
    pub round_key_lo: [::std::os::raw::c_uint; 16usize],
    pub round_key_hi: [::std::os::raw::c_uint; 16usize],
    pub round: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_des_context_t() {
    assert_eq!(
        ::std::mem::size_of::<des_context_t>(),
        132usize,
        concat!("Size of: ", stringify!(des_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<des_context_t>(),
        4usize,
        concat!("Alignment of ", stringify!(des_context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<des_context_t>())).round_key_lo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(des_context_t),
            "::",
            stringify!(round_key_lo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<des_context_t>())).round_key_hi as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(des_context_t),
            "::",
            stringify!(round_key_hi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<des_context_t>())).round as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(des_context_t),
            "::",
            stringify!(round)
        )
    );
}
pub type RDESContext = des_context_t;
extern "C" {
    pub fn r_des_permute_key(
        keylo: *mut ::std::os::raw::c_uint,
        keyhi: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn r_des_permute_block0(
        blocklo: *mut ::std::os::raw::c_uint,
        blockhi: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn r_des_permute_block1(
        blocklo: *mut ::std::os::raw::c_uint,
        blockhi: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn r_des_round_key(
        i: ::std::os::raw::c_int,
        keylo: *mut ::std::os::raw::c_uint,
        keyhi: *mut ::std::os::raw::c_uint,
        deskeylo: *mut ::std::os::raw::c_uint,
        deskeyhi: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn r_des_round(
        buflo: *mut ::std::os::raw::c_uint,
        bufhi: *mut ::std::os::raw::c_uint,
        roundkeylo: *mut ::std::os::raw::c_uint,
        roundkeyhi: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn r_crypto_version() -> *const ::std::os::raw::c_char;
}
pub const R_CRYPTO_MODE_ECB: ::std::os::raw::c_uint = 0;
pub const R_CRYPTO_MODE_CBC: ::std::os::raw::c_uint = 1;
pub const R_CRYPTO_MODE_OFB: ::std::os::raw::c_uint = 2;
pub const R_CRYPTO_MODE_CFB: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
pub const R_CRYPTO_DIR_CIPHER: ::std::os::raw::c_uint = 0;
pub const R_CRYPTO_DIR_DECIPHER: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_crypto_t {
    pub h: *mut r_crypto_plugin_t,
    pub key: *mut ::std::os::raw::c_uchar,
    pub iv: *mut ::std::os::raw::c_uchar,
    pub key_len: ::std::os::raw::c_int,
    pub output: *mut ::std::os::raw::c_uchar,
    pub output_len: ::std::os::raw::c_int,
    pub output_size: ::std::os::raw::c_int,
    pub dir: ::std::os::raw::c_int,
    pub user: *mut ::std::os::raw::c_void,
    pub plugins: *mut RList,
}
#[test]
fn bindgen_test_layout_r_crypto_t() {
    assert_eq!(
        ::std::mem::size_of::<r_crypto_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_crypto_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_crypto_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_crypto_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_t>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_t>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_t>())).iv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_t),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_t>())).key_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_t),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_t>())).output as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_t),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_t>())).output_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_t),
            "::",
            stringify!(output_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_t>())).output_size as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_t),
            "::",
            stringify!(output_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_t>())).dir as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_t),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_t>())).user as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_t>())).plugins as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_t),
            "::",
            stringify!(plugins)
        )
    );
}
pub type RCrypto = r_crypto_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_crypto_plugin_t {
    pub name: *const ::std::os::raw::c_char,
    pub license: *const ::std::os::raw::c_char,
    pub get_key_size:
        ::std::option::Option<unsafe extern "C" fn(cry: *mut RCrypto) -> ::std::os::raw::c_int>,
    pub set_iv: ::std::option::Option<
        unsafe extern "C" fn(
            cry: *mut RCrypto,
            iv: *const ::std::os::raw::c_uchar,
            ivlen: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub set_key: ::std::option::Option<
        unsafe extern "C" fn(
            cry: *mut RCrypto,
            key: *const ::std::os::raw::c_uchar,
            keylen: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
            direction: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(
            cry: *mut RCrypto,
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub final_: ::std::option::Option<
        unsafe extern "C" fn(
            cry: *mut RCrypto,
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub use_:
        ::std::option::Option<unsafe extern "C" fn(algo: *const ::std::os::raw::c_char) -> bool>,
    pub fini:
        ::std::option::Option<unsafe extern "C" fn(cry: *mut RCrypto) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_r_crypto_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_crypto_plugin_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_crypto_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_crypto_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_crypto_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_plugin_t>())).license as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_plugin_t>())).get_key_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_plugin_t),
            "::",
            stringify!(get_key_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_plugin_t>())).set_iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_plugin_t),
            "::",
            stringify!(set_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_plugin_t>())).set_key as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_plugin_t),
            "::",
            stringify!(set_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_plugin_t>())).update as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_plugin_t),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_plugin_t>())).final_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_plugin_t),
            "::",
            stringify!(final_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_plugin_t>())).use_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_plugin_t),
            "::",
            stringify!(use_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_crypto_plugin_t>())).fini as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_crypto_plugin_t),
            "::",
            stringify!(fini)
        )
    );
}
pub type RCryptoPlugin = r_crypto_plugin_t;
pub type RCryptoSelector = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn r_crypto_init(cry: *mut RCrypto, hard: ::std::os::raw::c_int) -> *mut RCrypto;
}
extern "C" {
    pub fn r_crypto_as_new(cry: *mut RCrypto) -> *mut RCrypto;
}
extern "C" {
    pub fn r_crypto_add(cry: *mut RCrypto, h: *mut RCryptoPlugin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_crypto_new() -> *mut RCrypto;
}
extern "C" {
    pub fn r_crypto_free(cry: *mut RCrypto) -> *mut RCrypto;
}
extern "C" {
    pub fn r_crypto_use(cry: *mut RCrypto, algo: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_crypto_set_key(
        cry: *mut RCrypto,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_crypto_set_iv(
        cry: *mut RCrypto,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_crypto_update(
        cry: *mut RCrypto,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_crypto_final(
        cry: *mut RCrypto,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_crypto_append(
        cry: *mut RCrypto,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_crypto_get_output(
        cry: *mut RCrypto,
        size: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_crypto_name(bit: RCryptoSelector) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_crypto_codec_name(bit: RCryptoSelector) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut r_crypto_plugin_aes: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_des: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_rc4: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_xor: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_blowfish: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_rc2: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_rot: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_rol: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_ror: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_base64: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_base91: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_aes_cbc: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_punycode: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_rc6: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_cps2: RCryptoPlugin;
}
extern "C" {
    pub static mut r_crypto_plugin_serpent: RCryptoPlugin;
}
extern "C" {
    pub fn r_core_version() -> *const ::std::os::raw::c_char;
}
pub const RCoreVisualMode_R_CORE_VISUAL_MODE_PX: RCoreVisualMode = 0;
pub const RCoreVisualMode_R_CORE_VISUAL_MODE_PD: RCoreVisualMode = 1;
pub const RCoreVisualMode_R_CORE_VISUAL_MODE_DB: RCoreVisualMode = 2;
pub const RCoreVisualMode_R_CORE_VISUAL_MODE_OV: RCoreVisualMode = 3;
pub const RCoreVisualMode_R_CORE_VISUAL_MODE_CD: RCoreVisualMode = 4;
pub type RCoreVisualMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_plugin_t {
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub license: *const ::std::os::raw::c_char,
    pub author: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub call: RCmdCb,
    pub init: RCmdCb,
    pub fini: RCmdCb,
}
#[test]
fn bindgen_test_layout_r_core_plugin_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_plugin_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_core_plugin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_plugin_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_plugin_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_plugin_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_plugin_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_plugin_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_plugin_t),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_plugin_t>())).license as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_plugin_t),
            "::",
            stringify!(license)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_plugin_t>())).author as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_plugin_t),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_plugin_t>())).version as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_plugin_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_plugin_t>())).call as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_plugin_t),
            "::",
            stringify!(call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_plugin_t>())).init as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_plugin_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_plugin_t>())).fini as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_plugin_t),
            "::",
            stringify!(fini)
        )
    );
}
pub type RCorePlugin = r_core_plugin_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_rtr_host_t {
    pub proto: ::std::os::raw::c_int,
    pub host: [::std::os::raw::c_char; 512usize],
    pub port: ::std::os::raw::c_int,
    pub file: [::std::os::raw::c_char; 1024usize],
    pub fd: *mut RSocket,
}
#[test]
fn bindgen_test_layout_r_core_rtr_host_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_rtr_host_t>(),
        1552usize,
        concat!("Size of: ", stringify!(r_core_rtr_host_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_rtr_host_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_rtr_host_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_rtr_host_t>())).proto as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_rtr_host_t),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_rtr_host_t>())).host as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_rtr_host_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_rtr_host_t>())).port as *const _ as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_rtr_host_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_rtr_host_t>())).file as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_rtr_host_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_rtr_host_t>())).fd as *const _ as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_rtr_host_t),
            "::",
            stringify!(fd)
        )
    );
}
pub type RCoreRtrHost = r_core_rtr_host_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_undo_t {
    pub action: *mut ::std::os::raw::c_char,
    pub revert: *mut ::std::os::raw::c_char,
    pub tstamp: ::std::os::raw::c_ulonglong,
    pub offset: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_core_undo_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_undo_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_core_undo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_undo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_undo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_undo_t>())).action as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_undo_t),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_undo_t>())).revert as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_undo_t),
            "::",
            stringify!(revert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_undo_t>())).tstamp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_undo_t),
            "::",
            stringify!(tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_undo_t>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_undo_t),
            "::",
            stringify!(offset)
        )
    );
}
pub type RCoreUndo = r_core_undo_t;
pub const RAutocompleteType_AUTOCOMPLETE_DEFAULT: RAutocompleteType = 0;
pub const RAutocompleteType_AUTOCOMPLETE_MS: RAutocompleteType = 1;
pub type RAutocompleteType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCoreUndoCondition {
    pub addr: ::std::os::raw::c_ulonglong,
    pub glob: *const ::std::os::raw::c_char,
    pub minstamp: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_RCoreUndoCondition() {
    assert_eq!(
        ::std::mem::size_of::<RCoreUndoCondition>(),
        24usize,
        concat!("Size of: ", stringify!(RCoreUndoCondition))
    );
    assert_eq!(
        ::std::mem::align_of::<RCoreUndoCondition>(),
        8usize,
        concat!("Alignment of ", stringify!(RCoreUndoCondition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreUndoCondition>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreUndoCondition),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreUndoCondition>())).glob as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreUndoCondition),
            "::",
            stringify!(glob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreUndoCondition>())).minstamp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreUndoCondition),
            "::",
            stringify!(minstamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_log_t {
    pub first: ::std::os::raw::c_int,
    pub last: ::std::os::raw::c_int,
    pub sp: *mut RStrpool,
}
#[test]
fn bindgen_test_layout_r_core_log_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_log_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_core_log_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_log_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_log_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_log_t>())).first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_log_t),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_log_t>())).last as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_log_t),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_log_t>())).sp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_log_t),
            "::",
            stringify!(sp)
        )
    );
}
pub type RCoreLog = r_core_log_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_times_t {
    pub loadlibs_init_time: ::std::os::raw::c_ulonglong,
    pub loadlibs_time: ::std::os::raw::c_ulonglong,
    pub file_open_time: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_r_core_times_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_times_t>(),
        24usize,
        concat!("Size of: ", stringify!(r_core_times_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_times_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_times_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_core_times_t>())).loadlibs_init_time as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_times_t),
            "::",
            stringify!(loadlibs_init_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_times_t>())).loadlibs_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_times_t),
            "::",
            stringify!(loadlibs_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_times_t>())).file_open_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_times_t),
            "::",
            stringify!(file_open_time)
        )
    );
}
pub type RCoreTimes = r_core_times_t;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_DFLT: r_core_autocomplete_types_t = 0;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_FLAG: r_core_autocomplete_types_t = 1;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_FLSP: r_core_autocomplete_types_t = 2;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_SEEK: r_core_autocomplete_types_t = 3;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_FCN: r_core_autocomplete_types_t = 4;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_ZIGN: r_core_autocomplete_types_t = 5;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_EVAL: r_core_autocomplete_types_t = 6;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_VARS: r_core_autocomplete_types_t = 7;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_PRJT: r_core_autocomplete_types_t = 8;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_MINS: r_core_autocomplete_types_t = 9;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_BRKP: r_core_autocomplete_types_t = 10;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_MACR: r_core_autocomplete_types_t = 11;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_FILE: r_core_autocomplete_types_t = 12;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_THME: r_core_autocomplete_types_t = 13;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_OPTN: r_core_autocomplete_types_t = 14;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_MS: r_core_autocomplete_types_t = 15;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_SDB: r_core_autocomplete_types_t = 16;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_CHRS: r_core_autocomplete_types_t = 17;
pub const r_core_autocomplete_types_t_R_CORE_AUTOCMPLT_END: r_core_autocomplete_types_t = 18;
pub type r_core_autocomplete_types_t = ::std::os::raw::c_uint;
pub use self::r_core_autocomplete_types_t as RCoreAutocompleteType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_autocomplete_t {
    pub cmd: *const ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_int,
    pub n_subcmds: ::std::os::raw::c_int,
    pub locked: bool,
    pub type_: ::std::os::raw::c_int,
    pub subcmds: *mut *mut r_core_autocomplete_t,
}
#[test]
fn bindgen_test_layout_r_core_autocomplete_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_autocomplete_t>(),
        32usize,
        concat!("Size of: ", stringify!(r_core_autocomplete_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_autocomplete_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_autocomplete_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_autocomplete_t>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_autocomplete_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_autocomplete_t>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_autocomplete_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_autocomplete_t>())).n_subcmds as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_autocomplete_t),
            "::",
            stringify!(n_subcmds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_autocomplete_t>())).locked as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_autocomplete_t),
            "::",
            stringify!(locked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_autocomplete_t>())).type_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_autocomplete_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_autocomplete_t>())).subcmds as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_autocomplete_t),
            "::",
            stringify!(subcmds)
        )
    );
}
pub type RCoreAutocomplete = r_core_autocomplete_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_visual_tab_t {
    pub printidx: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_ulonglong,
    pub cur_enabled: bool,
    pub cur: ::std::os::raw::c_int,
    pub ocur: ::std::os::raw::c_int,
    pub cols: ::std::os::raw::c_int,
    pub disMode: ::std::os::raw::c_int,
    pub hexMode: ::std::os::raw::c_int,
    pub asm_offset: ::std::os::raw::c_int,
    pub asm_instr: ::std::os::raw::c_int,
    pub asm_indent: ::std::os::raw::c_int,
    pub asm_bytes: ::std::os::raw::c_int,
    pub asm_cmt_col: ::std::os::raw::c_int,
    pub printMode: ::std::os::raw::c_int,
    pub current3format: ::std::os::raw::c_int,
    pub current4format: ::std::os::raw::c_int,
    pub current5format: ::std::os::raw::c_int,
    pub dumpCols: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_r_core_visual_tab_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_visual_tab_t>(),
        112usize,
        concat!("Size of: ", stringify!(r_core_visual_tab_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_visual_tab_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_visual_tab_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).printidx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(printidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).cur_enabled as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(cur_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).cur as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).ocur as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(ocur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).cols as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).disMode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(disMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).hexMode as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(hexMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).asm_offset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(asm_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).asm_instr as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(asm_instr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).asm_indent as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(asm_indent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).asm_bytes as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(asm_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).asm_cmt_col as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(asm_cmt_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).printMode as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(printMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_core_visual_tab_t>())).current3format as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(current3format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_core_visual_tab_t>())).current4format as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(current4format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_core_visual_tab_t>())).current5format as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(current5format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).dumpCols as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(dumpCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_tab_t>())).name as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_tab_t),
            "::",
            stringify!(name)
        )
    );
}
pub type RCoreVisualTab = r_core_visual_tab_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_visual_t {
    pub tabs: *mut RList,
    pub tab: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_r_core_visual_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_visual_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_core_visual_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_visual_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_visual_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_t>())).tabs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_t),
            "::",
            stringify!(tabs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_visual_t>())).tab as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_visual_t),
            "::",
            stringify!(tab)
        )
    );
}
pub type RCoreVisual = r_core_visual_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCoreGadget {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub cmd: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RCoreGadget() {
    assert_eq!(
        ::std::mem::size_of::<RCoreGadget>(),
        24usize,
        concat!("Size of: ", stringify!(RCoreGadget))
    );
    assert_eq!(
        ::std::mem::align_of::<RCoreGadget>(),
        8usize,
        concat!("Alignment of ", stringify!(RCoreGadget))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreGadget>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreGadget),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreGadget>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreGadget),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreGadget>())).w as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreGadget),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreGadget>())).h as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreGadget),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreGadget>())).cmd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreGadget),
            "::",
            stringify!(cmd)
        )
    );
}
extern "C" {
    pub fn r_core_gadget_free(g: *mut RCoreGadget);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_tasks_t {
    pub task_id_next: ::std::os::raw::c_int,
    pub tasks: *mut RList,
    pub tasks_queue: *mut RList,
    pub oneshot_queue: *mut RList,
    pub oneshots_enqueued: ::std::os::raw::c_int,
    pub current_task: *mut r_core_task_t,
    pub main_task: *mut r_core_task_t,
    pub lock: *mut RThreadLock,
    pub tasks_running: ::std::os::raw::c_int,
    pub oneshot_running: bool,
}
#[test]
fn bindgen_test_layout_r_core_tasks_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_tasks_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_core_tasks_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_tasks_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_tasks_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_tasks_t>())).task_id_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_tasks_t),
            "::",
            stringify!(task_id_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_tasks_t>())).tasks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_tasks_t),
            "::",
            stringify!(tasks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_tasks_t>())).tasks_queue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_tasks_t),
            "::",
            stringify!(tasks_queue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_tasks_t>())).oneshot_queue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_tasks_t),
            "::",
            stringify!(oneshot_queue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<r_core_tasks_t>())).oneshots_enqueued as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_tasks_t),
            "::",
            stringify!(oneshots_enqueued)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_tasks_t>())).current_task as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_tasks_t),
            "::",
            stringify!(current_task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_tasks_t>())).main_task as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_tasks_t),
            "::",
            stringify!(main_task)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_tasks_t>())).lock as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_tasks_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_tasks_t>())).tasks_running as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_tasks_t),
            "::",
            stringify!(tasks_running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_tasks_t>())).oneshot_running as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_tasks_t),
            "::",
            stringify!(oneshot_running)
        )
    );
}
pub type RCoreTaskScheduler = r_core_tasks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_project_t {
    pub name: *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_core_project_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_project_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_core_project_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_project_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_project_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_project_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_project_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_project_t>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_project_t),
            "::",
            stringify!(path)
        )
    );
}
pub type RProject = r_core_project_t;
extern "C" {
    pub fn r_project_new() -> *mut RProject;
}
extern "C" {
    pub fn r_project_rename(p: *mut RProject, newname: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_project_is_git(p: *mut RProject) -> bool;
}
extern "C" {
    pub fn r_project_close(p: *mut RProject);
}
extern "C" {
    pub fn r_project_open(
        p: *mut RProject,
        prjname: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_project_save(p: *mut RProject);
}
extern "C" {
    pub fn r_project_free(p: *mut RProject);
}
extern "C" {
    pub fn r_project_is_loaded(p: *mut RProject) -> bool;
}
extern "C" {
    pub fn r_core_project_is_saved(core: *mut RCore) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_t {
    pub bin: *mut RBin,
    pub config: *mut RConfig,
    pub prj: *mut RProject,
    pub offset: ::std::os::raw::c_ulonglong,
    pub prompt_offset: ::std::os::raw::c_ulonglong,
    pub blocksize: ::std::os::raw::c_uint,
    pub blocksize_max: ::std::os::raw::c_uint,
    pub block: *mut ::std::os::raw::c_uchar,
    pub yank_buf: *mut RBuffer,
    pub yank_addr: ::std::os::raw::c_ulonglong,
    pub tmpseek: bool,
    pub vmode: bool,
    pub interrupted: ::std::os::raw::c_int,
    pub cons: *mut RCons,
    pub io: *mut RIO,
    pub num: *mut RNum,
    pub rc: ::std::os::raw::c_ulonglong,
    pub lib: *mut RLib,
    pub rcmd: *mut RCmd,
    pub root_cmd_descriptor: RCmdDescriptor,
    pub cmd_descriptors: *mut RList,
    pub anal: *mut RAnal,
    pub rasm: *mut RAsm,
    pub times: *mut RCoreTimes,
    pub parser: *mut RParse,
    pub print: *mut RPrint,
    pub lang: *mut RLang,
    pub dbg: *mut RDebug,
    pub flags: *mut RFlag,
    pub search: *mut RSearch,
    pub fs: *mut RFS,
    pub rfs: *mut RFSShell,
    pub egg: *mut REgg,
    pub log: *mut RCoreLog,
    pub graph: *mut RAGraph,
    pub panels_root: *mut RPanelsRoot,
    pub panels: *mut RPanels,
    pub cmdqueue: *mut RList,
    pub lastcmd: *mut ::std::os::raw::c_char,
    pub cmdlog: *mut ::std::os::raw::c_char,
    pub cfglog: bool,
    pub cmdrepeat: ::std::os::raw::c_int,
    pub cmdtimes: *const ::std::os::raw::c_char,
    pub cmd_in_backticks: bool,
    pub rtr_n: ::std::os::raw::c_int,
    pub rtr_host: [RCoreRtrHost; 255usize],
    pub asmqjmps: *mut ::std::os::raw::c_ulonglong,
    pub asmqjmps_count: ::std::os::raw::c_int,
    pub asmqjmps_size: ::std::os::raw::c_int,
    pub is_asmqjmps_letter: bool,
    pub keep_asmqjmps: bool,
    pub visual: RCoreVisual,
    pub http_up: ::std::os::raw::c_int,
    pub gdbserver_up: ::std::os::raw::c_int,
    pub printidx: RCoreVisualMode,
    pub stkcmd: *mut ::std::os::raw::c_char,
    pub in_search: bool,
    pub watchers: *mut RList,
    pub scriptstack: *mut RList,
    pub tasks: RCoreTaskScheduler,
    pub max_cmd_depth: ::std::os::raw::c_int,
    pub switch_file_view: ::std::os::raw::c_uchar,
    pub sdb: *mut Sdb,
    pub incomment: ::std::os::raw::c_int,
    pub curtab: ::std::os::raw::c_int,
    pub seltab: ::std::os::raw::c_int,
    pub cmdremote: *mut ::std::os::raw::c_char,
    pub lastsearch: *mut ::std::os::raw::c_char,
    pub cmdfilter: *mut ::std::os::raw::c_char,
    pub break_loop: bool,
    pub undos: *mut RList,
    pub binat: bool,
    pub fixedbits: bool,
    pub fixedarch: bool,
    pub fixedblock: bool,
    pub table_query: *mut ::std::os::raw::c_char,
    pub sync_index: ::std::os::raw::c_int,
    pub c2: *mut r_core_t,
    pub table: *mut RTable,
    pub autocomplete: *mut RCoreAutocomplete,
    pub autocomplete_type: ::std::os::raw::c_int,
    pub maxtab: ::std::os::raw::c_int,
    pub ev: *mut REvent,
    pub gadgets: *mut RList,
    pub scr_gadgets: bool,
    pub log_events: bool,
    pub ropchain: *mut RList,
    pub theme: *mut ::std::os::raw::c_char,
    pub in_cmdstr: ::std::os::raw::c_int,
    pub marks_init: bool,
    pub marks: [::std::os::raw::c_ulonglong; 256usize],
    pub r_main_radare2: RMainCallback,
    pub r_main_rafind2: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub r_main_radiff2: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub r_main_rabin2: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub r_main_rarun2: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub r_main_ragg2: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub r_main_rasm2: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub r_main_rax2: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_r_core_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_t>(),
        399568usize,
        concat!("Size of: ", stringify!(r_core_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).bin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(bin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).config as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).prj as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(prj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).prompt_offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(prompt_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).blocksize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(blocksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).blocksize_max as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(blocksize_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).block as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).yank_buf as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(yank_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).yank_addr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(yank_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).tmpseek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(tmpseek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).vmode as *const _ as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(vmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).interrupted as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(interrupted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).cons as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(cons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).io as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(io)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).num as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).rc as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(rc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).lib as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(lib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).rcmd as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(rcmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).root_cmd_descriptor as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(root_cmd_descriptor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).cmd_descriptors as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(cmd_descriptors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).anal as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(anal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).rasm as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(rasm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).times as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(times)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).parser as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(parser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).print as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(print)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).lang as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).dbg as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(dbg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).flags as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).search as *const _ as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(search)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).fs as *const _ as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).rfs as *const _ as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(rfs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).egg as *const _ as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(egg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).log as *const _ as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).graph as *const _ as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).panels_root as *const _ as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(panels_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).panels as *const _ as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(panels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).cmdqueue as *const _ as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(cmdqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).lastcmd as *const _ as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(lastcmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).cmdlog as *const _ as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(cmdlog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).cfglog as *const _ as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(cfglog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).cmdrepeat as *const _ as usize },
        1340usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(cmdrepeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).cmdtimes as *const _ as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(cmdtimes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).cmd_in_backticks as *const _ as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(cmd_in_backticks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).rtr_n as *const _ as usize },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(rtr_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).rtr_host as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(rtr_host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).asmqjmps as *const _ as usize },
        397120usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(asmqjmps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).asmqjmps_count as *const _ as usize },
        397128usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(asmqjmps_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).asmqjmps_size as *const _ as usize },
        397132usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(asmqjmps_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).is_asmqjmps_letter as *const _ as usize },
        397136usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(is_asmqjmps_letter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).keep_asmqjmps as *const _ as usize },
        397137usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(keep_asmqjmps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).visual as *const _ as usize },
        397144usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(visual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).http_up as *const _ as usize },
        397160usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(http_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).gdbserver_up as *const _ as usize },
        397164usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(gdbserver_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).printidx as *const _ as usize },
        397168usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(printidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).stkcmd as *const _ as usize },
        397176usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(stkcmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).in_search as *const _ as usize },
        397184usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(in_search)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).watchers as *const _ as usize },
        397192usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(watchers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).scriptstack as *const _ as usize },
        397200usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(scriptstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).tasks as *const _ as usize },
        397208usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(tasks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).max_cmd_depth as *const _ as usize },
        397280usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(max_cmd_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).switch_file_view as *const _ as usize },
        397284usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(switch_file_view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).sdb as *const _ as usize },
        397288usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(sdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).incomment as *const _ as usize },
        397296usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(incomment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).curtab as *const _ as usize },
        397300usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(curtab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).seltab as *const _ as usize },
        397304usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(seltab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).cmdremote as *const _ as usize },
        397312usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(cmdremote)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).lastsearch as *const _ as usize },
        397320usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(lastsearch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).cmdfilter as *const _ as usize },
        397328usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(cmdfilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).break_loop as *const _ as usize },
        397336usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(break_loop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).undos as *const _ as usize },
        397344usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(undos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).binat as *const _ as usize },
        397352usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(binat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).fixedbits as *const _ as usize },
        397353usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(fixedbits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).fixedarch as *const _ as usize },
        397354usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(fixedarch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).fixedblock as *const _ as usize },
        397355usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(fixedblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).table_query as *const _ as usize },
        397360usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(table_query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).sync_index as *const _ as usize },
        397368usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(sync_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).c2 as *const _ as usize },
        397376usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).table as *const _ as usize },
        397384usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).autocomplete as *const _ as usize },
        397392usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(autocomplete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).autocomplete_type as *const _ as usize },
        397400usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(autocomplete_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).maxtab as *const _ as usize },
        397404usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(maxtab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).ev as *const _ as usize },
        397408usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(ev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).gadgets as *const _ as usize },
        397416usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(gadgets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).scr_gadgets as *const _ as usize },
        397424usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(scr_gadgets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).log_events as *const _ as usize },
        397425usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(log_events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).ropchain as *const _ as usize },
        397432usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(ropchain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).theme as *const _ as usize },
        397440usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(theme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).in_cmdstr as *const _ as usize },
        397448usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(in_cmdstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).marks_init as *const _ as usize },
        397452usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(marks_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).marks as *const _ as usize },
        397456usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(marks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).r_main_radare2 as *const _ as usize },
        399504usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(r_main_radare2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).r_main_rafind2 as *const _ as usize },
        399512usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(r_main_rafind2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).r_main_radiff2 as *const _ as usize },
        399520usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(r_main_radiff2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).r_main_rabin2 as *const _ as usize },
        399528usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(r_main_rabin2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).r_main_rarun2 as *const _ as usize },
        399536usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(r_main_rarun2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).r_main_ragg2 as *const _ as usize },
        399544usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(r_main_ragg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).r_main_rasm2 as *const _ as usize },
        399552usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(r_main_rasm2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_t>())).r_main_rax2 as *const _ as usize },
        399560usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_t),
            "::",
            stringify!(r_main_rax2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_item_t {
    pub type_: *const ::std::os::raw::c_char,
    pub addr: ::std::os::raw::c_ulonglong,
    pub next: ::std::os::raw::c_ulonglong,
    pub prev: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_int,
    pub perm: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub sectname: *mut ::std::os::raw::c_char,
    pub fcnname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_core_item_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_item_t>(),
        72usize,
        concat!("Size of: ", stringify!(r_core_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_item_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_item_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_item_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_item_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_item_t>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_item_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_item_t>())).prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_item_t),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_item_t>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_item_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_item_t>())).perm as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_item_t),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_item_t>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_item_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_item_t>())).comment as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_item_t),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_item_t>())).sectname as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_item_t),
            "::",
            stringify!(sectname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_item_t>())).fcnname as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_item_t),
            "::",
            stringify!(fcnname)
        )
    );
}
pub type RCoreItem = r_core_item_t;
extern "C" {
    pub fn r_core_item_at(core: *mut RCore, addr: ::std::os::raw::c_ulonglong) -> *mut RCoreItem;
}
extern "C" {
    pub fn r_core_item_free(ci: *mut RCoreItem);
}
extern "C" {
    pub fn r_core_bind(core: *mut RCore, bnd: *mut RCoreBind) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_cmpwatch_t {
    pub addr: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_int,
    pub cmd: [::std::os::raw::c_char; 32usize],
    pub odata: *mut ::std::os::raw::c_uchar,
    pub ndata: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_r_core_cmpwatch_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_cmpwatch_t>(),
        64usize,
        concat!("Size of: ", stringify!(r_core_cmpwatch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_cmpwatch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_cmpwatch_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_cmpwatch_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_cmpwatch_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_cmpwatch_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_cmpwatch_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_cmpwatch_t>())).cmd as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_cmpwatch_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_cmpwatch_t>())).odata as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_cmpwatch_t),
            "::",
            stringify!(odata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_cmpwatch_t>())).ndata as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_cmpwatch_t),
            "::",
            stringify!(ndata)
        )
    );
}
pub type RCoreCmpWatcher = r_core_cmpwatch_t;
pub type RCoreSearchCallback = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut RCore,
        from: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn r_core_list_themes(core: *mut RCore) -> *mut RList;
}
extern "C" {
    pub fn r_core_get_theme(core: *mut RCore) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_get_section_name(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_get_cons(core: *mut RCore) -> *mut RCons;
}
extern "C" {
    pub fn r_core_get_bin(core: *mut RCore) -> *mut RBin;
}
extern "C" {
    pub fn r_core_get_config(core: *mut RCore) -> *mut RConfig;
}
extern "C" {
    pub fn r_core_init(core: *mut RCore) -> bool;
}
extern "C" {
    pub fn r_core_bind_cons(core: *mut RCore);
}
extern "C" {
    pub fn r_core_new() -> *mut RCore;
}
extern "C" {
    pub fn r_core_free(core: *mut RCore);
}
extern "C" {
    pub fn r_core_fini(c: *mut RCore);
}
extern "C" {
    pub fn r_core_wait(core: *mut RCore);
}
extern "C" {
    pub fn r_core_ncast(p: ::std::os::raw::c_ulonglong) -> *mut RCore;
}
extern "C" {
    pub fn r_core_cast(p: *mut ::std::os::raw::c_void) -> *mut RCore;
}
extern "C" {
    pub fn r_core_bin_load_structs(core: *mut RCore, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_core_config_init(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_config_update(core: *mut RCore);
}
extern "C" {
    pub fn r_core_parse_radare2rc(r: *mut RCore);
}
extern "C" {
    pub fn r_core_prompt(core: *mut RCore, sync: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_prompt_exec(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_lines_initcache(
        core: *mut RCore,
        start_addr: ::std::os::raw::c_ulonglong,
        end_addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_lines_currline(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_prompt_loop(core: *mut RCore) -> bool;
}
extern "C" {
    pub fn r_core_pava(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_core_cmd(
        core: *mut RCore,
        cmd: *const ::std::os::raw::c_char,
        log: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmd_task_sync(
        core: *mut RCore,
        cmd: *const ::std::os::raw::c_char,
        log: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_editor(
        core: *const RCore,
        file: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_fgets(
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_flag_get_by_spaces(
        f: *mut RFlag,
        off: ::std::os::raw::c_ulonglong,
    ) -> *mut RFlagItem;
}
extern "C" {
    pub fn r_core_cmdf(
        core: *mut RCore,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmd0(
        core: *mut RCore,
        cmd: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmd_queue(core: *mut RCore, line: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_cmd_queue_wait(core: *mut RCore);
}
extern "C" {
    pub fn r_core_cmd_init(core: *mut RCore);
}
extern "C" {
    pub fn r_core_cmd_pipe(
        core: *mut RCore,
        radare_cmd: *mut ::std::os::raw::c_char,
        shell_cmd: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmd_str(
        core: *mut RCore,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_cmd_strf(
        core: *mut RCore,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_cmd_str_pipe(
        core: *mut RCore,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_cmd_file(
        core: *mut RCore,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmd_lines(
        core: *mut RCore,
        lines: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmd_command(
        core: *mut RCore,
        command: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_af(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        name: *const ::std::os::raw::c_char,
        anal_calls: bool,
    );
}
extern "C" {
    pub fn r_core_run_script(core: *mut RCore, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_core_seek(core: *mut RCore, addr: ::std::os::raw::c_ulonglong, rb: bool) -> bool;
}
extern "C" {
    pub fn r_core_visual_bit_editor(core: *mut RCore) -> bool;
}
extern "C" {
    pub fn r_core_seek_base(
        core: *mut RCore,
        hex: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_seek_previous(core: *mut RCore, type_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_seek_next(core: *mut RCore, type_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_seek_align(
        core: *mut RCore,
        align: ::std::os::raw::c_ulonglong,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_arch_bits_at(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        bits: *mut ::std::os::raw::c_int,
        arch: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_core_seek_arch_bits(core: *mut RCore, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_core_block_read(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_block_size(
        core: *mut RCore,
        bsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_seek_size(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        bsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_is_valid_offset(
        core: *mut RCore,
        offset: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_shift_block(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        b_size: ::std::os::raw::c_ulonglong,
        dist: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_autocomplete(
        core: *mut RCore,
        completion: *mut RLineCompletion,
        buf: *mut RLineBuffer,
        prompt_type: RLinePromptType,
    );
}
extern "C" {
    pub fn r_core_print_scrollbar(core: *mut RCore);
}
extern "C" {
    pub fn r_core_print_scrollbar_bottom(core: *mut RCore);
}
extern "C" {
    pub fn r_core_visual_prompt_input(core: *mut RCore);
}
extern "C" {
    pub fn r_core_visual_toggle_decompiler_disasm(core: *mut RCore, for_graph: bool, reset: bool);
}
extern "C" {
    pub fn r_core_visual_applyDisMode(core: *mut RCore, disMode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_core_visual_applyHexMode(core: *mut RCore, hexMode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_core_visual_refs(
        core: *mut RCore,
        xref: bool,
        fcnInsteadOfAddr: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_append_help(
        p: *mut RStrBuf,
        title: *const ::std::os::raw::c_char,
        help: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_core_prevop_addr(
        core: *mut RCore,
        start_addr: ::std::os::raw::c_ulonglong,
        numinstrs: ::std::os::raw::c_int,
        prev_addr: *mut ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_core_prevop_addr_force(
        core: *mut RCore,
        start_addr: ::std::os::raw::c_ulonglong,
        numinstrs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_core_visual_hudstuff(core: *mut RCore) -> bool;
}
extern "C" {
    pub fn r_core_visual_classes(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_anal_classes(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_types(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual(
        core: *mut RCore,
        input: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_graph(
        core: *mut RCore,
        g: *mut RAGraph,
        _fcn: *mut RAnalFunction,
        is_interactive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_browse(core: *mut RCore, arg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_visual_cmd(
        core: *mut RCore,
        arg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_seek_animation(core: *mut RCore, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_core_visual_asm(core: *mut RCore, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_core_visual_colors(core: *mut RCore);
}
extern "C" {
    pub fn r_core_visual_xrefs_x(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_xrefs_X(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_showcursor(core: *mut RCore, x: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_core_visual_offset(core: *mut RCore);
}
extern "C" {
    pub fn r_core_visual_hud(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_jump(core: *mut RCore, ch: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn r_core_visual_disasm_up(core: *mut RCore, cols: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_core_visual_disasm_down(
        core: *mut RCore,
        op: *mut RAsmOp,
        cols: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_core_getreloc(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
    ) -> *mut RBinReloc;
}
extern "C" {
    pub fn r_core_get_asmqjmps(
        core: *mut RCore,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_core_set_asmqjmps(
        core: *mut RCore,
        str_: *mut ::std::os::raw::c_char,
        len: size_t,
        i: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_core_add_asmqjmp(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_panels_root(core: *mut RCore, panels_root: *mut RPanelsRoot) -> bool;
}
extern "C" {
    pub fn r_core_panels_save(core: *mut RCore, _name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_panels_load(core: *mut RCore, _name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_core_anal_type_init(core: *mut RCore);
}
extern "C" {
    pub fn r_core_anal_hasrefs_to_depth(
        core: *mut RCore,
        value: ::std::os::raw::c_ulonglong,
        pj: *mut PJ,
        depth: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_link_stroff(core: *mut RCore, fcn: *mut RAnalFunction);
}
extern "C" {
    pub fn r_core_anal_inflags(core: *mut RCore, glob: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn cmd_anal_objc(
        core: *mut RCore,
        input: *const ::std::os::raw::c_char,
        auto_anal: bool,
    ) -> bool;
}
extern "C" {
    pub fn r_core_anal_cc_init(core: *mut RCore);
}
extern "C" {
    pub fn r_core_anal_paths(
        core: *mut RCore,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        followCalls: bool,
        followDepth: ::std::os::raw::c_int,
        is_json: bool,
    );
}
extern "C" {
    pub fn r_core_list_io(core: *mut RCore);
}
extern "C" {
    pub fn r_listinfo_new(
        name: *const ::std::os::raw::c_char,
        pitv: RInterval,
        vitv: RInterval,
        perm: ::std::os::raw::c_int,
        extra: *const ::std::os::raw::c_char,
    ) -> *mut RListInfo;
}
extern "C" {
    pub fn r_listinfo_free(info: *mut RListInfo);
}
extern "C" {
    pub fn r_core_visual_mark_seek(core: *mut RCore, ch: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn r_core_visual_mark(core: *mut RCore, ch: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn r_core_visual_mark_set(
        core: *mut RCore,
        ch: ::std::os::raw::c_uchar,
        addr: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_core_visual_mark_del(core: *mut RCore, ch: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn r_core_visual_mark_dump(core: *mut RCore) -> bool;
}
extern "C" {
    pub fn r_core_visual_mark_reset(core: *mut RCore);
}
extern "C" {
    pub fn r_core_search_cb(
        core: *mut RCore,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        cb: RCoreSearchCallback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_serve(core: *mut RCore, fd: *mut RIODesc) -> bool;
}
extern "C" {
    pub fn r_core_file_reopen(
        core: *mut RCore,
        args: *const ::std::os::raw::c_char,
        perm: ::std::os::raw::c_int,
        binload: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_core_file_reopen_debug(core: *mut RCore, args: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_file_reopen_remote_debug(
        core: *mut RCore,
        uri: *mut ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_core_file_open(
        core: *mut RCore,
        file: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        loadaddr: ::std::os::raw::c_ulonglong,
    ) -> *mut RIODesc;
}
extern "C" {
    pub fn r_core_file_open_many(
        r: *mut RCore,
        file: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        loadaddr: ::std::os::raw::c_ulonglong,
    ) -> *mut RIODesc;
}
extern "C" {
    pub fn r_core_file_close_all_but(core: *mut RCore) -> bool;
}
extern "C" {
    pub fn r_core_setup_debugger(
        r: *mut RCore,
        debugbackend: *const ::std::os::raw::c_char,
        attach: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_seek_delta(
        core: *mut RCore,
        addr: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_extend_at(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_core_write_at(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_core_write_op(
        core: *mut RCore,
        arg: *const ::std::os::raw::c_char,
        op: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_transform_op(
        core: *mut RCore,
        arg: *const ::std::os::raw::c_char,
        op: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn r_core_set_file_by_fd(
        core: *mut RCore,
        bin_fd: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_set_file_by_name(
        bin: *mut RBin,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_debug_rr(core: *mut RCore, reg: *mut RReg, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_core_fortune_list_types();
}
extern "C" {
    pub fn r_core_fortune_list(core: *mut RCore);
}
extern "C" {
    pub fn r_core_fortune_print_random(core: *mut RCore);
}
extern "C" {
    pub fn r_core_project_execute_cmds(core: *mut RCore, prjfile: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_yank(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_string(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_hexpair(core: *mut RCore, input: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_core_yank_paste(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_set(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_set_str(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_to(
        core: *mut RCore,
        arg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_dump(
        core: *mut RCore,
        pos: ::std::os::raw::c_ulonglong,
        format: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_core_yank_hexdump(
        core: *mut RCore,
        pos: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_cat(
        core: *mut RCore,
        pos: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_cat_string(
        core: *mut RCore,
        pos: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_hud_file(
        core: *mut RCore,
        input: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_hud_path(
        core: *mut RCore,
        input: *const ::std::os::raw::c_char,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_yank_file_ex(core: *mut RCore, input: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_core_yank_file_all(
        core: *mut RCore,
        input: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_loadlibs_init(core: *mut RCore);
}
extern "C" {
    pub fn r_core_loadlibs(
        core: *mut RCore,
        where_: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_core_cmd_buffer(
        core: *mut RCore,
        buf: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmd_foreach(
        core: *mut RCore,
        cmd: *const ::std::os::raw::c_char,
        each: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmd_foreach3(
        core: *mut RCore,
        cmd: *const ::std::os::raw::c_char,
        each: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_op_str(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_op_anal(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        mask: RAnalOpMask,
    ) -> *mut RAnalOp;
}
extern "C" {
    pub fn r_core_disassemble_instr(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        l: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_disassemble_bytes(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        b: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_get_func_args(
        core: *mut RCore,
        func_name: *const ::std::os::raw::c_char,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_core_print_func_args(core: *mut RCore);
}
extern "C" {
    pub fn resolve_fcn_name(
        anal: *mut RAnal,
        func_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_get_stacksz(
        core: *mut RCore,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_op(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        mask: ::std::os::raw::c_int,
    ) -> *mut RAnalOp;
}
extern "C" {
    pub fn core_type_by_addr(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_esil(
        core: *mut RCore,
        str_: *const ::std::os::raw::c_char,
        addr: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_core_anal_fcn_merge(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        addr2: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn r_core_anal_optype_colorfor(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        verbose: bool,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_anal_address(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_core_anal_undefine(core: *mut RCore, off: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_core_anal_hint_print(
        a: *mut RAnal,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_core_anal_hint_list(a: *mut RAnal, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_core_anal_search(
        core: *mut RCore,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        ref_: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_search_xrefs(
        core: *mut RCore,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        pj: *mut PJ,
        rad: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_data(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        count: ::std::os::raw::c_int,
        depth: ::std::os::raw::c_int,
        wordsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_datarefs(core: *mut RCore, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_core_anal_coderefs(core: *mut RCore, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn r_core_anal_codexrefs(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RGraph;
}
extern "C" {
    pub fn r_core_anal_importxrefs(core: *mut RCore) -> *mut RGraph;
}
extern "C" {
    pub fn r_core_anal_callgraph(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        fmt: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_core_anal_refs(
        core: *mut RCore,
        input: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_agraph_print(
        core: *mut RCore,
        use_utf: ::std::os::raw::c_int,
        input: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn r_core_esil_cmd(
        esil: *mut RAnalEsil,
        cmd: *const ::std::os::raw::c_char,
        a1: ::std::os::raw::c_ulonglong,
        a2: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_core_esil_step(
        core: *mut RCore,
        until_addr: ::std::os::raw::c_ulonglong,
        until_expr: *const ::std::os::raw::c_char,
        prev_addr: *mut ::std::os::raw::c_ulonglong,
        stepOver: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_esil_step_back(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_get_bbaddr(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_core_anal_bb_seek(core: *mut RCore, addr: ::std::os::raw::c_ulonglong) -> bool;
}
extern "C" {
    pub fn r_core_anal_fcn(
        core: *mut RCore,
        at: ::std::os::raw::c_ulonglong,
        from: ::std::os::raw::c_ulonglong,
        reftype: ::std::os::raw::c_int,
        depth: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_core_anal_fcn_autoname(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        dump: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_anal_autoname_all_fcns(core: *mut RCore);
}
extern "C" {
    pub fn r_core_anal_autoname_all_golang_fcns(core: *mut RCore);
}
extern "C" {
    pub fn r_core_anal_fcn_list(
        core: *mut RCore,
        input: *const ::std::os::raw::c_char,
        rad: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_fcn_name(
        core: *mut RCore,
        fcn: *mut RAnalFunction,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_anal_fcn_list_size(core: *mut RCore) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_core_anal_fcn_labels(
        core: *mut RCore,
        fcn: *mut RAnalFunction,
        rad: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_core_anal_fcn_clean(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_print_bb_custom(
        core: *mut RCore,
        fcn: *mut RAnalFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_print_bb_gml(core: *mut RCore, fcn: *mut RAnalFunction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_graph(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        opts: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_graph_fcn(
        core: *mut RCore,
        input: *mut ::std::os::raw::c_char,
        opts: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_graph_to(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        n: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_core_anal_ref_list(
        core: *mut RCore,
        rad: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_all(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_anal_cycles(core: *mut RCore, ccl: ::std::os::raw::c_int) -> *mut RList;
}
extern "C" {
    pub fn r_core_anal_fcn_get_calls(core: *mut RCore, fcn: *mut RAnalFunction) -> *mut RList;
}
extern "C" {
    pub fn r_core_anal_type_match(core: *mut RCore, fcn: *mut RAnalFunction);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_asm_hit {
    pub code: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub addr: ::std::os::raw::c_ulonglong,
    pub valid: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_r_core_asm_hit() {
    assert_eq!(
        ::std::mem::size_of::<r_core_asm_hit>(),
        32usize,
        concat!("Size of: ", stringify!(r_core_asm_hit))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_asm_hit>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_asm_hit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_asm_hit>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_asm_hit),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_asm_hit>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_asm_hit),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_asm_hit>())).addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_asm_hit),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_asm_hit>())).valid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_asm_hit),
            "::",
            stringify!(valid)
        )
    );
}
pub type RCoreAsmHit = r_core_asm_hit;
extern "C" {
    pub fn r_core_syscall(
        core: *mut RCore,
        name: *const ::std::os::raw::c_char,
        args: *const ::std::os::raw::c_char,
    ) -> *mut RBuffer;
}
extern "C" {
    pub fn r_core_syscallf(
        core: *mut RCore,
        name: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut RBuffer;
}
extern "C" {
    pub fn r_core_asm_hit_new() -> *mut RCoreAsmHit;
}
extern "C" {
    pub fn r_core_asm_hit_list_new() -> *mut RList;
}
extern "C" {
    pub fn r_core_asm_hit_free(_hit: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn r_core_set_asm_configs(
        core: *mut RCore,
        arch: *mut ::std::os::raw::c_char,
        bits: ::std::os::raw::c_uint,
        segoff: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_core_asm_search(
        core: *mut RCore,
        input: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_asm_strsearch(
        core: *mut RCore,
        input: *const ::std::os::raw::c_char,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        maxhits: ::std::os::raw::c_int,
        regexp: ::std::os::raw::c_int,
        everyByte: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_core_asm_bwdisassemble(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        n: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_core_asm_back_disassemble_instr(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
        hit_count: ::std::os::raw::c_uint,
        extra_padding: ::std::os::raw::c_uint,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_core_asm_back_disassemble_byte(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        len: ::std::os::raw::c_int,
        hit_count: ::std::os::raw::c_uint,
        extra_padding: ::std::os::raw::c_uint,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_core_asm_bwdis_len(
        core: *mut RCore,
        len: *mut ::std::os::raw::c_int,
        start_addr: *mut ::std::os::raw::c_ulonglong,
        l: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn r_core_print_disasm(
        p: *mut RPrint,
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        lines: ::std::os::raw::c_int,
        invbreak: ::std::os::raw::c_int,
        nbytes: ::std::os::raw::c_int,
        json: bool,
        pj: *mut PJ,
        pdf: *mut RAnalFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_print_disasm_json(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        lines: ::std::os::raw::c_int,
        pj: *mut PJ,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_print_disasm_instructions_with_buf(
        core: *mut RCore,
        address: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        nb_bytes: ::std::os::raw::c_int,
        nb_opcodes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_print_disasm_instructions(
        core: *mut RCore,
        nb_bytes: ::std::os::raw::c_int,
        nb_opcodes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_print_disasm_all(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        l: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_disasm_pdi_with_buf(
        core: *mut RCore,
        address: ::std::os::raw::c_ulonglong,
        buf: *mut ::std::os::raw::c_uchar,
        nb_opcodes: ::std::os::raw::c_uint,
        nb_bytes: ::std::os::raw::c_uint,
        fmt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_disasm_pdi(
        core: *mut RCore,
        nb_opcodes: ::std::os::raw::c_int,
        nb_bytes: ::std::os::raw::c_int,
        fmt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_disasm_pde(
        core: *mut RCore,
        nb_opcodes: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_print_fcn_disasm(
        p: *mut RPrint,
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        l: ::std::os::raw::c_int,
        invbreak: ::std::os::raw::c_int,
        cbytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_get_prc_cols(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_flag_in_middle(
        core: *mut RCore,
        at: ::std::os::raw::c_ulonglong,
        oplen: ::std::os::raw::c_int,
        midflags: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bb_starts_in_middle(
        core: *mut RCore,
        at: ::std::os::raw::c_ulonglong,
        oplen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bin_raise(core: *mut RCore, bfid: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_core_bin_set_cur(core: *mut RCore, binfile: *mut RBinFile) -> bool;
}
extern "C" {
    pub fn r_core_bin_set_env(r: *mut RCore, binfile: *mut RBinFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bin_set_by_fd(
        core: *mut RCore,
        bin_fd: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bin_set_by_name(
        core: *mut RCore,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bin_reload(
        core: *mut RCore,
        file: *const ::std::os::raw::c_char,
        baseaddr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bin_load(
        core: *mut RCore,
        file: *const ::std::os::raw::c_char,
        baseaddr: ::std::os::raw::c_ulonglong,
    ) -> bool;
}
extern "C" {
    pub fn r_core_bin_rebase(
        core: *mut RCore,
        baddr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bin_export_info(core: *mut RCore, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_core_bin_list(core: *mut RCore, mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bin_delete(core: *mut RCore, binfile_idx: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn r_core_bin_impaddr(
        bin: *mut RBin,
        va: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn r_core_pseudo_code(
        core: *mut RCore,
        input: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_zdiff(c: *mut RCore, c2: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_gdiff(core1: *mut RCore, core2: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_gdiff_fcn(
        c: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        addr2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_project_open(core: *mut RCore, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_core_project_cat(
        core: *mut RCore,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_project_delete(
        core: *mut RCore,
        prjfile: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_project_list(
        core: *mut RCore,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_project_save_script(
        core: *mut RCore,
        file: *const ::std::os::raw::c_char,
        opts: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_core_project_save(core: *mut RCore, file: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_core_project_name(
        core: *mut RCore,
        file: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_project_notes_file(
        core: *mut RCore,
        file: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_sysenv_begin(
        core: *mut RCore,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_sysenv_end(core: *mut RCore, cmd: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_recover_vars(core: *mut RCore, fcn: *mut RAnalFunction, argonly: bool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_bin_filter_t {
    pub offset: ::std::os::raw::c_ulonglong,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_r_core_bin_filter_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_bin_filter_t>(),
        16usize,
        concat!("Size of: ", stringify!(r_core_bin_filter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_bin_filter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_bin_filter_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bin_filter_t>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bin_filter_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_bin_filter_t>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_bin_filter_t),
            "::",
            stringify!(name)
        )
    );
}
pub type RCoreBinFilter = r_core_bin_filter_t;
extern "C" {
    pub fn r_core_bin_info(
        core: *mut RCore,
        action: ::std::os::raw::c_int,
        pj: *mut PJ,
        mode: ::std::os::raw::c_int,
        va: ::std::os::raw::c_int,
        filter: *mut RCoreBinFilter,
        chksum: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bin_set_arch_bits(
        r: *mut RCore,
        name: *const ::std::os::raw::c_char,
        arch: *const ::std::os::raw::c_char,
        bits: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bin_update_arch_bits(r: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_bin_method_flags_str(
        flags: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_pdb_info(
        core: *mut RCore,
        file: *const ::std::os::raw::c_char,
        pj: *mut PJ,
        mode: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_core_rtr_cmds(
        core: *mut RCore,
        port: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_rtr_cmds_query(
        core: *mut RCore,
        host: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        cmd: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_rtr_help(core: *mut RCore);
}
extern "C" {
    pub fn r_core_rtr_pushout(core: *mut RCore, input: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_rtr_list(core: *mut RCore);
}
extern "C" {
    pub fn r_core_rtr_add(core: *mut RCore, input: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_rtr_remove(core: *mut RCore, input: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_rtr_session(core: *mut RCore, input: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_rtr_event(core: *mut RCore, input: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_rtr_cmd(core: *mut RCore, input: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_rtr_http(
        core: *mut RCore,
        launch: ::std::os::raw::c_int,
        browse: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_rtr_http_stop(u: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_rtr_gdb(
        core: *mut RCore,
        launch: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_prevopsz(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_config(core: *mut RCore);
}
extern "C" {
    pub fn r_core_visual_mounts(core: *mut RCore);
}
extern "C" {
    pub fn r_core_visual_anal(core: *mut RCore, input: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_visual_debugtraces(core: *mut RCore, input: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_visual_define(
        core: *mut RCore,
        arg: *const ::std::os::raw::c_char,
        distance: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_core_visual_trackflags(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_view_graph(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_view_zigns(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_view_rop(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_comments(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_prompt(core: *mut RCore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_visual_esil(core: *mut RCore, input: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_core_search_preludes(core: *mut RCore, log: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_search_prelude(
        core: *mut RCore,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        buf: *const ::std::os::raw::c_uchar,
        blen: ::std::os::raw::c_int,
        mask: *const ::std::os::raw::c_uchar,
        mlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_get_boundaries_prot(
        core: *mut RCore,
        protection: ::std::os::raw::c_int,
        mode: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
    ) -> *mut RList;
}
extern "C" {
    pub fn r_core_patch(
        core: *mut RCore,
        patch: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_hack_help(core: *const RCore);
}
extern "C" {
    pub fn r_core_hack(
        core: *mut RCore,
        op: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_dump(
        core: *mut RCore,
        file: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_ulonglong,
        append: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn r_core_diff_show(core: *mut RCore, core2: *mut RCore);
}
extern "C" {
    pub fn r_core_clippy(core: *mut RCore, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_cmpwatch_free(w: *mut RCoreCmpWatcher);
}
extern "C" {
    pub fn r_core_cmpwatch_get(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut RCoreCmpWatcher;
}
extern "C" {
    pub fn r_core_cmpwatch_add(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        size: ::std::os::raw::c_int,
        cmd: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmpwatch_del(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmpwatch_update(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmpwatch_show(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_cmpwatch_revert(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_undo_new(
        offset: ::std::os::raw::c_ulonglong,
        action: *const ::std::os::raw::c_char,
        revert: *const ::std::os::raw::c_char,
    ) -> *mut RCoreUndo;
}
extern "C" {
    pub fn r_core_undo_print(
        core: *mut RCore,
        mode: ::std::os::raw::c_int,
        cond: *mut RCoreUndoCondition,
    );
}
extern "C" {
    pub fn r_core_undo_free(cu: *mut RCoreUndo);
}
extern "C" {
    pub fn r_core_undo_push(core: *mut RCore, cu: *mut RCoreUndo);
}
extern "C" {
    pub fn r_core_undo_pop(core: *mut RCore);
}
pub type RCoreLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut RCore,
        count: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn r_core_log_free(log: *mut RCoreLog);
}
extern "C" {
    pub fn r_core_log_init(log: *mut RCoreLog);
}
extern "C" {
    pub fn r_core_log_get(
        core: *mut RCore,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_log_new() -> *mut RCoreLog;
}
extern "C" {
    pub fn r_core_log_run(
        core: *mut RCore,
        buf: *const ::std::os::raw::c_char,
        cb: RCoreLogCallback,
    ) -> bool;
}
extern "C" {
    pub fn r_core_log_list(
        core: *mut RCore,
        n: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        fmt: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_log_add(core: *mut RCore, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_log_del(core: *mut RCore, n: ::std::os::raw::c_int);
}
pub type PrintItemCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        p: *mut ::std::os::raw::c_void,
        selected: bool,
    ) -> *mut ::std::os::raw::c_char,
>;
extern "C" {
    pub fn r_str_widget_list(
        user: *mut ::std::os::raw::c_void,
        list: *mut RList,
        rows: ::std::os::raw::c_int,
        cur: ::std::os::raw::c_int,
        cb: PrintItemCallback,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_pj_new(core: *mut RCore) -> *mut PJ;
}
extern "C" {
    pub fn r_core_cmd_help(core: *const RCore, help: *mut *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCoreAnalStatsItem {
    pub youarehere: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub comments: ::std::os::raw::c_uint,
    pub functions: ::std::os::raw::c_uint,
    pub blocks: ::std::os::raw::c_uint,
    pub in_functions: ::std::os::raw::c_uint,
    pub symbols: ::std::os::raw::c_uint,
    pub strings: ::std::os::raw::c_uint,
    pub perm: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RCoreAnalStatsItem() {
    assert_eq!(
        ::std::mem::size_of::<RCoreAnalStatsItem>(),
        36usize,
        concat!("Size of: ", stringify!(RCoreAnalStatsItem))
    );
    assert_eq!(
        ::std::mem::align_of::<RCoreAnalStatsItem>(),
        4usize,
        concat!("Alignment of ", stringify!(RCoreAnalStatsItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreAnalStatsItem>())).youarehere as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreAnalStatsItem),
            "::",
            stringify!(youarehere)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreAnalStatsItem>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreAnalStatsItem),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreAnalStatsItem>())).comments as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreAnalStatsItem),
            "::",
            stringify!(comments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreAnalStatsItem>())).functions as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreAnalStatsItem),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreAnalStatsItem>())).blocks as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreAnalStatsItem),
            "::",
            stringify!(blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreAnalStatsItem>())).in_functions as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreAnalStatsItem),
            "::",
            stringify!(in_functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreAnalStatsItem>())).symbols as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreAnalStatsItem),
            "::",
            stringify!(symbols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreAnalStatsItem>())).strings as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreAnalStatsItem),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreAnalStatsItem>())).perm as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreAnalStatsItem),
            "::",
            stringify!(perm)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCoreAnalStats {
    pub block: *mut RCoreAnalStatsItem,
}
#[test]
fn bindgen_test_layout_RCoreAnalStats() {
    assert_eq!(
        ::std::mem::size_of::<RCoreAnalStats>(),
        8usize,
        concat!("Size of: ", stringify!(RCoreAnalStats))
    );
    assert_eq!(
        ::std::mem::align_of::<RCoreAnalStats>(),
        8usize,
        concat!("Alignment of ", stringify!(RCoreAnalStats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RCoreAnalStats>())).block as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCoreAnalStats),
            "::",
            stringify!(block)
        )
    );
}
extern "C" {
    pub fn core_anal_bbs(core: *mut RCore, input: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn core_anal_bbs_range(core: *mut RCore, input: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_core_anal_hasrefs(
        core: *mut RCore,
        value: ::std::os::raw::c_ulonglong,
        mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_anal_get_comments(
        core: *mut RCore,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_anal_get_stats(
        a: *mut RCore,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        step: ::std::os::raw::c_ulonglong,
    ) -> *mut RCoreAnalStats;
}
extern "C" {
    pub fn r_core_anal_stats_free(s: *mut RCoreAnalStats);
}
extern "C" {
    pub fn r_core_syscmd_ls(input: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_syscmd_cat(file: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_syscmd_mkdir(dir: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_line_hist_offset_up(line: *mut RLine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_line_hist_offset_down(line: *mut RLine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_syscall_dostr(
        core: *mut RCore,
        num: ::std::os::raw::c_longlong,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmd_agfb(core: *mut RCore);
}
extern "C" {
    pub fn cmd_agfb2(core: *mut RCore, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn cmd_agfb3(
        core: *mut RCore,
        s: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
pub type RCoreTaskCallback = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, out: *mut ::std::os::raw::c_char),
>;
pub const RTaskState_R_CORE_TASK_STATE_BEFORE_START: RTaskState = 0;
pub const RTaskState_R_CORE_TASK_STATE_RUNNING: RTaskState = 1;
pub const RTaskState_R_CORE_TASK_STATE_SLEEPING: RTaskState = 2;
pub const RTaskState_R_CORE_TASK_STATE_DONE: RTaskState = 3;
pub type RTaskState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_core_task_t {
    pub id: ::std::os::raw::c_int,
    pub state: RTaskState,
    pub transient: bool,
    pub refcount: ::std::os::raw::c_int,
    pub running_sem: *mut RThreadSemaphore,
    pub user: *mut ::std::os::raw::c_void,
    pub core: *mut RCore,
    pub dispatched: bool,
    pub dispatch_cond: *mut RThreadCond,
    pub dispatch_lock: *mut RThreadLock,
    pub thread: *mut RThread,
    pub cmd: *mut ::std::os::raw::c_char,
    pub res: *mut ::std::os::raw::c_char,
    pub cmd_log: bool,
    pub cons_context: *mut RConsContext,
    pub cb: RCoreTaskCallback,
}
#[test]
fn bindgen_test_layout_r_core_task_t() {
    assert_eq!(
        ::std::mem::size_of::<r_core_task_t>(),
        112usize,
        concat!("Size of: ", stringify!(r_core_task_t))
    );
    assert_eq!(
        ::std::mem::align_of::<r_core_task_t>(),
        8usize,
        concat!("Alignment of ", stringify!(r_core_task_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).transient as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(transient)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).refcount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).running_sem as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(running_sem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).user as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).core as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(core)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).dispatched as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(dispatched)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).dispatch_cond as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(dispatch_cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).dispatch_lock as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(dispatch_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).thread as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).cmd as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).res as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).cmd_log as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(cmd_log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).cons_context as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(cons_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<r_core_task_t>())).cb as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(r_core_task_t),
            "::",
            stringify!(cb)
        )
    );
}
pub type RCoreTask = r_core_task_t;
pub type RCoreTaskOneShot =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn r_core_echo(core: *mut RCore, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn r_core_table(core: *mut RCore, name: *const ::std::os::raw::c_char) -> *mut RTable;
}
extern "C" {
    pub fn r_core_task_scheduler_init(tasks: *mut RCoreTaskScheduler, core: *mut RCore);
}
extern "C" {
    pub fn r_core_task_scheduler_fini(tasks: *mut RCoreTaskScheduler);
}
extern "C" {
    pub fn r_core_task_get(
        scheduler: *mut RCoreTaskScheduler,
        id: ::std::os::raw::c_int,
    ) -> *mut RCoreTask;
}
extern "C" {
    pub fn r_core_task_get_incref(
        scheduler: *mut RCoreTaskScheduler,
        id: ::std::os::raw::c_int,
    ) -> *mut RCoreTask;
}
extern "C" {
    pub fn r_core_task_print(
        core: *mut RCore,
        task: *mut RCoreTask,
        pj: *mut PJ,
        mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn r_core_task_list(core: *mut RCore, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_core_task_running_tasks_count(
        scheduler: *mut RCoreTaskScheduler,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_task_status(task: *mut RCoreTask) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn r_core_task_new(
        core: *mut RCore,
        create_cons: bool,
        cmd: *const ::std::os::raw::c_char,
        cb: RCoreTaskCallback,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut RCoreTask;
}
extern "C" {
    pub fn r_core_task_incref(task: *mut RCoreTask);
}
extern "C" {
    pub fn r_core_task_decref(task: *mut RCoreTask);
}
extern "C" {
    pub fn r_core_task_enqueue(scheduler: *mut RCoreTaskScheduler, task: *mut RCoreTask);
}
extern "C" {
    pub fn r_core_task_enqueue_oneshot(
        scheduler: *mut RCoreTaskScheduler,
        func: RCoreTaskOneShot,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn r_core_task_run_sync(
        scheduler: *mut RCoreTaskScheduler,
        task: *mut RCoreTask,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_task_sync_begin(scheduler: *mut RCoreTaskScheduler);
}
extern "C" {
    pub fn r_core_task_sync_end(scheduler: *mut RCoreTaskScheduler);
}
extern "C" {
    pub fn r_core_task_yield(scheduler: *mut RCoreTaskScheduler);
}
extern "C" {
    pub fn r_core_task_sleep_begin(task: *mut RCoreTask);
}
extern "C" {
    pub fn r_core_task_sleep_end(task: *mut RCoreTask);
}
extern "C" {
    pub fn r_core_task_break(scheduler: *mut RCoreTaskScheduler, id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn r_core_task_break_all(scheduler: *mut RCoreTaskScheduler);
}
extern "C" {
    pub fn r_core_task_del(
        scheduler: *mut RCoreTaskScheduler,
        id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_task_del_all_done(scheduler: *mut RCoreTaskScheduler);
}
extern "C" {
    pub fn r_core_task_self(scheduler: *mut RCoreTaskScheduler) -> *mut RCoreTask;
}
extern "C" {
    pub fn r_core_task_join(
        scheduler: *mut RCoreTaskScheduler,
        current: *mut RCoreTask,
        id: ::std::os::raw::c_int,
    );
}
pub type inRangeCb = ::std::option::Option<
    unsafe extern "C" fn(
        core: *mut RCore,
        from: ::std::os::raw::c_ulonglong,
        to: ::std::os::raw::c_ulonglong,
        vsize: ::std::os::raw::c_int,
        cb_user: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn r_core_search_value_in_range(
        core: *mut RCore,
        search_itv: RInterval,
        vmin: ::std::os::raw::c_ulonglong,
        vmax: ::std::os::raw::c_ulonglong,
        vsize: ::std::os::raw::c_int,
        cb: inRangeCb,
        cb_user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn r_core_autocomplete_add(
        parent: *mut RCoreAutocomplete,
        cmd: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        lock: bool,
    ) -> *mut RCoreAutocomplete;
}
extern "C" {
    pub fn r_core_autocomplete_free(obj: *mut RCoreAutocomplete);
}
extern "C" {
    pub fn r_core_autocomplete_reload(core: *mut RCore);
}
extern "C" {
    pub fn r_core_autocomplete_find(
        parent: *mut RCoreAutocomplete,
        cmd: *const ::std::os::raw::c_char,
        exact: bool,
    ) -> *mut RCoreAutocomplete;
}
extern "C" {
    pub fn r_core_autocomplete_remove(
        parent: *mut RCoreAutocomplete,
        cmd: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn r_core_anal_propagate_noreturn(core: *mut RCore, addr: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub static mut r_core_plugin_java: RCorePlugin;
}
extern "C" {
    pub static mut r_core_plugin_a2f: RCorePlugin;
}
extern "C" {
    pub static mut r_core_plugin_sixref: RCorePlugin;
}
extern "C" {
    pub fn r_core_plugin_init(cmd: *mut RCmd) -> bool;
}
extern "C" {
    pub fn r_core_plugin_add(cmd: *mut RCmd, plugin: *mut RCorePlugin) -> bool;
}
extern "C" {
    pub fn r_core_plugin_check(cmd: *mut RCmd, a0: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn r_core_plugin_fini(cmd: *mut RCmd) -> bool;
}
extern "C" {
    #[doc = " @brief Prints the data contained in the specified RAnnotatedCode in JSON format."]
    #[doc = ""]
    #[doc = " The function will print the output in console using the function r_cons_printf();"]
    #[doc = ""]
    #[doc = " @param code Pointer to a RAnnotatedCode."]
    pub fn r_codemeta_print_json(code: *mut RCodeMeta);
}
extern "C" {
    #[doc = " @brief Prints the decompiled code from the specified RAnnotatedCode."]
    #[doc = ""]
    #[doc = " This function is used for printing the output of commands pdg and pdgo."]
    #[doc = " It can print the decompiled code with or without offsets. If line_offsets is a null pointer,"]
    #[doc = " the output will be printed without offsets (pdg), otherwise, the output will be"]
    #[doc = " printed with offsets."]
    #[doc = " This function will print the output in console using the function r_cons_printf();"]
    #[doc = ""]
    #[doc = " @param code Pointer to a RAnnotatedCode."]
    #[doc = " @param line_offsets Pointer to a @ref RVector that contains offsets for the decompiled code."]
    pub fn r_codemeta_print(code: *mut RCodeMeta, line_offsets: *mut RVector);
}
extern "C" {
    #[doc = " @brief  Prints the decompiled code as comments"]
    #[doc = ""]
    #[doc = " This function is used for the output of command pdg*"]
    #[doc = " Output will be printed in console using the function r_cons_printf();"]
    #[doc = ""]
    #[doc = " @param code Pointer to a RAnnotatedCode."]
    pub fn r_codemeta_print_comment_cmds(code: *mut RCodeMeta);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_guts {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layer_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_syscall_args_t {
    pub _address: u8,
}
