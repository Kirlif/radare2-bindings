name: Generate bindings for r2libr ðŸš€

on:
  push:
    paths:
      - 'r2libr/**'
      - '!r2libr/libr/**'
    branches:
      - "*"
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-20.04
    steps:
    - name: Set up system path for python libs.
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Set up python and libclang.
      run: sudo apt update && sudo apt install python3 python3-pip libclang-11-dev -y
    
    - name: Set up (a specific version) ctypeslib.
      run: python3 -m pip install https://github.com/wtdcode/ctypeslib/archive/187171e5c2366d683e4b98943b919c9e379d2cd0.zip
    
    - name: Checkout the repo.
      uses: actions/checkout@v2
      with:
        submodules: recursive
    
    - name: Setup Ninja.
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Install meson.
      run: python3 -m pip install setuptools wheel meson
    
    - name: Clone latest radare2.
      run: cd r2libr && git clone https://github.com/radareorg/radare2

    - name: Checkout the tags
      if: startsWith(github.ref, 'refs/tags')
      run: cd r2libr/radare2/ && git checkout ${{ github.ref }}

    - name: Build radare2.
      run: cd r2libr && env BINDINGS=1 python3 setup.py build
    
    - name: Generate bindings.
      run: cd r2libr/tools && python3 gen.py -O ../libr/ -B ../radare2/pyr2installdir/

    - name: Test bindings.
      run: cd r2libr && python3 -m pip install -e . && cd tests && python3 test_r2libr.py
    
    - name: Set up git.
      run: git config --global user.email mio@lazym.io && git config --global user.name mio

    - name: Commit new bindings.
      run: git status | grep -q "changes"  && git add -u && git commit -m "r2libr generated on `date`"

    - name: Push new bindings
      run: mkdir -p ~/.ssh && echo "$BINDINGS_DEPLOY_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa && ssh-keyscan github.com >> ~/.ssh/known_hosts && git remote add orig git@github.com:radareorg/radare2-bindings.git && git push orig
      env:
        BINDINGS_DEPLOY_KEY: ${{ secrets.BINDINGS_DEPLOY_KEY }}
  
  test:
    needs: [generate]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        platform: [x64]
    steps:
    - name: Set up system path for python libs.
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up Python.
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Setup Ninja.
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Set up MSVC.
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1

    - name: Set up MSVC CMD x86_64.
      if: matrix.os == 'windows-latest' && matrix.platform == 'x64'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    
    - name: Set up MSVC CMD x86.
      if: matrix.os == 'windows-latest' && matrix.platform == 'x32'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86

    - name: Install dependencies.
      run: python3 -m pip install setuptools wheel meson

    - name: Clone latest radare2 and update ourselves.
      run: cd r2libr && git clone https://github.com/radareorg/radare2 && git pull

    - name: Remove link.exe to avoid conflicts and Build distribution ðŸ“¦ on Windows.
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: del /f "C:\Program Files\Git\mingw64\bin\link.exe"
    
    - name: Test our build.
      run: cd r2libr && python3 -m pip install -e . && cd tests && python3 test_r2libr.py
  
  build:
    needs: [test]
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        platform: [x64]
    steps:
    - name: Set up system path for python libs.
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up Python.
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Setup Ninja.
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Set up MSVC.
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1

    - name: Set up MSVC CMD x86_64.
      if: matrix.os == 'windows-latest' && matrix.platform == 'x64'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    
    - name: Set up MSVC CMD x86.
      if: matrix.os == 'windows-latest' && matrix.platform == 'x32'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86

    - name: Install dependencies.
      run: |
        python3 -m pip install setuptools wheel meson

    - name: Clone latest radare2.
      run: cd r2libr && git clone https://github.com/radareorg/radare2

    - name: Remove link.exe to avoid conflicts and Build distribution ðŸ“¦ on Windows.
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
          del /f "C:\Program Files\Git\mingw64\bin\link.exe"
          cd r2libr && python3 setup.py bdist_wheel
      
    - name: Build distribution ðŸ“¦.
      if: matrix.os != 'windows-latest'
      shell: bash
      run: cd r2libr && python3 setup.py bdist_wheel
    
    - name: Test our build.
      run: cd r2libr && python3 -m pip install -e . && cd tests && python3 test_r2libr.py
  
    - uses: actions/upload-artifact@v2
      with:
         path: ${{ github.workspace }}/r2libr/dist/*

  publish:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Publish distribution ðŸ“¦ to PyPI.
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_pass }}
